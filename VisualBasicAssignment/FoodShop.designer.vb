'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FoodShop")>  _
Partial Public Class FoodShopDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertMembership(instance As Membership)
    End Sub
  Partial Private Sub UpdateMembership(instance As Membership)
    End Sub
  Partial Private Sub DeleteMembership(instance As Membership)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.VisualBasicAssignment.My.MySettings.Default.FoodShopConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Staffs() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Memberships() As System.Data.Linq.Table(Of Membership)
		Get
			Return Me.GetTable(Of Membership)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff")>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _priority As Integer
	
	Private _position_id As Integer
	
	Private _salary As System.Nullable(Of Double)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub OnpriorityChanging(value As Integer)
    End Sub
    Partial Private Sub OnpriorityChanged()
    End Sub
    Partial Private Sub Onposition_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onposition_idChanged()
    End Sub
    Partial Private Sub OnsalaryChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnsalaryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_priority", DbType:="Int NOT NULL")>  _
	Public Property priority() As Integer
		Get
			Return Me._priority
		End Get
		Set
			If ((Me._priority = value)  _
						= false) Then
				Me.OnpriorityChanging(value)
				Me.SendPropertyChanging
				Me._priority = value
				Me.SendPropertyChanged("priority")
				Me.OnpriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_position_id", DbType:="Int NOT NULL")>  _
	Public Property position_id() As Integer
		Get
			Return Me._position_id
		End Get
		Set
			If ((Me._position_id = value)  _
						= false) Then
				Me.Onposition_idChanging(value)
				Me.SendPropertyChanging
				Me._position_id = value
				Me.SendPropertyChanged("position_id")
				Me.Onposition_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salary", DbType:="Float")>  _
	Public Property salary() As System.Nullable(Of Double)
		Get
			Return Me._salary
		End Get
		Set
			If (Me._salary.Equals(value) = false) Then
				Me.OnsalaryChanging(value)
				Me.SendPropertyChanging
				Me._salary = value
				Me.SendPropertyChanged("salary")
				Me.OnsalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Staff", Storage:="_User", ThisKey:="user_id", OtherKey:="user_id", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Staff = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Staff = Me
					Me._user_id = value.user_id
				Else
					Me._user_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _user_email As String
	
	Private _username As String
	
	Private _last_name As String
	
	Private _first_name As String
	
	Private _user_role As String
	
	Private _phone_num As String
	
	Private _gender As String
	
	Private _picture As System.Data.Linq.Binary
	
	Private _password As String
	
	Private _Staff As EntityRef(Of Staff)
	
	Private _Customer As EntityRef(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onuser_emailChanging(value As String)
    End Sub
    Partial Private Sub Onuser_emailChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub Onlast_nameChanging(value As String)
    End Sub
    Partial Private Sub Onlast_nameChanged()
    End Sub
    Partial Private Sub Onfirst_nameChanging(value As String)
    End Sub
    Partial Private Sub Onfirst_nameChanged()
    End Sub
    Partial Private Sub Onuser_roleChanging(value As String)
    End Sub
    Partial Private Sub Onuser_roleChanged()
    End Sub
    Partial Private Sub Onphone_numChanging(value As String)
    End Sub
    Partial Private Sub Onphone_numChanged()
    End Sub
    Partial Private Sub OngenderChanging(value As String)
    End Sub
    Partial Private Sub OngenderChanged()
    End Sub
    Partial Private Sub OnpictureChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnpictureChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Staff = CType(Nothing, EntityRef(Of Staff))
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property user_email() As String
		Get
			Return Me._user_email
		End Get
		Set
			If (String.Equals(Me._user_email, value) = false) Then
				Me.Onuser_emailChanging(value)
				Me.SendPropertyChanging
				Me._user_email = value
				Me.SendPropertyChanged("user_email")
				Me.Onuser_emailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_last_name", DbType:="NVarChar(20)")>  _
	Public Property last_name() As String
		Get
			Return Me._last_name
		End Get
		Set
			If (String.Equals(Me._last_name, value) = false) Then
				Me.Onlast_nameChanging(value)
				Me.SendPropertyChanging
				Me._last_name = value
				Me.SendPropertyChanged("last_name")
				Me.Onlast_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_first_name", DbType:="NVarChar(20)")>  _
	Public Property first_name() As String
		Get
			Return Me._first_name
		End Get
		Set
			If (String.Equals(Me._first_name, value) = false) Then
				Me.Onfirst_nameChanging(value)
				Me.SendPropertyChanging
				Me._first_name = value
				Me.SendPropertyChanged("first_name")
				Me.Onfirst_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_role", DbType:="NVarChar(1)")>  _
	Public Property user_role() As String
		Get
			Return Me._user_role
		End Get
		Set
			If (String.Equals(Me._user_role, value) = false) Then
				Me.Onuser_roleChanging(value)
				Me.SendPropertyChanging
				Me._user_role = value
				Me.SendPropertyChanged("user_role")
				Me.Onuser_roleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone_num", DbType:="NVarChar(11)")>  _
	Public Property phone_num() As String
		Get
			Return Me._phone_num
		End Get
		Set
			If (String.Equals(Me._phone_num, value) = false) Then
				Me.Onphone_numChanging(value)
				Me.SendPropertyChanging
				Me._phone_num = value
				Me.SendPropertyChanged("phone_num")
				Me.Onphone_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gender", DbType:="NVarChar(1)")>  _
	Public Property gender() As String
		Get
			Return Me._gender
		End Get
		Set
			If (String.Equals(Me._gender, value) = false) Then
				Me.OngenderChanging(value)
				Me.SendPropertyChanging
				Me._gender = value
				Me.SendPropertyChanged("gender")
				Me.OngenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property picture() As System.Data.Linq.Binary
		Get
			Return Me._picture
		End Get
		Set
			If (Object.Equals(Me._picture, value) = false) Then
				Me.OnpictureChanging(value)
				Me.SendPropertyChanging
				Me._picture = value
				Me.SendPropertyChanged("picture")
				Me.OnpictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Staff", Storage:="_Staff", ThisKey:="user_id", OtherKey:="user_id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Staff() As Staff
		Get
			Return Me._Staff.Entity
		End Get
		Set
			Dim previousValue As Staff = Me._Staff.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Staff.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Staff.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._Staff.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("Staff")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Customer", Storage:="_Customer", ThisKey:="user_id", OtherKey:="user_id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._Customer.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_id As Integer
	
	Private _birthday_date As System.Nullable(Of Date)
	
	Private _membership_id As Integer
	
	Private _wallate_amount As System.Nullable(Of Double)
	
	Private _User As EntityRef(Of User)
	
	Private _Membership As EntityRef(Of Membership)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onuser_idChanged()
    End Sub
    Partial Private Sub Onbirthday_dateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onbirthday_dateChanged()
    End Sub
    Partial Private Sub Onmembership_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onmembership_idChanged()
    End Sub
    Partial Private Sub Onwallate_amountChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onwallate_amountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		Me._Membership = CType(Nothing, EntityRef(Of Membership))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property user_id() As Integer
		Get
			Return Me._user_id
		End Get
		Set
			If ((Me._user_id = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onuser_idChanging(value)
				Me.SendPropertyChanging
				Me._user_id = value
				Me.SendPropertyChanged("user_id")
				Me.Onuser_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_birthday_date", DbType:="Date")>  _
	Public Property birthday_date() As System.Nullable(Of Date)
		Get
			Return Me._birthday_date
		End Get
		Set
			If (Me._birthday_date.Equals(value) = false) Then
				Me.Onbirthday_dateChanging(value)
				Me.SendPropertyChanging
				Me._birthday_date = value
				Me.SendPropertyChanged("birthday_date")
				Me.Onbirthday_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_membership_id", DbType:="Int NOT NULL")>  _
	Public Property membership_id() As Integer
		Get
			Return Me._membership_id
		End Get
		Set
			If ((Me._membership_id = value)  _
						= false) Then
				If Me._Membership.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onmembership_idChanging(value)
				Me.SendPropertyChanging
				Me._membership_id = value
				Me.SendPropertyChanged("membership_id")
				Me.Onmembership_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_wallate_amount", DbType:="Float")>  _
	Public Property wallate_amount() As System.Nullable(Of Double)
		Get
			Return Me._wallate_amount
		End Get
		Set
			If (Me._wallate_amount.Equals(value) = false) Then
				Me.Onwallate_amountChanging(value)
				Me.SendPropertyChanging
				Me._wallate_amount = value
				Me.SendPropertyChanged("wallate_amount")
				Me.Onwallate_amountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Customer", Storage:="_User", ThisKey:="user_id", OtherKey:="user_id", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Customer = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customer = Me
					Me._user_id = value.user_id
				Else
					Me._user_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Membership_Customer", Storage:="_Membership", ThisKey:="membership_id", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Membership() As Membership
		Get
			Return Me._Membership.Entity
		End Get
		Set
			Dim previousValue As Membership = Me._Membership.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Membership.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Membership.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._Membership.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._membership_id = value.id
				Else
					Me._membership_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Membership")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Membership")>  _
Partial Public Class Membership
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _name As String
	
	Private _description As String
	
	Private _Customers As EntitySet(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Membership_Customer", Storage:="_Customers", ThisKey:="id", OtherKey:="membership_id")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Membership = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Membership = Nothing
	End Sub
End Class
