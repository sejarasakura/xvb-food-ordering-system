// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using Microsoft.VisualBasic.CompilerServices;

namespace VisualBasicAssignment
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("FoodShopDataSet")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class FoodShopDataSet : DataSet
    {
        private AddressDataTable tableAddress;
        private UsersDataTable tableUsers;
        private CartDataTable tableCart;
        private CartDetailsDataTable tableCartDetails;
        private CatergoryDataTable tableCatergory;
        private CustomerDataTable tableCustomer;
        private DeliveryDataTable tableDelivery;
        private DeliveryChainDataTable tableDeliveryChain;
        private DeliveryChainDetailsDataTable tableDeliveryChainDetails;
        private DeliveryCompanyDataTable tableDeliveryCompany;
        private DeliveryStatusDataTable tableDeliveryStatus;
        private FoodDataTable tableFood;
        private MembershipDataTable tableMembership;
        private MenuDataTable tableMenu;
        private MenuItemsDataTable tableMenuItems;
        private OrderDataTable tableOrder;
        private OrderDetailsDataTable tableOrderDetails;
        private PaymentDataTable tablePayment;
        private PaymentDetailsDataTable tablePaymentDetails;
        private PaymentMethodDataTable tablePaymentMethod;
        private PaymentStatusDataTable tablePaymentStatus;
        private PositionDataTable tablePosition;
        private ResetPasswordTokenDataTable tableResetPasswordToken;
        private StaffDataTable tableStaff;
        private UserAddressDataTable tableUserAddress;
        private DataRelation relationFK__Cart__customer_i__3E52440B;
        private DataRelation relationFK__CartDetai__cart___412EB0B6;
        private DataRelation relationFK__CartDetai__food___4222D4EF;
        private DataRelation relationFK__Customer__member__300424B4;
        private DataRelation relationFK__Customer__user_i__2F10007B;
        private DataRelation relationFK__Delivery__delive__6A30C649;
        private DataRelation relationFK__Delivery__destin__693CA210;
        private DataRelation relationFK__Delivery__final___6B24EA82;
        private DataRelation relationFK__Delivery__source__68487DD7;
        private DataRelation relationFK__DeliveryC__addre__6EF57B66;
        private DataRelation relationFK__DeliveryC__deliv__6FE99F9F;
        private DataRelation relationFK__DeliveryC__deliv__72C60C4A;
        private DataRelation relationFK__DeliveryC__tranf__73BA3083;
        private DataRelation relationFK__Food__catergory___398D8EEE;
        private DataRelation relationFK__Food__duty_staff__38996AB5;
        private DataRelation relationFK__MenuItems__food___76969D2E;
        private DataRelation relationFK__MenuItems__menu___778AC167;
        private DataRelation relationFK__Order__customer___44FF419A;
        private DataRelation relationFK__OrderDeta__food___48CFD27E;
        private DataRelation relationFK__OrderDeta__order__47DBAE45;
        private DataRelation relationFK__Payment__payment__52593CB8;
        private DataRelation relationFK__Payment__payment__534D60F1;
        private DataRelation relationFK__Payment__user_id__5441852A;
        private DataRelation relationFK__PaymentDe__food___5812160E;
        private DataRelation relationFK__PaymentDe__payme__571DF1D5;
        private DataRelation relationFK__ResetPass__user___35BCFE0A;
        private DataRelation relationFK__Staff__position___2C3393D0;
        private DataRelation relationFK__Staff__user_id__2B3F6F97;
        private DataRelation relationFK__UserAddre__addre__6477ECF3;
        private DataRelation relationFK__UserAddre__user___6383C8BA;
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public FoodShopDataSet() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected FoodShopDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }

            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["Address"] is object)
                {
                    base.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }

                if (ds.Tables["Users"] is object)
                {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }

                if (ds.Tables["Cart"] is object)
                {
                    base.Tables.Add(new CartDataTable(ds.Tables["Cart"]));
                }

                if (ds.Tables["CartDetails"] is object)
                {
                    base.Tables.Add(new CartDetailsDataTable(ds.Tables["CartDetails"]));
                }

                if (ds.Tables["Catergory"] is object)
                {
                    base.Tables.Add(new CatergoryDataTable(ds.Tables["Catergory"]));
                }

                if (ds.Tables["Customer"] is object)
                {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }

                if (ds.Tables["Delivery"] is object)
                {
                    base.Tables.Add(new DeliveryDataTable(ds.Tables["Delivery"]));
                }

                if (ds.Tables["DeliveryChain"] is object)
                {
                    base.Tables.Add(new DeliveryChainDataTable(ds.Tables["DeliveryChain"]));
                }

                if (ds.Tables["DeliveryChainDetails"] is object)
                {
                    base.Tables.Add(new DeliveryChainDetailsDataTable(ds.Tables["DeliveryChainDetails"]));
                }

                if (ds.Tables["DeliveryCompany"] is object)
                {
                    base.Tables.Add(new DeliveryCompanyDataTable(ds.Tables["DeliveryCompany"]));
                }

                if (ds.Tables["DeliveryStatus"] is object)
                {
                    base.Tables.Add(new DeliveryStatusDataTable(ds.Tables["DeliveryStatus"]));
                }

                if (ds.Tables["Food"] is object)
                {
                    base.Tables.Add(new FoodDataTable(ds.Tables["Food"]));
                }

                if (ds.Tables["Membership"] is object)
                {
                    base.Tables.Add(new MembershipDataTable(ds.Tables["Membership"]));
                }

                if (ds.Tables["Menu"] is object)
                {
                    base.Tables.Add(new MenuDataTable(ds.Tables["Menu"]));
                }

                if (ds.Tables["MenuItems"] is object)
                {
                    base.Tables.Add(new MenuItemsDataTable(ds.Tables["MenuItems"]));
                }

                if (ds.Tables["Order"] is object)
                {
                    base.Tables.Add(new OrderDataTable(ds.Tables["Order"]));
                }

                if (ds.Tables["OrderDetails"] is object)
                {
                    base.Tables.Add(new OrderDetailsDataTable(ds.Tables["OrderDetails"]));
                }

                if (ds.Tables["Payment"] is object)
                {
                    base.Tables.Add(new PaymentDataTable(ds.Tables["Payment"]));
                }

                if (ds.Tables["PaymentDetails"] is object)
                {
                    base.Tables.Add(new PaymentDetailsDataTable(ds.Tables["PaymentDetails"]));
                }

                if (ds.Tables["PaymentMethod"] is object)
                {
                    base.Tables.Add(new PaymentMethodDataTable(ds.Tables["PaymentMethod"]));
                }

                if (ds.Tables["PaymentStatus"] is object)
                {
                    base.Tables.Add(new PaymentStatusDataTable(ds.Tables["PaymentStatus"]));
                }

                if (ds.Tables["Position"] is object)
                {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }

                if (ds.Tables["ResetPasswordToken"] is object)
                {
                    base.Tables.Add(new ResetPasswordTokenDataTable(ds.Tables["ResetPasswordToken"]));
                }

                if (ds.Tables["Staff"] is object)
                {
                    base.Tables.Add(new StaffDataTable(ds.Tables["Staff"]));
                }

                if (ds.Tables["UserAddress"] is object)
                {
                    base.Tables.Add(new UserAddressDataTable(ds.Tables["UserAddress"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }

            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddressDataTable Address
        {
            get
            {
                return tableAddress;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users
        {
            get
            {
                return tableUsers;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CartDataTable Cart
        {
            get
            {
                return tableCart;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CartDetailsDataTable CartDetails
        {
            get
            {
                return tableCartDetails;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CatergoryDataTable Catergory
        {
            get
            {
                return tableCatergory;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomerDataTable Customer
        {
            get
            {
                return tableCustomer;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryDataTable Delivery
        {
            get
            {
                return tableDelivery;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryChainDataTable DeliveryChain
        {
            get
            {
                return tableDeliveryChain;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryChainDetailsDataTable DeliveryChainDetails
        {
            get
            {
                return tableDeliveryChainDetails;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryCompanyDataTable DeliveryCompany
        {
            get
            {
                return tableDeliveryCompany;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DeliveryStatusDataTable DeliveryStatus
        {
            get
            {
                return tableDeliveryStatus;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FoodDataTable Food
        {
            get
            {
                return tableFood;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembershipDataTable Membership
        {
            get
            {
                return tableMembership;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MenuDataTable Menu
        {
            get
            {
                return tableMenu;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MenuItemsDataTable MenuItems
        {
            get
            {
                return tableMenuItems;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderDataTable Order
        {
            get
            {
                return tableOrder;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderDetailsDataTable OrderDetails
        {
            get
            {
                return tableOrderDetails;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentDataTable Payment
        {
            get
            {
                return tablePayment;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentDetailsDataTable PaymentDetails
        {
            get
            {
                return tablePaymentDetails;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentMethodDataTable PaymentMethod
        {
            get
            {
                return tablePaymentMethod;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentStatusDataTable PaymentStatus
        {
            get
            {
                return tablePaymentStatus;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PositionDataTable Position
        {
            get
            {
                return tablePosition;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResetPasswordTokenDataTable ResetPasswordToken
        {
            get
            {
                return tableResetPasswordToken;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StaffDataTable Staff
        {
            get
            {
                return tableStaff;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserAddressDataTable UserAddress
        {
            get
            {
                return tableUserAddress;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }

            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public override DataSet Clone()
        {
            FoodShopDataSet cln = (FoodShopDataSet)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["Address"] is object)
                {
                    base.Tables.Add(new AddressDataTable(ds.Tables["Address"]));
                }

                if (ds.Tables["Users"] is object)
                {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }

                if (ds.Tables["Cart"] is object)
                {
                    base.Tables.Add(new CartDataTable(ds.Tables["Cart"]));
                }

                if (ds.Tables["CartDetails"] is object)
                {
                    base.Tables.Add(new CartDetailsDataTable(ds.Tables["CartDetails"]));
                }

                if (ds.Tables["Catergory"] is object)
                {
                    base.Tables.Add(new CatergoryDataTable(ds.Tables["Catergory"]));
                }

                if (ds.Tables["Customer"] is object)
                {
                    base.Tables.Add(new CustomerDataTable(ds.Tables["Customer"]));
                }

                if (ds.Tables["Delivery"] is object)
                {
                    base.Tables.Add(new DeliveryDataTable(ds.Tables["Delivery"]));
                }

                if (ds.Tables["DeliveryChain"] is object)
                {
                    base.Tables.Add(new DeliveryChainDataTable(ds.Tables["DeliveryChain"]));
                }

                if (ds.Tables["DeliveryChainDetails"] is object)
                {
                    base.Tables.Add(new DeliveryChainDetailsDataTable(ds.Tables["DeliveryChainDetails"]));
                }

                if (ds.Tables["DeliveryCompany"] is object)
                {
                    base.Tables.Add(new DeliveryCompanyDataTable(ds.Tables["DeliveryCompany"]));
                }

                if (ds.Tables["DeliveryStatus"] is object)
                {
                    base.Tables.Add(new DeliveryStatusDataTable(ds.Tables["DeliveryStatus"]));
                }

                if (ds.Tables["Food"] is object)
                {
                    base.Tables.Add(new FoodDataTable(ds.Tables["Food"]));
                }

                if (ds.Tables["Membership"] is object)
                {
                    base.Tables.Add(new MembershipDataTable(ds.Tables["Membership"]));
                }

                if (ds.Tables["Menu"] is object)
                {
                    base.Tables.Add(new MenuDataTable(ds.Tables["Menu"]));
                }

                if (ds.Tables["MenuItems"] is object)
                {
                    base.Tables.Add(new MenuItemsDataTable(ds.Tables["MenuItems"]));
                }

                if (ds.Tables["Order"] is object)
                {
                    base.Tables.Add(new OrderDataTable(ds.Tables["Order"]));
                }

                if (ds.Tables["OrderDetails"] is object)
                {
                    base.Tables.Add(new OrderDetailsDataTable(ds.Tables["OrderDetails"]));
                }

                if (ds.Tables["Payment"] is object)
                {
                    base.Tables.Add(new PaymentDataTable(ds.Tables["Payment"]));
                }

                if (ds.Tables["PaymentDetails"] is object)
                {
                    base.Tables.Add(new PaymentDetailsDataTable(ds.Tables["PaymentDetails"]));
                }

                if (ds.Tables["PaymentMethod"] is object)
                {
                    base.Tables.Add(new PaymentMethodDataTable(ds.Tables["PaymentMethod"]));
                }

                if (ds.Tables["PaymentStatus"] is object)
                {
                    base.Tables.Add(new PaymentStatusDataTable(ds.Tables["PaymentStatus"]));
                }

                if (ds.Tables["Position"] is object)
                {
                    base.Tables.Add(new PositionDataTable(ds.Tables["Position"]));
                }

                if (ds.Tables["ResetPasswordToken"] is object)
                {
                    base.Tables.Add(new ResetPasswordTokenDataTable(ds.Tables["ResetPasswordToken"]));
                }

                if (ds.Tables["Staff"] is object)
                {
                    base.Tables.Add(new StaffDataTable(ds.Tables["Staff"]));
                }

                if (ds.Tables["UserAddress"] is object)
                {
                    base.Tables.Add(new UserAddressDataTable(ds.Tables["UserAddress"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableAddress = (AddressDataTable)base.Tables["Address"];
            if (initTable == true)
            {
                if (tableAddress is object)
                {
                    tableAddress.InitVars();
                }
            }

            tableUsers = (UsersDataTable)base.Tables["Users"];
            if (initTable == true)
            {
                if (tableUsers is object)
                {
                    tableUsers.InitVars();
                }
            }

            tableCart = (CartDataTable)base.Tables["Cart"];
            if (initTable == true)
            {
                if (tableCart is object)
                {
                    tableCart.InitVars();
                }
            }

            tableCartDetails = (CartDetailsDataTable)base.Tables["CartDetails"];
            if (initTable == true)
            {
                if (tableCartDetails is object)
                {
                    tableCartDetails.InitVars();
                }
            }

            tableCatergory = (CatergoryDataTable)base.Tables["Catergory"];
            if (initTable == true)
            {
                if (tableCatergory is object)
                {
                    tableCatergory.InitVars();
                }
            }

            tableCustomer = (CustomerDataTable)base.Tables["Customer"];
            if (initTable == true)
            {
                if (tableCustomer is object)
                {
                    tableCustomer.InitVars();
                }
            }

            tableDelivery = (DeliveryDataTable)base.Tables["Delivery"];
            if (initTable == true)
            {
                if (tableDelivery is object)
                {
                    tableDelivery.InitVars();
                }
            }

            tableDeliveryChain = (DeliveryChainDataTable)base.Tables["DeliveryChain"];
            if (initTable == true)
            {
                if (tableDeliveryChain is object)
                {
                    tableDeliveryChain.InitVars();
                }
            }

            tableDeliveryChainDetails = (DeliveryChainDetailsDataTable)base.Tables["DeliveryChainDetails"];
            if (initTable == true)
            {
                if (tableDeliveryChainDetails is object)
                {
                    tableDeliveryChainDetails.InitVars();
                }
            }

            tableDeliveryCompany = (DeliveryCompanyDataTable)base.Tables["DeliveryCompany"];
            if (initTable == true)
            {
                if (tableDeliveryCompany is object)
                {
                    tableDeliveryCompany.InitVars();
                }
            }

            tableDeliveryStatus = (DeliveryStatusDataTable)base.Tables["DeliveryStatus"];
            if (initTable == true)
            {
                if (tableDeliveryStatus is object)
                {
                    tableDeliveryStatus.InitVars();
                }
            }

            tableFood = (FoodDataTable)base.Tables["Food"];
            if (initTable == true)
            {
                if (tableFood is object)
                {
                    tableFood.InitVars();
                }
            }

            tableMembership = (MembershipDataTable)base.Tables["Membership"];
            if (initTable == true)
            {
                if (tableMembership is object)
                {
                    tableMembership.InitVars();
                }
            }

            tableMenu = (MenuDataTable)base.Tables["Menu"];
            if (initTable == true)
            {
                if (tableMenu is object)
                {
                    tableMenu.InitVars();
                }
            }

            tableMenuItems = (MenuItemsDataTable)base.Tables["MenuItems"];
            if (initTable == true)
            {
                if (tableMenuItems is object)
                {
                    tableMenuItems.InitVars();
                }
            }

            tableOrder = (OrderDataTable)base.Tables["Order"];
            if (initTable == true)
            {
                if (tableOrder is object)
                {
                    tableOrder.InitVars();
                }
            }

            tableOrderDetails = (OrderDetailsDataTable)base.Tables["OrderDetails"];
            if (initTable == true)
            {
                if (tableOrderDetails is object)
                {
                    tableOrderDetails.InitVars();
                }
            }

            tablePayment = (PaymentDataTable)base.Tables["Payment"];
            if (initTable == true)
            {
                if (tablePayment is object)
                {
                    tablePayment.InitVars();
                }
            }

            tablePaymentDetails = (PaymentDetailsDataTable)base.Tables["PaymentDetails"];
            if (initTable == true)
            {
                if (tablePaymentDetails is object)
                {
                    tablePaymentDetails.InitVars();
                }
            }

            tablePaymentMethod = (PaymentMethodDataTable)base.Tables["PaymentMethod"];
            if (initTable == true)
            {
                if (tablePaymentMethod is object)
                {
                    tablePaymentMethod.InitVars();
                }
            }

            tablePaymentStatus = (PaymentStatusDataTable)base.Tables["PaymentStatus"];
            if (initTable == true)
            {
                if (tablePaymentStatus is object)
                {
                    tablePaymentStatus.InitVars();
                }
            }

            tablePosition = (PositionDataTable)base.Tables["Position"];
            if (initTable == true)
            {
                if (tablePosition is object)
                {
                    tablePosition.InitVars();
                }
            }

            tableResetPasswordToken = (ResetPasswordTokenDataTable)base.Tables["ResetPasswordToken"];
            if (initTable == true)
            {
                if (tableResetPasswordToken is object)
                {
                    tableResetPasswordToken.InitVars();
                }
            }

            tableStaff = (StaffDataTable)base.Tables["Staff"];
            if (initTable == true)
            {
                if (tableStaff is object)
                {
                    tableStaff.InitVars();
                }
            }

            tableUserAddress = (UserAddressDataTable)base.Tables["UserAddress"];
            if (initTable == true)
            {
                if (tableUserAddress is object)
                {
                    tableUserAddress.InitVars();
                }
            }

            relationFK__Cart__customer_i__3E52440B = Relations["FK__Cart__customer_i__3E52440B"];
            relationFK__CartDetai__cart___412EB0B6 = Relations["FK__CartDetai__cart___412EB0B6"];
            relationFK__CartDetai__food___4222D4EF = Relations["FK__CartDetai__food___4222D4EF"];
            relationFK__Customer__member__300424B4 = Relations["FK__Customer__member__300424B4"];
            relationFK__Customer__user_i__2F10007B = Relations["FK__Customer__user_i__2F10007B"];
            relationFK__Delivery__delive__6A30C649 = Relations["FK__Delivery__delive__6A30C649"];
            relationFK__Delivery__destin__693CA210 = Relations["FK__Delivery__destin__693CA210"];
            relationFK__Delivery__final___6B24EA82 = Relations["FK__Delivery__final___6B24EA82"];
            relationFK__Delivery__source__68487DD7 = Relations["FK__Delivery__source__68487DD7"];
            relationFK__DeliveryC__addre__6EF57B66 = Relations["FK__DeliveryC__addre__6EF57B66"];
            relationFK__DeliveryC__deliv__6FE99F9F = Relations["FK__DeliveryC__deliv__6FE99F9F"];
            relationFK__DeliveryC__deliv__72C60C4A = Relations["FK__DeliveryC__deliv__72C60C4A"];
            relationFK__DeliveryC__tranf__73BA3083 = Relations["FK__DeliveryC__tranf__73BA3083"];
            relationFK__Food__catergory___398D8EEE = Relations["FK__Food__catergory___398D8EEE"];
            relationFK__Food__duty_staff__38996AB5 = Relations["FK__Food__duty_staff__38996AB5"];
            relationFK__MenuItems__food___76969D2E = Relations["FK__MenuItems__food___76969D2E"];
            relationFK__MenuItems__menu___778AC167 = Relations["FK__MenuItems__menu___778AC167"];
            relationFK__Order__customer___44FF419A = Relations["FK__Order__customer___44FF419A"];
            relationFK__OrderDeta__food___48CFD27E = Relations["FK__OrderDeta__food___48CFD27E"];
            relationFK__OrderDeta__order__47DBAE45 = Relations["FK__OrderDeta__order__47DBAE45"];
            relationFK__Payment__payment__52593CB8 = Relations["FK__Payment__payment__52593CB8"];
            relationFK__Payment__payment__534D60F1 = Relations["FK__Payment__payment__534D60F1"];
            relationFK__Payment__user_id__5441852A = Relations["FK__Payment__user_id__5441852A"];
            relationFK__PaymentDe__food___5812160E = Relations["FK__PaymentDe__food___5812160E"];
            relationFK__PaymentDe__payme__571DF1D5 = Relations["FK__PaymentDe__payme__571DF1D5"];
            relationFK__ResetPass__user___35BCFE0A = Relations["FK__ResetPass__user___35BCFE0A"];
            relationFK__Staff__position___2C3393D0 = Relations["FK__Staff__position___2C3393D0"];
            relationFK__Staff__user_id__2B3F6F97 = Relations["FK__Staff__user_id__2B3F6F97"];
            relationFK__UserAddre__addre__6477ECF3 = Relations["FK__UserAddre__addre__6477ECF3"];
            relationFK__UserAddre__user___6383C8BA = Relations["FK__UserAddre__user___6383C8BA"];
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void InitClass()
        {
            DataSetName = "FoodShopDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/FoodShopDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableAddress = new AddressDataTable();
            base.Tables.Add(tableAddress);
            tableUsers = new UsersDataTable();
            base.Tables.Add(tableUsers);
            tableCart = new CartDataTable();
            base.Tables.Add(tableCart);
            tableCartDetails = new CartDetailsDataTable();
            base.Tables.Add(tableCartDetails);
            tableCatergory = new CatergoryDataTable();
            base.Tables.Add(tableCatergory);
            tableCustomer = new CustomerDataTable();
            base.Tables.Add(tableCustomer);
            tableDelivery = new DeliveryDataTable();
            base.Tables.Add(tableDelivery);
            tableDeliveryChain = new DeliveryChainDataTable();
            base.Tables.Add(tableDeliveryChain);
            tableDeliveryChainDetails = new DeliveryChainDetailsDataTable();
            base.Tables.Add(tableDeliveryChainDetails);
            tableDeliveryCompany = new DeliveryCompanyDataTable();
            base.Tables.Add(tableDeliveryCompany);
            tableDeliveryStatus = new DeliveryStatusDataTable();
            base.Tables.Add(tableDeliveryStatus);
            tableFood = new FoodDataTable();
            base.Tables.Add(tableFood);
            tableMembership = new MembershipDataTable();
            base.Tables.Add(tableMembership);
            tableMenu = new MenuDataTable();
            base.Tables.Add(tableMenu);
            tableMenuItems = new MenuItemsDataTable();
            base.Tables.Add(tableMenuItems);
            tableOrder = new OrderDataTable();
            base.Tables.Add(tableOrder);
            tableOrderDetails = new OrderDetailsDataTable();
            base.Tables.Add(tableOrderDetails);
            tablePayment = new PaymentDataTable();
            base.Tables.Add(tablePayment);
            tablePaymentDetails = new PaymentDetailsDataTable();
            base.Tables.Add(tablePaymentDetails);
            tablePaymentMethod = new PaymentMethodDataTable();
            base.Tables.Add(tablePaymentMethod);
            tablePaymentStatus = new PaymentStatusDataTable();
            base.Tables.Add(tablePaymentStatus);
            tablePosition = new PositionDataTable();
            base.Tables.Add(tablePosition);
            tableResetPasswordToken = new ResetPasswordTokenDataTable();
            base.Tables.Add(tableResetPasswordToken);
            tableStaff = new StaffDataTable();
            base.Tables.Add(tableStaff);
            tableUserAddress = new UserAddressDataTable();
            base.Tables.Add(tableUserAddress);
            relationFK__Cart__customer_i__3E52440B = new DataRelation("FK__Cart__customer_i__3E52440B", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableCart.customer_idColumn }, false);
            Relations.Add(relationFK__Cart__customer_i__3E52440B);
            relationFK__CartDetai__cart___412EB0B6 = new DataRelation("FK__CartDetai__cart___412EB0B6", new DataColumn[] { tableCart.idColumn }, new DataColumn[] { tableCartDetails.cart_idColumn }, false);
            Relations.Add(relationFK__CartDetai__cart___412EB0B6);
            relationFK__CartDetai__food___4222D4EF = new DataRelation("FK__CartDetai__food___4222D4EF", new DataColumn[] { tableFood.idColumn }, new DataColumn[] { tableCartDetails.food_idColumn }, false);
            Relations.Add(relationFK__CartDetai__food___4222D4EF);
            relationFK__Customer__member__300424B4 = new DataRelation("FK__Customer__member__300424B4", new DataColumn[] { tableMembership.idColumn }, new DataColumn[] { tableCustomer.membership_idColumn }, false);
            Relations.Add(relationFK__Customer__member__300424B4);
            relationFK__Customer__user_i__2F10007B = new DataRelation("FK__Customer__user_i__2F10007B", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableCustomer.user_idColumn }, false);
            Relations.Add(relationFK__Customer__user_i__2F10007B);
            relationFK__Delivery__delive__6A30C649 = new DataRelation("FK__Delivery__delive__6A30C649", new DataColumn[] { tableDeliveryCompany.idColumn }, new DataColumn[] { tableDelivery.delivery_companyColumn }, false);
            Relations.Add(relationFK__Delivery__delive__6A30C649);
            relationFK__Delivery__destin__693CA210 = new DataRelation("FK__Delivery__destin__693CA210", new DataColumn[] { tableAddress.idColumn }, new DataColumn[] { tableDelivery.destinationColumn }, false);
            Relations.Add(relationFK__Delivery__destin__693CA210);
            relationFK__Delivery__final___6B24EA82 = new DataRelation("FK__Delivery__final___6B24EA82", new DataColumn[] { tableDeliveryStatus.idColumn }, new DataColumn[] { tableDelivery.final_delivery_statusColumn }, false);
            Relations.Add(relationFK__Delivery__final___6B24EA82);
            relationFK__Delivery__source__68487DD7 = new DataRelation("FK__Delivery__source__68487DD7", new DataColumn[] { tableAddress.idColumn }, new DataColumn[] { tableDelivery.sourceColumn }, false);
            Relations.Add(relationFK__Delivery__source__68487DD7);
            relationFK__DeliveryC__addre__6EF57B66 = new DataRelation("FK__DeliveryC__addre__6EF57B66", new DataColumn[] { tableAddress.idColumn }, new DataColumn[] { tableDeliveryChain.address_idColumn }, false);
            Relations.Add(relationFK__DeliveryC__addre__6EF57B66);
            relationFK__DeliveryC__deliv__6FE99F9F = new DataRelation("FK__DeliveryC__deliv__6FE99F9F", new DataColumn[] { tableDeliveryStatus.idColumn }, new DataColumn[] { tableDeliveryChain.delivery_statusColumn }, false);
            Relations.Add(relationFK__DeliveryC__deliv__6FE99F9F);
            relationFK__DeliveryC__deliv__72C60C4A = new DataRelation("FK__DeliveryC__deliv__72C60C4A", new DataColumn[] { tableDelivery.idColumn }, new DataColumn[] { tableDeliveryChainDetails.delivery_idColumn }, false);
            Relations.Add(relationFK__DeliveryC__deliv__72C60C4A);
            relationFK__DeliveryC__tranf__73BA3083 = new DataRelation("FK__DeliveryC__tranf__73BA3083", new DataColumn[] { tableDeliveryChain.idColumn }, new DataColumn[] { tableDeliveryChainDetails.tranfer_chain_idColumn }, false);
            Relations.Add(relationFK__DeliveryC__tranf__73BA3083);
            relationFK__Food__catergory___398D8EEE = new DataRelation("FK__Food__catergory___398D8EEE", new DataColumn[] { tableCatergory.idColumn }, new DataColumn[] { tableFood.catergory_idColumn }, false);
            Relations.Add(relationFK__Food__catergory___398D8EEE);
            relationFK__Food__duty_staff__38996AB5 = new DataRelation("FK__Food__duty_staff__38996AB5", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableFood.duty_staff_idColumn }, false);
            Relations.Add(relationFK__Food__duty_staff__38996AB5);
            relationFK__MenuItems__food___76969D2E = new DataRelation("FK__MenuItems__food___76969D2E", new DataColumn[] { tableFood.idColumn }, new DataColumn[] { tableMenuItems.food_idColumn }, false);
            Relations.Add(relationFK__MenuItems__food___76969D2E);
            relationFK__MenuItems__menu___778AC167 = new DataRelation("FK__MenuItems__menu___778AC167", new DataColumn[] { tableMenu.idColumn }, new DataColumn[] { tableMenuItems.menu_idColumn }, false);
            Relations.Add(relationFK__MenuItems__menu___778AC167);
            relationFK__Order__customer___44FF419A = new DataRelation("FK__Order__customer___44FF419A", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableOrder.customer_idColumn }, false);
            Relations.Add(relationFK__Order__customer___44FF419A);
            relationFK__OrderDeta__food___48CFD27E = new DataRelation("FK__OrderDeta__food___48CFD27E", new DataColumn[] { tableFood.idColumn }, new DataColumn[] { tableOrderDetails.food_idColumn }, false);
            Relations.Add(relationFK__OrderDeta__food___48CFD27E);
            relationFK__OrderDeta__order__47DBAE45 = new DataRelation("FK__OrderDeta__order__47DBAE45", new DataColumn[] { tableOrder.idColumn }, new DataColumn[] { tableOrderDetails.order_idColumn }, false);
            Relations.Add(relationFK__OrderDeta__order__47DBAE45);
            relationFK__Payment__payment__52593CB8 = new DataRelation("FK__Payment__payment__52593CB8", new DataColumn[] { tablePaymentMethod.idColumn }, new DataColumn[] { tablePayment.payment_methodColumn }, false);
            Relations.Add(relationFK__Payment__payment__52593CB8);
            relationFK__Payment__payment__534D60F1 = new DataRelation("FK__Payment__payment__534D60F1", new DataColumn[] { tablePaymentStatus.idColumn }, new DataColumn[] { tablePayment.payment_statusColumn }, false);
            Relations.Add(relationFK__Payment__payment__534D60F1);
            relationFK__Payment__user_id__5441852A = new DataRelation("FK__Payment__user_id__5441852A", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tablePayment.user_idColumn }, false);
            Relations.Add(relationFK__Payment__user_id__5441852A);
            relationFK__PaymentDe__food___5812160E = new DataRelation("FK__PaymentDe__food___5812160E", new DataColumn[] { tableFood.idColumn }, new DataColumn[] { tablePaymentDetails.food_idColumn }, false);
            Relations.Add(relationFK__PaymentDe__food___5812160E);
            relationFK__PaymentDe__payme__571DF1D5 = new DataRelation("FK__PaymentDe__payme__571DF1D5", new DataColumn[] { tablePayment.idColumn }, new DataColumn[] { tablePaymentDetails.payment_idColumn }, false);
            Relations.Add(relationFK__PaymentDe__payme__571DF1D5);
            relationFK__ResetPass__user___35BCFE0A = new DataRelation("FK__ResetPass__user___35BCFE0A", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableResetPasswordToken.user_idColumn }, false);
            Relations.Add(relationFK__ResetPass__user___35BCFE0A);
            relationFK__Staff__position___2C3393D0 = new DataRelation("FK__Staff__position___2C3393D0", new DataColumn[] { tablePosition.idColumn }, new DataColumn[] { tableStaff.position_idColumn }, false);
            Relations.Add(relationFK__Staff__position___2C3393D0);
            relationFK__Staff__user_id__2B3F6F97 = new DataRelation("FK__Staff__user_id__2B3F6F97", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableStaff.user_idColumn }, false);
            Relations.Add(relationFK__Staff__user_id__2B3F6F97);
            relationFK__UserAddre__addre__6477ECF3 = new DataRelation("FK__UserAddre__addre__6477ECF3", new DataColumn[] { tableAddress.idColumn }, new DataColumn[] { tableUserAddress.address_idColumn }, false);
            Relations.Add(relationFK__UserAddre__addre__6477ECF3);
            relationFK__UserAddre__user___6383C8BA = new DataRelation("FK__UserAddre__user___6383C8BA", new DataColumn[] { tableUsers.user_idColumn }, new DataColumn[] { tableUserAddress.user_idColumn }, false);
            Relations.Add(relationFK__UserAddre__user___6383C8BA);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeAddress()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeUsers()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeCart()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeCartDetails()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeCatergory()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeCustomer()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDelivery()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDeliveryChain()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDeliveryChainDetails()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDeliveryCompany()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeDeliveryStatus()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeFood()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMembership()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMenu()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeMenuItems()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeOrder()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeOrderDetails()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePayment()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePaymentDetails()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePaymentMethod()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePaymentStatus()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializePosition()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeResetPasswordToken()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeStaff()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private bool ShouldSerializeUserAddress()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new FoodShopDataSet();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;
                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {
                            }

                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (s1 is object)
                    {
                        s1.Close();
                    }

                    if (s2 is object)
                    {
                        s2.Close();
                    }
                }
            }

            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void AddressRowChangeEventHandler(object sender, AddressRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void CartRowChangeEventHandler(object sender, CartRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void CartDetailsRowChangeEventHandler(object sender, CartDetailsRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void CatergoryRowChangeEventHandler(object sender, CatergoryRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void CustomerRowChangeEventHandler(object sender, CustomerRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeliveryRowChangeEventHandler(object sender, DeliveryRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeliveryChainRowChangeEventHandler(object sender, DeliveryChainRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeliveryChainDetailsRowChangeEventHandler(object sender, DeliveryChainDetailsRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeliveryCompanyRowChangeEventHandler(object sender, DeliveryCompanyRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void DeliveryStatusRowChangeEventHandler(object sender, DeliveryStatusRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void FoodRowChangeEventHandler(object sender, FoodRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void MembershipRowChangeEventHandler(object sender, MembershipRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void MenuRowChangeEventHandler(object sender, MenuRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void MenuItemsRowChangeEventHandler(object sender, MenuItemsRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void OrderRowChangeEventHandler(object sender, OrderRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void OrderDetailsRowChangeEventHandler(object sender, OrderDetailsRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PaymentRowChangeEventHandler(object sender, PaymentRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PaymentDetailsRowChangeEventHandler(object sender, PaymentDetailsRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PaymentMethodRowChangeEventHandler(object sender, PaymentMethodRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PaymentStatusRowChangeEventHandler(object sender, PaymentStatusRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void PositionRowChangeEventHandler(object sender, PositionRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void ResetPasswordTokenRowChangeEventHandler(object sender, ResetPasswordTokenRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void StaffRowChangeEventHandler(object sender, StaffRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public delegate void UserAddressRowChangeEventHandler(object sender, UserAddressRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class AddressDataTable : TypedTableBase<AddressRow>
        {
            private DataColumn columnid;
            private DataColumn columnlatitude;
            private DataColumn columnlongitude;
            private DataColumn columndetails;
            private DataColumn columnstreet;
            private DataColumn columncity;
            private DataColumn columnstate;
            private DataColumn columnposcode;
            private DataColumn columncountry;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressDataTable() : base()
            {
                TableName = "Address";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AddressDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected AddressDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn latitudeColumn
            {
                get
                {
                    return columnlatitude;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn longitudeColumn
            {
                get
                {
                    return columnlongitude;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn detailsColumn
            {
                get
                {
                    return columndetails;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn streetColumn
            {
                get
                {
                    return columnstreet;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn cityColumn
            {
                get
                {
                    return columncity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn stateColumn
            {
                get
                {
                    return columnstate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn poscodeColumn
            {
                get
                {
                    return columnposcode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn countryColumn
            {
                get
                {
                    return columncountry;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow this[int index]
            {
                get
                {
                    return (AddressRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AddressRowChangeEventHandler AddressRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AddressRowChangeEventHandler AddressRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AddressRowChangeEventHandler AddressRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event AddressRowChangeEventHandler AddressRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddAddressRow(AddressRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow AddAddressRow(Guid id, double latitude, double longitude, string details, string street, string city, string state, string poscode, string country)
            {
                AddressRow rowAddressRow = (AddressRow)NewRow();
                var columnValuesArray = new object[] { id, latitude, longitude, details, street, city, state, poscode, country };
                rowAddressRow.ItemArray = columnValuesArray;
                Rows.Add(rowAddressRow);
                return rowAddressRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow FindByid(Guid id)
            {
                return (AddressRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                AddressDataTable cln = (AddressDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new AddressDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnlatitude = Columns["latitude"];
                columnlongitude = Columns["longitude"];
                columndetails = Columns["details"];
                columnstreet = Columns["street"];
                columncity = Columns["city"];
                columnstate = Columns["state"];
                columnposcode = Columns["poscode"];
                columncountry = Columns["country"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnlatitude = new DataColumn("latitude", typeof(double), null, MappingType.Element);
                Columns.Add(columnlatitude);
                columnlongitude = new DataColumn("longitude", typeof(double), null, MappingType.Element);
                Columns.Add(columnlongitude);
                columndetails = new DataColumn("details", typeof(string), null, MappingType.Element);
                Columns.Add(columndetails);
                columnstreet = new DataColumn("street", typeof(string), null, MappingType.Element);
                Columns.Add(columnstreet);
                columncity = new DataColumn("city", typeof(string), null, MappingType.Element);
                Columns.Add(columncity);
                columnstate = new DataColumn("state", typeof(string), null, MappingType.Element);
                Columns.Add(columnstate);
                columnposcode = new DataColumn("poscode", typeof(string), null, MappingType.Element);
                Columns.Add(columnposcode);
                columncountry = new DataColumn("country", typeof(string), null, MappingType.Element);
                Columns.Add(columncountry);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnlatitude.AllowDBNull = false;
                columnlongitude.AllowDBNull = false;
                columndetails.AllowDBNull = false;
                columndetails.MaxLength = 100;
                columnstreet.AllowDBNull = false;
                columnstreet.MaxLength = 50;
                columncity.AllowDBNull = false;
                columncity.MaxLength = 50;
                columnstate.MaxLength = 50;
                columnposcode.MaxLength = 50;
                columncountry.MaxLength = 50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow NewAddressRow()
            {
                return (AddressRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new AddressRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(AddressRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (AddressRowChanged is object)
                {
                    AddressRowChanged?.Invoke(this, new AddressRowChangeEvent((AddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (AddressRowChanging is object)
                {
                    AddressRowChanging?.Invoke(this, new AddressRowChangeEvent((AddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (AddressRowDeleted is object)
                {
                    AddressRowDeleted?.Invoke(this, new AddressRowChangeEvent((AddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (AddressRowDeleting is object)
                {
                    AddressRowDeleting?.Invoke(this, new AddressRowChangeEvent((AddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveAddressRow(AddressRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AddressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class UsersDataTable : TypedTableBase<UsersRow>
        {
            private DataColumn columnuser_id;
            private DataColumn columnuser_email;
            private DataColumn columnusername;
            private DataColumn columnlast_name;
            private DataColumn columnfirst_name;
            private DataColumn columnuser_role;
            private DataColumn columnphone_num;
            private DataColumn columngender;
            private DataColumn columnpicture;
            private DataColumn columnpassword;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersDataTable() : base()
            {
                TableName = "Users";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UsersDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_emailColumn
            {
                get
                {
                    return columnuser_email;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn usernameColumn
            {
                get
                {
                    return columnusername;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn last_nameColumn
            {
                get
                {
                    return columnlast_name;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn first_nameColumn
            {
                get
                {
                    return columnfirst_name;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_roleColumn
            {
                get
                {
                    return columnuser_role;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn phone_numColumn
            {
                get
                {
                    return columnphone_num;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn genderColumn
            {
                get
                {
                    return columngender;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn pictureColumn
            {
                get
                {
                    return columnpicture;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn passwordColumn
            {
                get
                {
                    return columnpassword;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow this[int index]
            {
                get
                {
                    return (UsersRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UsersRowChangeEventHandler UsersRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UsersRowChangeEventHandler UsersRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UsersRowChangeEventHandler UsersRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UsersRowChangeEventHandler UsersRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddUsersRow(UsersRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow AddUsersRow(string user_email, string username, string last_name, string first_name, string user_role, string phone_num, string gender, byte[] picture, string password)
            {
                UsersRow rowUsersRow = (UsersRow)NewRow();
                var columnValuesArray = new object[] { null, user_email, username, last_name, first_name, user_role, phone_num, gender, picture, password };
                rowUsersRow.ItemArray = columnValuesArray;
                Rows.Add(rowUsersRow);
                return rowUsersRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow FindByuser_id(int user_id)
            {
                return (UsersRow)Rows.Find(new object[] { user_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                UsersDataTable cln = (UsersDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new UsersDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnuser_id = Columns["user_id"];
                columnuser_email = Columns["user_email"];
                columnusername = Columns["username"];
                columnlast_name = Columns["last_name"];
                columnfirst_name = Columns["first_name"];
                columnuser_role = Columns["user_role"];
                columnphone_num = Columns["phone_num"];
                columngender = Columns["gender"];
                columnpicture = Columns["picture"];
                columnpassword = Columns["password"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                columnuser_email = new DataColumn("user_email", typeof(string), null, MappingType.Element);
                Columns.Add(columnuser_email);
                columnusername = new DataColumn("username", typeof(string), null, MappingType.Element);
                Columns.Add(columnusername);
                columnlast_name = new DataColumn("last_name", typeof(string), null, MappingType.Element);
                Columns.Add(columnlast_name);
                columnfirst_name = new DataColumn("first_name", typeof(string), null, MappingType.Element);
                Columns.Add(columnfirst_name);
                columnuser_role = new DataColumn("user_role", typeof(string), null, MappingType.Element);
                Columns.Add(columnuser_role);
                columnphone_num = new DataColumn("phone_num", typeof(string), null, MappingType.Element);
                Columns.Add(columnphone_num);
                columngender = new DataColumn("gender", typeof(string), null, MappingType.Element);
                Columns.Add(columngender);
                columnpicture = new DataColumn("picture", typeof(byte[]), null, MappingType.Element);
                Columns.Add(columnpicture);
                columnpassword = new DataColumn("password", typeof(string), null, MappingType.Element);
                Columns.Add(columnpassword);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnuser_id }, true));
                columnuser_id.AutoIncrement = true;
                columnuser_id.AutoIncrementSeed = -1;
                columnuser_id.AutoIncrementStep = -1;
                columnuser_id.AllowDBNull = false;
                columnuser_id.ReadOnly = true;
                columnuser_id.Unique = true;
                columnuser_email.AllowDBNull = false;
                columnuser_email.MaxLength = 50;
                columnusername.MaxLength = 50;
                columnlast_name.MaxLength = 20;
                columnfirst_name.MaxLength = 20;
                columnuser_role.MaxLength = 1;
                columnphone_num.MaxLength = 11;
                columngender.MaxLength = 1;
                columnpassword.AllowDBNull = false;
                columnpassword.MaxLength = 50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow NewUsersRow()
            {
                return (UsersRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new UsersRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(UsersRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (UsersRowChanged is object)
                {
                    UsersRowChanged?.Invoke(this, new UsersRowChangeEvent((UsersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (UsersRowChanging is object)
                {
                    UsersRowChanging?.Invoke(this, new UsersRowChangeEvent((UsersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (UsersRowDeleted is object)
                {
                    UsersRowDeleted?.Invoke(this, new UsersRowChangeEvent((UsersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (UsersRowDeleting is object)
                {
                    UsersRowDeleting?.Invoke(this, new UsersRowChangeEvent((UsersRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveUsersRow(UsersRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CartDataTable : TypedTableBase<CartRow>
        {
            private DataColumn columnid;
            private DataColumn columncustomer_id;
            private DataColumn columnremark;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDataTable() : base()
            {
                TableName = "Cart";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CartDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected CartDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn customer_idColumn
            {
                get
                {
                    return columncustomer_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn remarkColumn
            {
                get
                {
                    return columnremark;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow this[int index]
            {
                get
                {
                    return (CartRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartRowChangeEventHandler CartRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartRowChangeEventHandler CartRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartRowChangeEventHandler CartRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartRowChangeEventHandler CartRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddCartRow(CartRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow AddCartRow(UsersRow parentUsersRowByFK__Cart__customer_i__3E52440B, string remark)
            {
                CartRow rowCartRow = (CartRow)NewRow();
                var columnValuesArray = new object[] { null, null, remark };
                if (parentUsersRowByFK__Cart__customer_i__3E52440B is object)
                {
                    columnValuesArray[1] = parentUsersRowByFK__Cart__customer_i__3E52440B[0];
                }

                rowCartRow.ItemArray = columnValuesArray;
                Rows.Add(rowCartRow);
                return rowCartRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow FindByid(int id)
            {
                return (CartRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                CartDataTable cln = (CartDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CartDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columncustomer_id = Columns["customer_id"];
                columnremark = Columns["remark"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columncustomer_id = new DataColumn("customer_id", typeof(int), null, MappingType.Element);
                Columns.Add(columncustomer_id);
                columnremark = new DataColumn("remark", typeof(string), null, MappingType.Element);
                Columns.Add(columnremark);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columncustomer_id.AllowDBNull = false;
                columnremark.MaxLength = 200;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow NewCartRow()
            {
                return (CartRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CartRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CartRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (CartRowChanged is object)
                {
                    CartRowChanged?.Invoke(this, new CartRowChangeEvent((CartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (CartRowChanging is object)
                {
                    CartRowChanging?.Invoke(this, new CartRowChangeEvent((CartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (CartRowDeleted is object)
                {
                    CartRowDeleted?.Invoke(this, new CartRowChangeEvent((CartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (CartRowDeleting is object)
                {
                    CartRowDeleting?.Invoke(this, new CartRowChangeEvent((CartRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveCartRow(CartRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CartDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CartDetailsDataTable : TypedTableBase<CartDetailsRow>
        {
            private DataColumn columncart_id;
            private DataColumn columnfood_id;
            private DataColumn columnquantity;
            private DataColumn columnadd_datetime;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsDataTable() : base()
            {
                TableName = "CartDetails";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CartDetailsDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected CartDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn cart_idColumn
            {
                get
                {
                    return columncart_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn food_idColumn
            {
                get
                {
                    return columnfood_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn quantityColumn
            {
                get
                {
                    return columnquantity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn add_datetimeColumn
            {
                get
                {
                    return columnadd_datetime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow this[int index]
            {
                get
                {
                    return (CartDetailsRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartDetailsRowChangeEventHandler CartDetailsRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartDetailsRowChangeEventHandler CartDetailsRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartDetailsRowChangeEventHandler CartDetailsRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CartDetailsRowChangeEventHandler CartDetailsRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddCartDetailsRow(CartDetailsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow AddCartDetailsRow(CartRow parentCartRowByFK__CartDetai__cart___412EB0B6, FoodRow parentFoodRowByFK__CartDetai__food___4222D4EF, int quantity, DateTime add_datetime)
            {
                CartDetailsRow rowCartDetailsRow = (CartDetailsRow)NewRow();
                var columnValuesArray = new object[] { null, null, quantity, add_datetime };
                if (parentCartRowByFK__CartDetai__cart___412EB0B6 is object)
                {
                    columnValuesArray[0] = parentCartRowByFK__CartDetai__cart___412EB0B6[0];
                }

                if (parentFoodRowByFK__CartDetai__food___4222D4EF is object)
                {
                    columnValuesArray[1] = parentFoodRowByFK__CartDetai__food___4222D4EF[0];
                }

                rowCartDetailsRow.ItemArray = columnValuesArray;
                Rows.Add(rowCartDetailsRow);
                return rowCartDetailsRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow FindBycart_idfood_id(int cart_id, int food_id)
            {
                return (CartDetailsRow)Rows.Find(new object[] { cart_id, food_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                CartDetailsDataTable cln = (CartDetailsDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CartDetailsDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columncart_id = Columns["cart_id"];
                columnfood_id = Columns["food_id"];
                columnquantity = Columns["quantity"];
                columnadd_datetime = Columns["add_datetime"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columncart_id = new DataColumn("cart_id", typeof(int), null, MappingType.Element);
                Columns.Add(columncart_id);
                columnfood_id = new DataColumn("food_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnfood_id);
                columnquantity = new DataColumn("quantity", typeof(int), null, MappingType.Element);
                Columns.Add(columnquantity);
                columnadd_datetime = new DataColumn("add_datetime", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnadd_datetime);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columncart_id, columnfood_id }, true));
                columncart_id.AllowDBNull = false;
                columnfood_id.AllowDBNull = false;
                columnquantity.AllowDBNull = false;
                columnadd_datetime.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow NewCartDetailsRow()
            {
                return (CartDetailsRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CartDetailsRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CartDetailsRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (CartDetailsRowChanged is object)
                {
                    CartDetailsRowChanged?.Invoke(this, new CartDetailsRowChangeEvent((CartDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (CartDetailsRowChanging is object)
                {
                    CartDetailsRowChanging?.Invoke(this, new CartDetailsRowChangeEvent((CartDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (CartDetailsRowDeleted is object)
                {
                    CartDetailsRowDeleted?.Invoke(this, new CartDetailsRowChangeEvent((CartDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (CartDetailsRowDeleting is object)
                {
                    CartDetailsRowDeleting?.Invoke(this, new CartDetailsRowChangeEvent((CartDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveCartDetailsRow(CartDetailsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CartDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CatergoryDataTable : TypedTableBase<CatergoryRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryDataTable() : base()
            {
                TableName = "Catergory";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CatergoryDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected CatergoryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow this[int index]
            {
                get
                {
                    return (CatergoryRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CatergoryRowChangeEventHandler CatergoryRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CatergoryRowChangeEventHandler CatergoryRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CatergoryRowChangeEventHandler CatergoryRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CatergoryRowChangeEventHandler CatergoryRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddCatergoryRow(CatergoryRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow AddCatergoryRow(string name, string description)
            {
                CatergoryRow rowCatergoryRow = (CatergoryRow)NewRow();
                var columnValuesArray = new object[] { null, name, description };
                rowCatergoryRow.ItemArray = columnValuesArray;
                Rows.Add(rowCatergoryRow);
                return rowCatergoryRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow FindByid(int id)
            {
                return (CatergoryRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                CatergoryDataTable cln = (CatergoryDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CatergoryDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow NewCatergoryRow()
            {
                return (CatergoryRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CatergoryRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CatergoryRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (CatergoryRowChanged is object)
                {
                    CatergoryRowChanged?.Invoke(this, new CatergoryRowChangeEvent((CatergoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (CatergoryRowChanging is object)
                {
                    CatergoryRowChanging?.Invoke(this, new CatergoryRowChangeEvent((CatergoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (CatergoryRowDeleted is object)
                {
                    CatergoryRowDeleted?.Invoke(this, new CatergoryRowChangeEvent((CatergoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (CatergoryRowDeleting is object)
                {
                    CatergoryRowDeleting?.Invoke(this, new CatergoryRowChangeEvent((CatergoryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveCatergoryRow(CatergoryRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CatergoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class CustomerDataTable : TypedTableBase<CustomerRow>
        {
            private DataColumn columnuser_id;
            private DataColumn columnbirthday_date;
            private DataColumn columnmembership_id;
            private DataColumn columnwallate_amount;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerDataTable() : base()
            {
                TableName = "Customer";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CustomerDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected CustomerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn birthday_dateColumn
            {
                get
                {
                    return columnbirthday_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn membership_idColumn
            {
                get
                {
                    return columnmembership_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn wallate_amountColumn
            {
                get
                {
                    return columnwallate_amount;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow this[int index]
            {
                get
                {
                    return (CustomerRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CustomerRowChangeEventHandler CustomerRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CustomerRowChangeEventHandler CustomerRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CustomerRowChangeEventHandler CustomerRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event CustomerRowChangeEventHandler CustomerRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddCustomerRow(CustomerRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow AddCustomerRow(UsersRow parentUsersRowByFK__Customer__user_i__2F10007B, DateTime birthday_date, MembershipRow parentMembershipRowByFK__Customer__member__300424B4, double wallate_amount)
            {
                CustomerRow rowCustomerRow = (CustomerRow)NewRow();
                var columnValuesArray = new object[] { null, birthday_date, null, wallate_amount };
                if (parentUsersRowByFK__Customer__user_i__2F10007B is object)
                {
                    columnValuesArray[0] = parentUsersRowByFK__Customer__user_i__2F10007B[0];
                }

                if (parentMembershipRowByFK__Customer__member__300424B4 is object)
                {
                    columnValuesArray[2] = parentMembershipRowByFK__Customer__member__300424B4[0];
                }

                rowCustomerRow.ItemArray = columnValuesArray;
                Rows.Add(rowCustomerRow);
                return rowCustomerRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow FindByuser_id(int user_id)
            {
                return (CustomerRow)Rows.Find(new object[] { user_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                CustomerDataTable cln = (CustomerDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new CustomerDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnuser_id = Columns["user_id"];
                columnbirthday_date = Columns["birthday_date"];
                columnmembership_id = Columns["membership_id"];
                columnwallate_amount = Columns["wallate_amount"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                columnbirthday_date = new DataColumn("birthday_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnbirthday_date);
                columnmembership_id = new DataColumn("membership_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnmembership_id);
                columnwallate_amount = new DataColumn("wallate_amount", typeof(double), null, MappingType.Element);
                Columns.Add(columnwallate_amount);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnuser_id }, true));
                columnuser_id.AllowDBNull = false;
                columnuser_id.Unique = true;
                columnmembership_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow NewCustomerRow()
            {
                return (CustomerRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new CustomerRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(CustomerRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (CustomerRowChanged is object)
                {
                    CustomerRowChanged?.Invoke(this, new CustomerRowChangeEvent((CustomerRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (CustomerRowChanging is object)
                {
                    CustomerRowChanging?.Invoke(this, new CustomerRowChangeEvent((CustomerRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (CustomerRowDeleted is object)
                {
                    CustomerRowDeleted?.Invoke(this, new CustomerRowChangeEvent((CustomerRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (CustomerRowDeleting is object)
                {
                    CustomerRowDeleting?.Invoke(this, new CustomerRowChangeEvent((CustomerRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveCustomerRow(CustomerRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class DeliveryDataTable : TypedTableBase<DeliveryRow>
        {
            private DataColumn columnid;
            private DataColumn columnsource;
            private DataColumn columndestination;
            private DataColumn columndelivery_note;
            private DataColumn columnfinal_delivery_status;
            private DataColumn columndelivery_company;
            private DataColumn columnrecive_dates;
            private DataColumn columnrecive_prove;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryDataTable() : base()
            {
                TableName = "Delivery";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeliveryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn sourceColumn
            {
                get
                {
                    return columnsource;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn destinationColumn
            {
                get
                {
                    return columndestination;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn delivery_noteColumn
            {
                get
                {
                    return columndelivery_note;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn final_delivery_statusColumn
            {
                get
                {
                    return columnfinal_delivery_status;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn delivery_companyColumn
            {
                get
                {
                    return columndelivery_company;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn recive_datesColumn
            {
                get
                {
                    return columnrecive_dates;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn recive_proveColumn
            {
                get
                {
                    return columnrecive_prove;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow this[int index]
            {
                get
                {
                    return (DeliveryRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryRowChangeEventHandler DeliveryRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryRowChangeEventHandler DeliveryRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryRowChangeEventHandler DeliveryRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryRowChangeEventHandler DeliveryRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeliveryRow(DeliveryRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow AddDeliveryRow(Guid id, AddressRow parentAddressRowByFK__Delivery__source__68487DD7, AddressRow parentAddressRowByFK__Delivery__destin__693CA210, string delivery_note, DeliveryStatusRow parentDeliveryStatusRowByFK__Delivery__final___6B24EA82, DeliveryCompanyRow parentDeliveryCompanyRowByFK__Delivery__delive__6A30C649, DateTime recive_dates, byte[] recive_prove)
            {
                DeliveryRow rowDeliveryRow = (DeliveryRow)NewRow();
                var columnValuesArray = new object[] { id, null, null, delivery_note, null, null, recive_dates, recive_prove };
                if (parentAddressRowByFK__Delivery__source__68487DD7 is object)
                {
                    columnValuesArray[1] = parentAddressRowByFK__Delivery__source__68487DD7[0];
                }

                if (parentAddressRowByFK__Delivery__destin__693CA210 is object)
                {
                    columnValuesArray[2] = parentAddressRowByFK__Delivery__destin__693CA210[0];
                }

                if (parentDeliveryStatusRowByFK__Delivery__final___6B24EA82 is object)
                {
                    columnValuesArray[4] = parentDeliveryStatusRowByFK__Delivery__final___6B24EA82[0];
                }

                if (parentDeliveryCompanyRowByFK__Delivery__delive__6A30C649 is object)
                {
                    columnValuesArray[5] = parentDeliveryCompanyRowByFK__Delivery__delive__6A30C649[0];
                }

                rowDeliveryRow.ItemArray = columnValuesArray;
                Rows.Add(rowDeliveryRow);
                return rowDeliveryRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow FindByid(Guid id)
            {
                return (DeliveryRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                DeliveryDataTable cln = (DeliveryDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new DeliveryDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnsource = Columns["source"];
                columndestination = Columns["destination"];
                columndelivery_note = Columns["delivery_note"];
                columnfinal_delivery_status = Columns["final_delivery_status"];
                columndelivery_company = Columns["delivery_company"];
                columnrecive_dates = Columns["recive_dates"];
                columnrecive_prove = Columns["recive_prove"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnsource = new DataColumn("source", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnsource);
                columndestination = new DataColumn("destination", typeof(Guid), null, MappingType.Element);
                Columns.Add(columndestination);
                columndelivery_note = new DataColumn("delivery_note", typeof(string), null, MappingType.Element);
                Columns.Add(columndelivery_note);
                columnfinal_delivery_status = new DataColumn("final_delivery_status", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnfinal_delivery_status);
                columndelivery_company = new DataColumn("delivery_company", typeof(Guid), null, MappingType.Element);
                Columns.Add(columndelivery_company);
                columnrecive_dates = new DataColumn("recive_dates", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnrecive_dates);
                columnrecive_prove = new DataColumn("recive_prove", typeof(byte[]), null, MappingType.Element);
                Columns.Add(columnrecive_prove);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnsource.AllowDBNull = false;
                columndestination.AllowDBNull = false;
                columndelivery_note.MaxLength = 100;
                columnfinal_delivery_status.AllowDBNull = false;
                columndelivery_company.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow NewDeliveryRow()
            {
                return (DeliveryRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DeliveryRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(DeliveryRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (DeliveryRowChanged is object)
                {
                    DeliveryRowChanged?.Invoke(this, new DeliveryRowChangeEvent((DeliveryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (DeliveryRowChanging is object)
                {
                    DeliveryRowChanging?.Invoke(this, new DeliveryRowChangeEvent((DeliveryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (DeliveryRowDeleted is object)
                {
                    DeliveryRowDeleted?.Invoke(this, new DeliveryRowChangeEvent((DeliveryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (DeliveryRowDeleting is object)
                {
                    DeliveryRowDeleting?.Invoke(this, new DeliveryRowChangeEvent((DeliveryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeliveryRow(DeliveryRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeliveryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class DeliveryChainDataTable : TypedTableBase<DeliveryChainRow>
        {
            private DataColumn columnid;
            private DataColumn columnarrival_dates;
            private DataColumn columnaddress_id;
            private DataColumn columndelivery_status;
            private DataColumn columnnotes;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDataTable() : base()
            {
                TableName = "DeliveryChain";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryChainDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeliveryChainDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn arrival_datesColumn
            {
                get
                {
                    return columnarrival_dates;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn address_idColumn
            {
                get
                {
                    return columnaddress_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn delivery_statusColumn
            {
                get
                {
                    return columndelivery_status;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn notesColumn
            {
                get
                {
                    return columnnotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow this[int index]
            {
                get
                {
                    return (DeliveryChainRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainRowChangeEventHandler DeliveryChainRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainRowChangeEventHandler DeliveryChainRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainRowChangeEventHandler DeliveryChainRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainRowChangeEventHandler DeliveryChainRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeliveryChainRow(DeliveryChainRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow AddDeliveryChainRow(Guid id, DateTime arrival_dates, AddressRow parentAddressRowByFK__DeliveryC__addre__6EF57B66, DeliveryStatusRow parentDeliveryStatusRowByFK__DeliveryC__deliv__6FE99F9F, string notes)
            {
                DeliveryChainRow rowDeliveryChainRow = (DeliveryChainRow)NewRow();
                var columnValuesArray = new object[] { id, arrival_dates, null, null, notes };
                if (parentAddressRowByFK__DeliveryC__addre__6EF57B66 is object)
                {
                    columnValuesArray[2] = parentAddressRowByFK__DeliveryC__addre__6EF57B66[0];
                }

                if (parentDeliveryStatusRowByFK__DeliveryC__deliv__6FE99F9F is object)
                {
                    columnValuesArray[3] = parentDeliveryStatusRowByFK__DeliveryC__deliv__6FE99F9F[0];
                }

                rowDeliveryChainRow.ItemArray = columnValuesArray;
                Rows.Add(rowDeliveryChainRow);
                return rowDeliveryChainRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow FindByid(Guid id)
            {
                return (DeliveryChainRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                DeliveryChainDataTable cln = (DeliveryChainDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new DeliveryChainDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnarrival_dates = Columns["arrival_dates"];
                columnaddress_id = Columns["address_id"];
                columndelivery_status = Columns["delivery_status"];
                columnnotes = Columns["notes"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnarrival_dates = new DataColumn("arrival_dates", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnarrival_dates);
                columnaddress_id = new DataColumn("address_id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnaddress_id);
                columndelivery_status = new DataColumn("delivery_status", typeof(Guid), null, MappingType.Element);
                Columns.Add(columndelivery_status);
                columnnotes = new DataColumn("notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnnotes);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnarrival_dates.AllowDBNull = false;
                columnaddress_id.AllowDBNull = false;
                columnnotes.AllowDBNull = false;
                columnnotes.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow NewDeliveryChainRow()
            {
                return (DeliveryChainRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DeliveryChainRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(DeliveryChainRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (DeliveryChainRowChanged is object)
                {
                    DeliveryChainRowChanged?.Invoke(this, new DeliveryChainRowChangeEvent((DeliveryChainRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (DeliveryChainRowChanging is object)
                {
                    DeliveryChainRowChanging?.Invoke(this, new DeliveryChainRowChangeEvent((DeliveryChainRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (DeliveryChainRowDeleted is object)
                {
                    DeliveryChainRowDeleted?.Invoke(this, new DeliveryChainRowChangeEvent((DeliveryChainRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (DeliveryChainRowDeleting is object)
                {
                    DeliveryChainRowDeleting?.Invoke(this, new DeliveryChainRowChangeEvent((DeliveryChainRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeliveryChainRow(DeliveryChainRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeliveryChainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class DeliveryChainDetailsDataTable : TypedTableBase<DeliveryChainDetailsRow>
        {
            private DataColumn columndelivery_id;
            private DataColumn columntranfer_chain_id;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsDataTable() : base()
            {
                TableName = "DeliveryChainDetails";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryChainDetailsDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeliveryChainDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn delivery_idColumn
            {
                get
                {
                    return columndelivery_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn tranfer_chain_idColumn
            {
                get
                {
                    return columntranfer_chain_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow this[int index]
            {
                get
                {
                    return (DeliveryChainDetailsRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainDetailsRowChangeEventHandler DeliveryChainDetailsRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainDetailsRowChangeEventHandler DeliveryChainDetailsRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainDetailsRowChangeEventHandler DeliveryChainDetailsRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryChainDetailsRowChangeEventHandler DeliveryChainDetailsRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeliveryChainDetailsRow(DeliveryChainDetailsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow AddDeliveryChainDetailsRow(DeliveryRow parentDeliveryRowByFK__DeliveryC__deliv__72C60C4A, DeliveryChainRow parentDeliveryChainRowByFK__DeliveryC__tranf__73BA3083)
            {
                DeliveryChainDetailsRow rowDeliveryChainDetailsRow = (DeliveryChainDetailsRow)NewRow();
                var columnValuesArray = new object[] { null, null };
                if (parentDeliveryRowByFK__DeliveryC__deliv__72C60C4A is object)
                {
                    columnValuesArray[0] = parentDeliveryRowByFK__DeliveryC__deliv__72C60C4A[0];
                }

                if (parentDeliveryChainRowByFK__DeliveryC__tranf__73BA3083 is object)
                {
                    columnValuesArray[1] = parentDeliveryChainRowByFK__DeliveryC__tranf__73BA3083[0];
                }

                rowDeliveryChainDetailsRow.ItemArray = columnValuesArray;
                Rows.Add(rowDeliveryChainDetailsRow);
                return rowDeliveryChainDetailsRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow FindBydelivery_idtranfer_chain_id(Guid delivery_id, Guid tranfer_chain_id)
            {
                return (DeliveryChainDetailsRow)Rows.Find(new object[] { delivery_id, tranfer_chain_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                DeliveryChainDetailsDataTable cln = (DeliveryChainDetailsDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new DeliveryChainDetailsDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columndelivery_id = Columns["delivery_id"];
                columntranfer_chain_id = Columns["tranfer_chain_id"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columndelivery_id = new DataColumn("delivery_id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columndelivery_id);
                columntranfer_chain_id = new DataColumn("tranfer_chain_id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columntranfer_chain_id);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columndelivery_id, columntranfer_chain_id }, true));
                columndelivery_id.AllowDBNull = false;
                columntranfer_chain_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow NewDeliveryChainDetailsRow()
            {
                return (DeliveryChainDetailsRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DeliveryChainDetailsRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(DeliveryChainDetailsRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (DeliveryChainDetailsRowChanged is object)
                {
                    DeliveryChainDetailsRowChanged?.Invoke(this, new DeliveryChainDetailsRowChangeEvent((DeliveryChainDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (DeliveryChainDetailsRowChanging is object)
                {
                    DeliveryChainDetailsRowChanging?.Invoke(this, new DeliveryChainDetailsRowChangeEvent((DeliveryChainDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (DeliveryChainDetailsRowDeleted is object)
                {
                    DeliveryChainDetailsRowDeleted?.Invoke(this, new DeliveryChainDetailsRowChangeEvent((DeliveryChainDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (DeliveryChainDetailsRowDeleting is object)
                {
                    DeliveryChainDetailsRowDeleting?.Invoke(this, new DeliveryChainDetailsRowChangeEvent((DeliveryChainDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeliveryChainDetailsRow(DeliveryChainDetailsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeliveryChainDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class DeliveryCompanyDataTable : TypedTableBase<DeliveryCompanyRow>
        {
            private DataColumn columnid;
            private DataColumn columncompany_name;
            private DataColumn columncompany_phones;
            private DataColumn columndescription;
            private DataColumn columnrm_per_g;
            private DataColumn columnrm_per_cm3;
            private DataColumn columngradient;
            private DataColumn columnprefence_country;
            private DataColumn columnoversea_support;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyDataTable() : base()
            {
                TableName = "DeliveryCompany";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryCompanyDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeliveryCompanyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn company_nameColumn
            {
                get
                {
                    return columncompany_name;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn company_phonesColumn
            {
                get
                {
                    return columncompany_phones;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn rm_per_gColumn
            {
                get
                {
                    return columnrm_per_g;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn rm_per_cm3Column
            {
                get
                {
                    return columnrm_per_cm3;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn gradientColumn
            {
                get
                {
                    return columngradient;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn prefence_countryColumn
            {
                get
                {
                    return columnprefence_country;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn oversea_supportColumn
            {
                get
                {
                    return columnoversea_support;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow this[int index]
            {
                get
                {
                    return (DeliveryCompanyRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryCompanyRowChangeEventHandler DeliveryCompanyRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryCompanyRowChangeEventHandler DeliveryCompanyRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryCompanyRowChangeEventHandler DeliveryCompanyRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryCompanyRowChangeEventHandler DeliveryCompanyRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeliveryCompanyRow(DeliveryCompanyRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow AddDeliveryCompanyRow(Guid id, string company_name, string company_phones, string description, double rm_per_g, double rm_per_cm3, double gradient, string prefence_country, bool oversea_support)
            {
                DeliveryCompanyRow rowDeliveryCompanyRow = (DeliveryCompanyRow)NewRow();
                var columnValuesArray = new object[] { id, company_name, company_phones, description, rm_per_g, rm_per_cm3, gradient, prefence_country, oversea_support };
                rowDeliveryCompanyRow.ItemArray = columnValuesArray;
                Rows.Add(rowDeliveryCompanyRow);
                return rowDeliveryCompanyRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow FindByid(Guid id)
            {
                return (DeliveryCompanyRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                DeliveryCompanyDataTable cln = (DeliveryCompanyDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new DeliveryCompanyDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columncompany_name = Columns["company_name"];
                columncompany_phones = Columns["company_phones"];
                columndescription = Columns["description"];
                columnrm_per_g = Columns["rm_per_g"];
                columnrm_per_cm3 = Columns["rm_per_cm3"];
                columngradient = Columns["gradient"];
                columnprefence_country = Columns["prefence_country"];
                columnoversea_support = Columns["oversea_support"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columncompany_name = new DataColumn("company_name", typeof(string), null, MappingType.Element);
                Columns.Add(columncompany_name);
                columncompany_phones = new DataColumn("company_phones", typeof(string), null, MappingType.Element);
                Columns.Add(columncompany_phones);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                columnrm_per_g = new DataColumn("rm_per_g", typeof(double), null, MappingType.Element);
                Columns.Add(columnrm_per_g);
                columnrm_per_cm3 = new DataColumn("rm_per_cm3", typeof(double), null, MappingType.Element);
                Columns.Add(columnrm_per_cm3);
                columngradient = new DataColumn("gradient", typeof(double), null, MappingType.Element);
                Columns.Add(columngradient);
                columnprefence_country = new DataColumn("prefence_country", typeof(string), null, MappingType.Element);
                Columns.Add(columnprefence_country);
                columnoversea_support = new DataColumn("oversea_support", typeof(bool), null, MappingType.Element);
                Columns.Add(columnoversea_support);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columncompany_name.MaxLength = 50;
                columncompany_phones.MaxLength = 50;
                columndescription.MaxLength = 200;
                columnrm_per_g.AllowDBNull = false;
                columnrm_per_cm3.AllowDBNull = false;
                columngradient.AllowDBNull = false;
                columnprefence_country.AllowDBNull = false;
                columnprefence_country.MaxLength = 50;
                columnoversea_support.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow NewDeliveryCompanyRow()
            {
                return (DeliveryCompanyRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DeliveryCompanyRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(DeliveryCompanyRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (DeliveryCompanyRowChanged is object)
                {
                    DeliveryCompanyRowChanged?.Invoke(this, new DeliveryCompanyRowChangeEvent((DeliveryCompanyRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (DeliveryCompanyRowChanging is object)
                {
                    DeliveryCompanyRowChanging?.Invoke(this, new DeliveryCompanyRowChangeEvent((DeliveryCompanyRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (DeliveryCompanyRowDeleted is object)
                {
                    DeliveryCompanyRowDeleted?.Invoke(this, new DeliveryCompanyRowChangeEvent((DeliveryCompanyRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (DeliveryCompanyRowDeleting is object)
                {
                    DeliveryCompanyRowDeleting?.Invoke(this, new DeliveryCompanyRowChangeEvent((DeliveryCompanyRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeliveryCompanyRow(DeliveryCompanyRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeliveryCompanyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class DeliveryStatusDataTable : TypedTableBase<DeliveryStatusRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusDataTable() : base()
            {
                TableName = "DeliveryStatus";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryStatusDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected DeliveryStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow this[int index]
            {
                get
                {
                    return (DeliveryStatusRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryStatusRowChangeEventHandler DeliveryStatusRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryStatusRowChangeEventHandler DeliveryStatusRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryStatusRowChangeEventHandler DeliveryStatusRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event DeliveryStatusRowChangeEventHandler DeliveryStatusRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddDeliveryStatusRow(DeliveryStatusRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow AddDeliveryStatusRow(Guid id, string name, string description)
            {
                DeliveryStatusRow rowDeliveryStatusRow = (DeliveryStatusRow)NewRow();
                var columnValuesArray = new object[] { id, name, description };
                rowDeliveryStatusRow.ItemArray = columnValuesArray;
                Rows.Add(rowDeliveryStatusRow);
                return rowDeliveryStatusRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow FindByid(Guid id)
            {
                return (DeliveryStatusRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                DeliveryStatusDataTable cln = (DeliveryStatusDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new DeliveryStatusDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow NewDeliveryStatusRow()
            {
                return (DeliveryStatusRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new DeliveryStatusRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(DeliveryStatusRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (DeliveryStatusRowChanged is object)
                {
                    DeliveryStatusRowChanged?.Invoke(this, new DeliveryStatusRowChangeEvent((DeliveryStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (DeliveryStatusRowChanging is object)
                {
                    DeliveryStatusRowChanging?.Invoke(this, new DeliveryStatusRowChangeEvent((DeliveryStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (DeliveryStatusRowDeleted is object)
                {
                    DeliveryStatusRowDeleted?.Invoke(this, new DeliveryStatusRowChangeEvent((DeliveryStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (DeliveryStatusRowDeleting is object)
                {
                    DeliveryStatusRowDeleting?.Invoke(this, new DeliveryStatusRowChangeEvent((DeliveryStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveDeliveryStatusRow(DeliveryStatusRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeliveryStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class FoodDataTable : TypedTableBase<FoodRow>
        {
            private DataColumn columnid;
            private DataColumn columnduty_staff_id;
            private DataColumn columnimage;
            private DataColumn columnprice;
            private DataColumn columnstock;
            private DataColumn columnadd_date;
            private DataColumn columntitle;
            private DataColumn columndescriptions;
            private DataColumn columnposcode;
            private DataColumn columncatergory_id;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodDataTable() : base()
            {
                TableName = "Food";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FoodDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected FoodDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn duty_staff_idColumn
            {
                get
                {
                    return columnduty_staff_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn imageColumn
            {
                get
                {
                    return columnimage;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn priceColumn
            {
                get
                {
                    return columnprice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn stockColumn
            {
                get
                {
                    return columnstock;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn add_dateColumn
            {
                get
                {
                    return columnadd_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn titleColumn
            {
                get
                {
                    return columntitle;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionsColumn
            {
                get
                {
                    return columndescriptions;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn poscodeColumn
            {
                get
                {
                    return columnposcode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn catergory_idColumn
            {
                get
                {
                    return columncatergory_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow this[int index]
            {
                get
                {
                    return (FoodRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FoodRowChangeEventHandler FoodRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FoodRowChangeEventHandler FoodRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FoodRowChangeEventHandler FoodRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event FoodRowChangeEventHandler FoodRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddFoodRow(FoodRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow AddFoodRow(UsersRow parentUsersRowByFK__Food__duty_staff__38996AB5, byte[] image, double price, int stock, DateTime add_date, string title, string descriptions, string poscode, CatergoryRow parentCatergoryRowByFK__Food__catergory___398D8EEE)
            {
                FoodRow rowFoodRow = (FoodRow)NewRow();
                var columnValuesArray = new object[] { null, null, image, price, stock, add_date, title, descriptions, poscode, null };
                if (parentUsersRowByFK__Food__duty_staff__38996AB5 is object)
                {
                    columnValuesArray[1] = parentUsersRowByFK__Food__duty_staff__38996AB5[0];
                }

                if (parentCatergoryRowByFK__Food__catergory___398D8EEE is object)
                {
                    columnValuesArray[9] = parentCatergoryRowByFK__Food__catergory___398D8EEE[0];
                }

                rowFoodRow.ItemArray = columnValuesArray;
                Rows.Add(rowFoodRow);
                return rowFoodRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow FindByid(int id)
            {
                return (FoodRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                FoodDataTable cln = (FoodDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new FoodDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnduty_staff_id = Columns["duty_staff_id"];
                columnimage = Columns["image"];
                columnprice = Columns["price"];
                columnstock = Columns["stock"];
                columnadd_date = Columns["add_date"];
                columntitle = Columns["title"];
                columndescriptions = Columns["descriptions"];
                columnposcode = Columns["poscode"];
                columncatergory_id = Columns["catergory_id"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnduty_staff_id = new DataColumn("duty_staff_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnduty_staff_id);
                columnimage = new DataColumn("image", typeof(byte[]), null, MappingType.Element);
                Columns.Add(columnimage);
                columnprice = new DataColumn("price", typeof(double), null, MappingType.Element);
                Columns.Add(columnprice);
                columnstock = new DataColumn("stock", typeof(int), null, MappingType.Element);
                Columns.Add(columnstock);
                columnadd_date = new DataColumn("add_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnadd_date);
                columntitle = new DataColumn("title", typeof(string), null, MappingType.Element);
                Columns.Add(columntitle);
                columndescriptions = new DataColumn("descriptions", typeof(string), null, MappingType.Element);
                Columns.Add(columndescriptions);
                columnposcode = new DataColumn("poscode", typeof(string), null, MappingType.Element);
                Columns.Add(columnposcode);
                columncatergory_id = new DataColumn("catergory_id", typeof(int), null, MappingType.Element);
                Columns.Add(columncatergory_id);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnduty_staff_id.AllowDBNull = false;
                columnprice.AllowDBNull = false;
                columnstock.AllowDBNull = false;
                columnadd_date.AllowDBNull = false;
                columntitle.AllowDBNull = false;
                columntitle.MaxLength = 50;
                columndescriptions.MaxLength = 200;
                columnposcode.MaxLength = 50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow NewFoodRow()
            {
                return (FoodRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new FoodRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(FoodRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (FoodRowChanged is object)
                {
                    FoodRowChanged?.Invoke(this, new FoodRowChangeEvent((FoodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (FoodRowChanging is object)
                {
                    FoodRowChanging?.Invoke(this, new FoodRowChangeEvent((FoodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (FoodRowDeleted is object)
                {
                    FoodRowDeleted?.Invoke(this, new FoodRowChangeEvent((FoodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (FoodRowDeleting is object)
                {
                    FoodRowDeleting?.Invoke(this, new FoodRowChangeEvent((FoodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveFoodRow(FoodRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FoodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class MembershipDataTable : TypedTableBase<MembershipRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipDataTable() : base()
            {
                TableName = "Membership";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MembershipDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MembershipDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow this[int index]
            {
                get
                {
                    return (MembershipRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MembershipRowChangeEventHandler MembershipRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MembershipRowChangeEventHandler MembershipRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MembershipRowChangeEventHandler MembershipRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MembershipRowChangeEventHandler MembershipRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMembershipRow(MembershipRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow AddMembershipRow(string name, string description)
            {
                MembershipRow rowMembershipRow = (MembershipRow)NewRow();
                var columnValuesArray = new object[] { null, name, description };
                rowMembershipRow.ItemArray = columnValuesArray;
                Rows.Add(rowMembershipRow);
                return rowMembershipRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow FindByid(int id)
            {
                return (MembershipRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                MembershipDataTable cln = (MembershipDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new MembershipDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow NewMembershipRow()
            {
                return (MembershipRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new MembershipRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(MembershipRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (MembershipRowChanged is object)
                {
                    MembershipRowChanged?.Invoke(this, new MembershipRowChangeEvent((MembershipRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (MembershipRowChanging is object)
                {
                    MembershipRowChanging?.Invoke(this, new MembershipRowChangeEvent((MembershipRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (MembershipRowDeleted is object)
                {
                    MembershipRowDeleted?.Invoke(this, new MembershipRowChangeEvent((MembershipRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (MembershipRowDeleting is object)
                {
                    MembershipRowDeleting?.Invoke(this, new MembershipRowChangeEvent((MembershipRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMembershipRow(MembershipRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembershipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class MenuDataTable : TypedTableBase<MenuRow>
        {
            private DataColumn columnid;
            private DataColumn columnstart_date;
            private DataColumn columnend_date;
            private DataColumn columntitle;
            private DataColumn columndescriptions;
            private DataColumn columnenabled;
            private DataColumn columnmenu_image;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuDataTable() : base()
            {
                TableName = "Menu";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MenuDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MenuDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn start_dateColumn
            {
                get
                {
                    return columnstart_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn end_dateColumn
            {
                get
                {
                    return columnend_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn titleColumn
            {
                get
                {
                    return columntitle;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionsColumn
            {
                get
                {
                    return columndescriptions;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn enabledColumn
            {
                get
                {
                    return columnenabled;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn menu_imageColumn
            {
                get
                {
                    return columnmenu_image;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow this[int index]
            {
                get
                {
                    return (MenuRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuRowChangeEventHandler MenuRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuRowChangeEventHandler MenuRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuRowChangeEventHandler MenuRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuRowChangeEventHandler MenuRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMenuRow(MenuRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow AddMenuRow(DateTime start_date, DateTime end_date, string title, string descriptions, bool enabled, byte[] menu_image)
            {
                MenuRow rowMenuRow = (MenuRow)NewRow();
                var columnValuesArray = new object[] { null, start_date, end_date, title, descriptions, enabled, menu_image };
                rowMenuRow.ItemArray = columnValuesArray;
                Rows.Add(rowMenuRow);
                return rowMenuRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow FindByid(int id)
            {
                return (MenuRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                MenuDataTable cln = (MenuDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new MenuDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnstart_date = Columns["start_date"];
                columnend_date = Columns["end_date"];
                columntitle = Columns["title"];
                columndescriptions = Columns["descriptions"];
                columnenabled = Columns["enabled"];
                columnmenu_image = Columns["menu_image"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnstart_date = new DataColumn("start_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnstart_date);
                columnend_date = new DataColumn("end_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnend_date);
                columntitle = new DataColumn("title", typeof(string), null, MappingType.Element);
                Columns.Add(columntitle);
                columndescriptions = new DataColumn("descriptions", typeof(string), null, MappingType.Element);
                Columns.Add(columndescriptions);
                columnenabled = new DataColumn("enabled", typeof(bool), null, MappingType.Element);
                Columns.Add(columnenabled);
                columnmenu_image = new DataColumn("menu_image", typeof(byte[]), null, MappingType.Element);
                Columns.Add(columnmenu_image);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnstart_date.AllowDBNull = false;
                columnend_date.AllowDBNull = false;
                columntitle.AllowDBNull = false;
                columntitle.MaxLength = 50;
                columndescriptions.MaxLength = 200;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow NewMenuRow()
            {
                return (MenuRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new MenuRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(MenuRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (MenuRowChanged is object)
                {
                    MenuRowChanged?.Invoke(this, new MenuRowChangeEvent((MenuRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (MenuRowChanging is object)
                {
                    MenuRowChanging?.Invoke(this, new MenuRowChangeEvent((MenuRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (MenuRowDeleted is object)
                {
                    MenuRowDeleted?.Invoke(this, new MenuRowChangeEvent((MenuRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (MenuRowDeleting is object)
                {
                    MenuRowDeleting?.Invoke(this, new MenuRowChangeEvent((MenuRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMenuRow(MenuRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MenuDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class MenuItemsDataTable : TypedTableBase<MenuItemsRow>
        {
            private DataColumn columnmenu_id;
            private DataColumn columnfood_id;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsDataTable() : base()
            {
                TableName = "MenuItems";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MenuItemsDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected MenuItemsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn menu_idColumn
            {
                get
                {
                    return columnmenu_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn food_idColumn
            {
                get
                {
                    return columnfood_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow this[int index]
            {
                get
                {
                    return (MenuItemsRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuItemsRowChangeEventHandler MenuItemsRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuItemsRowChangeEventHandler MenuItemsRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuItemsRowChangeEventHandler MenuItemsRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event MenuItemsRowChangeEventHandler MenuItemsRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddMenuItemsRow(MenuItemsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow AddMenuItemsRow(MenuRow parentMenuRowByFK__MenuItems__menu___778AC167, FoodRow parentFoodRowByFK__MenuItems__food___76969D2E)
            {
                MenuItemsRow rowMenuItemsRow = (MenuItemsRow)NewRow();
                var columnValuesArray = new object[] { null, null };
                if (parentMenuRowByFK__MenuItems__menu___778AC167 is object)
                {
                    columnValuesArray[0] = parentMenuRowByFK__MenuItems__menu___778AC167[0];
                }

                if (parentFoodRowByFK__MenuItems__food___76969D2E is object)
                {
                    columnValuesArray[1] = parentFoodRowByFK__MenuItems__food___76969D2E[0];
                }

                rowMenuItemsRow.ItemArray = columnValuesArray;
                Rows.Add(rowMenuItemsRow);
                return rowMenuItemsRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow FindBymenu_idfood_id(int menu_id, int food_id)
            {
                return (MenuItemsRow)Rows.Find(new object[] { menu_id, food_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                MenuItemsDataTable cln = (MenuItemsDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new MenuItemsDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnmenu_id = Columns["menu_id"];
                columnfood_id = Columns["food_id"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnmenu_id = new DataColumn("menu_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnmenu_id);
                columnfood_id = new DataColumn("food_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnfood_id);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnmenu_id, columnfood_id }, true));
                columnmenu_id.AllowDBNull = false;
                columnfood_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow NewMenuItemsRow()
            {
                return (MenuItemsRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new MenuItemsRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(MenuItemsRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (MenuItemsRowChanged is object)
                {
                    MenuItemsRowChanged?.Invoke(this, new MenuItemsRowChangeEvent((MenuItemsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (MenuItemsRowChanging is object)
                {
                    MenuItemsRowChanging?.Invoke(this, new MenuItemsRowChangeEvent((MenuItemsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (MenuItemsRowDeleted is object)
                {
                    MenuItemsRowDeleted?.Invoke(this, new MenuItemsRowChangeEvent((MenuItemsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (MenuItemsRowDeleting is object)
                {
                    MenuItemsRowDeleting?.Invoke(this, new MenuItemsRowChangeEvent((MenuItemsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveMenuItemsRow(MenuItemsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MenuItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class OrderDataTable : TypedTableBase<OrderRow>
        {
            private DataColumn columnid;
            private DataColumn columncustomer_id;
            private DataColumn columnorder_status;
            private DataColumn columndatetime;
            private DataColumn columncustomer_note;
            private DataColumn columnpayload;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDataTable() : base()
            {
                TableName = "Order";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal OrderDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected OrderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn customer_idColumn
            {
                get
                {
                    return columncustomer_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn order_statusColumn
            {
                get
                {
                    return columnorder_status;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn datetimeColumn
            {
                get
                {
                    return columndatetime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn customer_noteColumn
            {
                get
                {
                    return columncustomer_note;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payloadColumn
            {
                get
                {
                    return columnpayload;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow this[int index]
            {
                get
                {
                    return (OrderRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderRowChangeEventHandler OrderRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderRowChangeEventHandler OrderRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderRowChangeEventHandler OrderRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderRowChangeEventHandler OrderRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddOrderRow(OrderRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow AddOrderRow(UsersRow parentUsersRowByFK__Order__customer___44FF419A, string order_status, DateTime datetime, string customer_note, string payload)
            {
                OrderRow rowOrderRow = (OrderRow)NewRow();
                var columnValuesArray = new object[] { null, null, order_status, datetime, customer_note, payload };
                if (parentUsersRowByFK__Order__customer___44FF419A is object)
                {
                    columnValuesArray[1] = parentUsersRowByFK__Order__customer___44FF419A[0];
                }

                rowOrderRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrderRow);
                return rowOrderRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow FindByid(int id)
            {
                return (OrderRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                OrderDataTable cln = (OrderDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new OrderDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columncustomer_id = Columns["customer_id"];
                columnorder_status = Columns["order_status"];
                columndatetime = Columns["datetime"];
                columncustomer_note = Columns["customer_note"];
                columnpayload = Columns["payload"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columncustomer_id = new DataColumn("customer_id", typeof(int), null, MappingType.Element);
                Columns.Add(columncustomer_id);
                columnorder_status = new DataColumn("order_status", typeof(string), null, MappingType.Element);
                Columns.Add(columnorder_status);
                columndatetime = new DataColumn("datetime", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columndatetime);
                columncustomer_note = new DataColumn("customer_note", typeof(string), null, MappingType.Element);
                Columns.Add(columncustomer_note);
                columnpayload = new DataColumn("payload", typeof(string), null, MappingType.Element);
                Columns.Add(columnpayload);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columncustomer_id.AllowDBNull = false;
                columnorder_status.MaxLength = 1;
                columncustomer_note.MaxLength = 200;
                columnpayload.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow NewOrderRow()
            {
                return (OrderRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(OrderRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (OrderRowChanged is object)
                {
                    OrderRowChanged?.Invoke(this, new OrderRowChangeEvent((OrderRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (OrderRowChanging is object)
                {
                    OrderRowChanging?.Invoke(this, new OrderRowChangeEvent((OrderRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (OrderRowDeleted is object)
                {
                    OrderRowDeleted?.Invoke(this, new OrderRowChangeEvent((OrderRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (OrderRowDeleting is object)
                {
                    OrderRowDeleting?.Invoke(this, new OrderRowChangeEvent((OrderRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveOrderRow(OrderRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class OrderDetailsDataTable : TypedTableBase<OrderDetailsRow>
        {
            private DataColumn columnorder_id;
            private DataColumn columnfood_id;
            private DataColumn columnquantity;
            private DataColumn columnadd_datetime;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsDataTable() : base()
            {
                TableName = "OrderDetails";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal OrderDetailsDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected OrderDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn order_idColumn
            {
                get
                {
                    return columnorder_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn food_idColumn
            {
                get
                {
                    return columnfood_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn quantityColumn
            {
                get
                {
                    return columnquantity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn add_datetimeColumn
            {
                get
                {
                    return columnadd_datetime;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow this[int index]
            {
                get
                {
                    return (OrderDetailsRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderDetailsRowChangeEventHandler OrderDetailsRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderDetailsRowChangeEventHandler OrderDetailsRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderDetailsRowChangeEventHandler OrderDetailsRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event OrderDetailsRowChangeEventHandler OrderDetailsRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddOrderDetailsRow(OrderDetailsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow AddOrderDetailsRow(OrderRow parentOrderRowByFK__OrderDeta__order__47DBAE45, FoodRow parentFoodRowByFK__OrderDeta__food___48CFD27E, int quantity, DateTime add_datetime)
            {
                OrderDetailsRow rowOrderDetailsRow = (OrderDetailsRow)NewRow();
                var columnValuesArray = new object[] { null, null, quantity, add_datetime };
                if (parentOrderRowByFK__OrderDeta__order__47DBAE45 is object)
                {
                    columnValuesArray[0] = parentOrderRowByFK__OrderDeta__order__47DBAE45[0];
                }

                if (parentFoodRowByFK__OrderDeta__food___48CFD27E is object)
                {
                    columnValuesArray[1] = parentFoodRowByFK__OrderDeta__food___48CFD27E[0];
                }

                rowOrderDetailsRow.ItemArray = columnValuesArray;
                Rows.Add(rowOrderDetailsRow);
                return rowOrderDetailsRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow FindByorder_idfood_id(int order_id, int food_id)
            {
                return (OrderDetailsRow)Rows.Find(new object[] { order_id, food_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                OrderDetailsDataTable cln = (OrderDetailsDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new OrderDetailsDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnorder_id = Columns["order_id"];
                columnfood_id = Columns["food_id"];
                columnquantity = Columns["quantity"];
                columnadd_datetime = Columns["add_datetime"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnorder_id = new DataColumn("order_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnorder_id);
                columnfood_id = new DataColumn("food_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnfood_id);
                columnquantity = new DataColumn("quantity", typeof(int), null, MappingType.Element);
                Columns.Add(columnquantity);
                columnadd_datetime = new DataColumn("add_datetime", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnadd_datetime);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnorder_id, columnfood_id }, true));
                columnorder_id.AllowDBNull = false;
                columnfood_id.AllowDBNull = false;
                columnquantity.AllowDBNull = false;
                columnadd_datetime.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow NewOrderDetailsRow()
            {
                return (OrderDetailsRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new OrderDetailsRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(OrderDetailsRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (OrderDetailsRowChanged is object)
                {
                    OrderDetailsRowChanged?.Invoke(this, new OrderDetailsRowChangeEvent((OrderDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (OrderDetailsRowChanging is object)
                {
                    OrderDetailsRowChanging?.Invoke(this, new OrderDetailsRowChangeEvent((OrderDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (OrderDetailsRowDeleted is object)
                {
                    OrderDetailsRowDeleted?.Invoke(this, new OrderDetailsRowChangeEvent((OrderDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (OrderDetailsRowDeleting is object)
                {
                    OrderDetailsRowDeleting?.Invoke(this, new OrderDetailsRowChangeEvent((OrderDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveOrderDetailsRow(OrderDetailsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PaymentDataTable : TypedTableBase<PaymentRow>
        {
            private DataColumn columnid;
            private DataColumn columnpayment_method;
            private DataColumn columnpayment_status;
            private DataColumn columnuser_id;
            private DataColumn columntax_change;
            private DataColumn columnnet_pay;
            private DataColumn columndiscount;
            private DataColumn columntotal_pay;
            private DataColumn columncustomer_paid;
            private DataColumn columnpayment_date;
            private DataColumn columnpayment_meta;
            private DataColumn columnnotes;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDataTable() : base()
            {
                TableName = "Payment";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PaymentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payment_methodColumn
            {
                get
                {
                    return columnpayment_method;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payment_statusColumn
            {
                get
                {
                    return columnpayment_status;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn tax_changeColumn
            {
                get
                {
                    return columntax_change;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn net_payColumn
            {
                get
                {
                    return columnnet_pay;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn discountColumn
            {
                get
                {
                    return columndiscount;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn total_payColumn
            {
                get
                {
                    return columntotal_pay;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn customer_paidColumn
            {
                get
                {
                    return columncustomer_paid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payment_dateColumn
            {
                get
                {
                    return columnpayment_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payment_metaColumn
            {
                get
                {
                    return columnpayment_meta;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn notesColumn
            {
                get
                {
                    return columnnotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow this[int index]
            {
                get
                {
                    return (PaymentRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentRowChangeEventHandler PaymentRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentRowChangeEventHandler PaymentRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentRowChangeEventHandler PaymentRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentRowChangeEventHandler PaymentRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPaymentRow(PaymentRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow AddPaymentRow(Guid id, PaymentMethodRow parentPaymentMethodRowByFK__Payment__payment__52593CB8, PaymentStatusRow parentPaymentStatusRowByFK__Payment__payment__534D60F1, UsersRow parentUsersRowByFK__Payment__user_id__5441852A, double tax_change, double net_pay, double discount, double total_pay, double customer_paid, DateTime payment_date, string payment_meta, string notes)
            {
                PaymentRow rowPaymentRow = (PaymentRow)NewRow();
                var columnValuesArray = new object[] { id, null, null, null, tax_change, net_pay, discount, total_pay, customer_paid, payment_date, payment_meta, notes };
                if (parentPaymentMethodRowByFK__Payment__payment__52593CB8 is object)
                {
                    columnValuesArray[1] = parentPaymentMethodRowByFK__Payment__payment__52593CB8[0];
                }

                if (parentPaymentStatusRowByFK__Payment__payment__534D60F1 is object)
                {
                    columnValuesArray[2] = parentPaymentStatusRowByFK__Payment__payment__534D60F1[0];
                }

                if (parentUsersRowByFK__Payment__user_id__5441852A is object)
                {
                    columnValuesArray[3] = parentUsersRowByFK__Payment__user_id__5441852A[0];
                }

                rowPaymentRow.ItemArray = columnValuesArray;
                Rows.Add(rowPaymentRow);
                return rowPaymentRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow FindByid(Guid id)
            {
                return (PaymentRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                PaymentDataTable cln = (PaymentDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new PaymentDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnpayment_method = Columns["payment_method"];
                columnpayment_status = Columns["payment_status"];
                columnuser_id = Columns["user_id"];
                columntax_change = Columns["tax_change"];
                columnnet_pay = Columns["net_pay"];
                columndiscount = Columns["discount"];
                columntotal_pay = Columns["total_pay"];
                columncustomer_paid = Columns["customer_paid"];
                columnpayment_date = Columns["payment_date"];
                columnpayment_meta = Columns["payment_meta"];
                columnnotes = Columns["notes"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnpayment_method = new DataColumn("payment_method", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnpayment_method);
                columnpayment_status = new DataColumn("payment_status", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnpayment_status);
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                columntax_change = new DataColumn("tax_change", typeof(double), null, MappingType.Element);
                Columns.Add(columntax_change);
                columnnet_pay = new DataColumn("net_pay", typeof(double), null, MappingType.Element);
                Columns.Add(columnnet_pay);
                columndiscount = new DataColumn("discount", typeof(double), null, MappingType.Element);
                Columns.Add(columndiscount);
                columntotal_pay = new DataColumn("total_pay", typeof(double), null, MappingType.Element);
                Columns.Add(columntotal_pay);
                columncustomer_paid = new DataColumn("customer_paid", typeof(double), null, MappingType.Element);
                Columns.Add(columncustomer_paid);
                columnpayment_date = new DataColumn("payment_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnpayment_date);
                columnpayment_meta = new DataColumn("payment_meta", typeof(string), null, MappingType.Element);
                Columns.Add(columnpayment_meta);
                columnnotes = new DataColumn("notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnnotes);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnpayment_method.AllowDBNull = false;
                columnpayment_status.AllowDBNull = false;
                columnuser_id.AllowDBNull = false;
                columnpayment_meta.AllowDBNull = false;
                columnpayment_meta.MaxLength = 2147483647;
                columnnotes.AllowDBNull = false;
                columnnotes.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow NewPaymentRow()
            {
                return (PaymentRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PaymentRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(PaymentRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (PaymentRowChanged is object)
                {
                    PaymentRowChanged?.Invoke(this, new PaymentRowChangeEvent((PaymentRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (PaymentRowChanging is object)
                {
                    PaymentRowChanging?.Invoke(this, new PaymentRowChangeEvent((PaymentRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (PaymentRowDeleted is object)
                {
                    PaymentRowDeleted?.Invoke(this, new PaymentRowChangeEvent((PaymentRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (PaymentRowDeleting is object)
                {
                    PaymentRowDeleting?.Invoke(this, new PaymentRowChangeEvent((PaymentRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePaymentRow(PaymentRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PaymentDetailsDataTable : TypedTableBase<PaymentDetailsRow>
        {
            private DataColumn columnpayment_id;
            private DataColumn columnfood_id;
            private DataColumn columnquantity;
            private DataColumn columnadd_date;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsDataTable() : base()
            {
                TableName = "PaymentDetails";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentDetailsDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PaymentDetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn payment_idColumn
            {
                get
                {
                    return columnpayment_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn food_idColumn
            {
                get
                {
                    return columnfood_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn quantityColumn
            {
                get
                {
                    return columnquantity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn add_dateColumn
            {
                get
                {
                    return columnadd_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow this[int index]
            {
                get
                {
                    return (PaymentDetailsRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentDetailsRowChangeEventHandler PaymentDetailsRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentDetailsRowChangeEventHandler PaymentDetailsRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentDetailsRowChangeEventHandler PaymentDetailsRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentDetailsRowChangeEventHandler PaymentDetailsRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPaymentDetailsRow(PaymentDetailsRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow AddPaymentDetailsRow(PaymentRow parentPaymentRowByFK__PaymentDe__payme__571DF1D5, FoodRow parentFoodRowByFK__PaymentDe__food___5812160E, int quantity, DateTime add_date)
            {
                PaymentDetailsRow rowPaymentDetailsRow = (PaymentDetailsRow)NewRow();
                var columnValuesArray = new object[] { null, null, quantity, add_date };
                if (parentPaymentRowByFK__PaymentDe__payme__571DF1D5 is object)
                {
                    columnValuesArray[0] = parentPaymentRowByFK__PaymentDe__payme__571DF1D5[0];
                }

                if (parentFoodRowByFK__PaymentDe__food___5812160E is object)
                {
                    columnValuesArray[1] = parentFoodRowByFK__PaymentDe__food___5812160E[0];
                }

                rowPaymentDetailsRow.ItemArray = columnValuesArray;
                Rows.Add(rowPaymentDetailsRow);
                return rowPaymentDetailsRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow FindBypayment_idfood_id(Guid payment_id, int food_id)
            {
                return (PaymentDetailsRow)Rows.Find(new object[] { payment_id, food_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                PaymentDetailsDataTable cln = (PaymentDetailsDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new PaymentDetailsDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnpayment_id = Columns["payment_id"];
                columnfood_id = Columns["food_id"];
                columnquantity = Columns["quantity"];
                columnadd_date = Columns["add_date"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnpayment_id = new DataColumn("payment_id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnpayment_id);
                columnfood_id = new DataColumn("food_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnfood_id);
                columnquantity = new DataColumn("quantity", typeof(int), null, MappingType.Element);
                Columns.Add(columnquantity);
                columnadd_date = new DataColumn("add_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnadd_date);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnpayment_id, columnfood_id }, true));
                columnpayment_id.AllowDBNull = false;
                columnfood_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow NewPaymentDetailsRow()
            {
                return (PaymentDetailsRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PaymentDetailsRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(PaymentDetailsRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (PaymentDetailsRowChanged is object)
                {
                    PaymentDetailsRowChanged?.Invoke(this, new PaymentDetailsRowChangeEvent((PaymentDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (PaymentDetailsRowChanging is object)
                {
                    PaymentDetailsRowChanging?.Invoke(this, new PaymentDetailsRowChangeEvent((PaymentDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (PaymentDetailsRowDeleted is object)
                {
                    PaymentDetailsRowDeleted?.Invoke(this, new PaymentDetailsRowChangeEvent((PaymentDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (PaymentDetailsRowDeleting is object)
                {
                    PaymentDetailsRowDeleting?.Invoke(this, new PaymentDetailsRowChangeEvent((PaymentDetailsRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePaymentDetailsRow(PaymentDetailsRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PaymentMethodDataTable : TypedTableBase<PaymentMethodRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;
            private DataColumn columnmeta_field;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodDataTable() : base()
            {
                TableName = "PaymentMethod";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentMethodDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PaymentMethodDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn meta_fieldColumn
            {
                get
                {
                    return columnmeta_field;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow this[int index]
            {
                get
                {
                    return (PaymentMethodRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentMethodRowChangeEventHandler PaymentMethodRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentMethodRowChangeEventHandler PaymentMethodRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentMethodRowChangeEventHandler PaymentMethodRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentMethodRowChangeEventHandler PaymentMethodRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPaymentMethodRow(PaymentMethodRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow AddPaymentMethodRow(Guid id, string name, string description, string meta_field)
            {
                PaymentMethodRow rowPaymentMethodRow = (PaymentMethodRow)NewRow();
                var columnValuesArray = new object[] { id, name, description, meta_field };
                rowPaymentMethodRow.ItemArray = columnValuesArray;
                Rows.Add(rowPaymentMethodRow);
                return rowPaymentMethodRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow FindByid(Guid id)
            {
                return (PaymentMethodRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                PaymentMethodDataTable cln = (PaymentMethodDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new PaymentMethodDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
                columnmeta_field = Columns["meta_field"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                columnmeta_field = new DataColumn("meta_field", typeof(string), null, MappingType.Element);
                Columns.Add(columnmeta_field);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
                columnmeta_field.AllowDBNull = false;
                columnmeta_field.MaxLength = 2147483647;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow NewPaymentMethodRow()
            {
                return (PaymentMethodRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PaymentMethodRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(PaymentMethodRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (PaymentMethodRowChanged is object)
                {
                    PaymentMethodRowChanged?.Invoke(this, new PaymentMethodRowChangeEvent((PaymentMethodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (PaymentMethodRowChanging is object)
                {
                    PaymentMethodRowChanging?.Invoke(this, new PaymentMethodRowChangeEvent((PaymentMethodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (PaymentMethodRowDeleted is object)
                {
                    PaymentMethodRowDeleted?.Invoke(this, new PaymentMethodRowChangeEvent((PaymentMethodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (PaymentMethodRowDeleting is object)
                {
                    PaymentMethodRowDeleting?.Invoke(this, new PaymentMethodRowChangeEvent((PaymentMethodRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePaymentMethodRow(PaymentMethodRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentMethodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PaymentStatusDataTable : TypedTableBase<PaymentStatusRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusDataTable() : base()
            {
                TableName = "PaymentStatus";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentStatusDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PaymentStatusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow this[int index]
            {
                get
                {
                    return (PaymentStatusRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentStatusRowChangeEventHandler PaymentStatusRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentStatusRowChangeEventHandler PaymentStatusRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentStatusRowChangeEventHandler PaymentStatusRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PaymentStatusRowChangeEventHandler PaymentStatusRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPaymentStatusRow(PaymentStatusRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow AddPaymentStatusRow(Guid id, string name, string description)
            {
                PaymentStatusRow rowPaymentStatusRow = (PaymentStatusRow)NewRow();
                var columnValuesArray = new object[] { id, name, description };
                rowPaymentStatusRow.ItemArray = columnValuesArray;
                Rows.Add(rowPaymentStatusRow);
                return rowPaymentStatusRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow FindByid(Guid id)
            {
                return (PaymentStatusRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                PaymentStatusDataTable cln = (PaymentStatusDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new PaymentStatusDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AllowDBNull = false;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow NewPaymentStatusRow()
            {
                return (PaymentStatusRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PaymentStatusRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(PaymentStatusRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (PaymentStatusRowChanged is object)
                {
                    PaymentStatusRowChanged?.Invoke(this, new PaymentStatusRowChangeEvent((PaymentStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (PaymentStatusRowChanging is object)
                {
                    PaymentStatusRowChanging?.Invoke(this, new PaymentStatusRowChangeEvent((PaymentStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (PaymentStatusRowDeleted is object)
                {
                    PaymentStatusRowDeleted?.Invoke(this, new PaymentStatusRowChangeEvent((PaymentStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (PaymentStatusRowDeleting is object)
                {
                    PaymentStatusRowDeleting?.Invoke(this, new PaymentStatusRowChangeEvent((PaymentStatusRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePaymentStatusRow(PaymentStatusRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class PositionDataTable : TypedTableBase<PositionRow>
        {
            private DataColumn columnid;
            private DataColumn columnname;
            private DataColumn columndescription;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionDataTable() : base()
            {
                TableName = "Position";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PositionDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected PositionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn nameColumn
            {
                get
                {
                    return columnname;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn descriptionColumn
            {
                get
                {
                    return columndescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow this[int index]
            {
                get
                {
                    return (PositionRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PositionRowChangeEventHandler PositionRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PositionRowChangeEventHandler PositionRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PositionRowChangeEventHandler PositionRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event PositionRowChangeEventHandler PositionRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddPositionRow(PositionRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow AddPositionRow(string name, string description)
            {
                PositionRow rowPositionRow = (PositionRow)NewRow();
                var columnValuesArray = new object[] { null, name, description };
                rowPositionRow.ItemArray = columnValuesArray;
                Rows.Add(rowPositionRow);
                return rowPositionRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow FindByid(int id)
            {
                return (PositionRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                PositionDataTable cln = (PositionDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new PositionDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnname = Columns["name"];
                columndescription = Columns["description"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnname = new DataColumn("name", typeof(string), null, MappingType.Element);
                Columns.Add(columnname);
                columndescription = new DataColumn("description", typeof(string), null, MappingType.Element);
                Columns.Add(columndescription);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnname.AllowDBNull = false;
                columnname.MaxLength = 50;
                columndescription.AllowDBNull = false;
                columndescription.MaxLength = 100;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow NewPositionRow()
            {
                return (PositionRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new PositionRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(PositionRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (PositionRowChanged is object)
                {
                    PositionRowChanged?.Invoke(this, new PositionRowChangeEvent((PositionRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (PositionRowChanging is object)
                {
                    PositionRowChanging?.Invoke(this, new PositionRowChangeEvent((PositionRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (PositionRowDeleted is object)
                {
                    PositionRowDeleted?.Invoke(this, new PositionRowChangeEvent((PositionRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (PositionRowDeleting is object)
                {
                    PositionRowDeleting?.Invoke(this, new PositionRowChangeEvent((PositionRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemovePositionRow(PositionRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PositionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ResetPasswordTokenDataTable : TypedTableBase<ResetPasswordTokenRow>
        {
            private DataColumn columnid;
            private DataColumn columnkey;
            private DataColumn columnexp_date;
            private DataColumn columnuser_id;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenDataTable() : base()
            {
                TableName = "ResetPasswordToken";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ResetPasswordTokenDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected ResetPasswordTokenDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn idColumn
            {
                get
                {
                    return columnid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn keyColumn
            {
                get
                {
                    return columnkey;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn exp_dateColumn
            {
                get
                {
                    return columnexp_date;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow this[int index]
            {
                get
                {
                    return (ResetPasswordTokenRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ResetPasswordTokenRowChangeEventHandler ResetPasswordTokenRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ResetPasswordTokenRowChangeEventHandler ResetPasswordTokenRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ResetPasswordTokenRowChangeEventHandler ResetPasswordTokenRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event ResetPasswordTokenRowChangeEventHandler ResetPasswordTokenRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddResetPasswordTokenRow(ResetPasswordTokenRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow AddResetPasswordTokenRow(string key, DateTime exp_date, UsersRow parentUsersRowByFK__ResetPass__user___35BCFE0A)
            {
                ResetPasswordTokenRow rowResetPasswordTokenRow = (ResetPasswordTokenRow)NewRow();
                var columnValuesArray = new object[] { null, key, exp_date, null };
                if (parentUsersRowByFK__ResetPass__user___35BCFE0A is object)
                {
                    columnValuesArray[3] = parentUsersRowByFK__ResetPass__user___35BCFE0A[0];
                }

                rowResetPasswordTokenRow.ItemArray = columnValuesArray;
                Rows.Add(rowResetPasswordTokenRow);
                return rowResetPasswordTokenRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow FindByid(int id)
            {
                return (ResetPasswordTokenRow)Rows.Find(new object[] { id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                ResetPasswordTokenDataTable cln = (ResetPasswordTokenDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new ResetPasswordTokenDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnid = Columns["id"];
                columnkey = Columns["key"];
                columnexp_date = Columns["exp_date"];
                columnuser_id = Columns["user_id"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnid = new DataColumn("id", typeof(int), null, MappingType.Element);
                Columns.Add(columnid);
                columnkey = new DataColumn("key", typeof(string), null, MappingType.Element);
                Columns.Add(columnkey);
                columnexp_date = new DataColumn("exp_date", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnexp_date);
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnid }, true));
                columnid.AutoIncrement = true;
                columnid.AutoIncrementSeed = -1;
                columnid.AutoIncrementStep = -1;
                columnid.AllowDBNull = false;
                columnid.ReadOnly = true;
                columnid.Unique = true;
                columnkey.MaxLength = 100;
                columnuser_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow NewResetPasswordTokenRow()
            {
                return (ResetPasswordTokenRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ResetPasswordTokenRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(ResetPasswordTokenRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ResetPasswordTokenRowChanged is object)
                {
                    ResetPasswordTokenRowChanged?.Invoke(this, new ResetPasswordTokenRowChangeEvent((ResetPasswordTokenRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ResetPasswordTokenRowChanging is object)
                {
                    ResetPasswordTokenRowChanging?.Invoke(this, new ResetPasswordTokenRowChangeEvent((ResetPasswordTokenRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ResetPasswordTokenRowDeleted is object)
                {
                    ResetPasswordTokenRowDeleted?.Invoke(this, new ResetPasswordTokenRowChangeEvent((ResetPasswordTokenRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ResetPasswordTokenRowDeleting is object)
                {
                    ResetPasswordTokenRowDeleting?.Invoke(this, new ResetPasswordTokenRowChangeEvent((ResetPasswordTokenRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveResetPasswordTokenRow(ResetPasswordTokenRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResetPasswordTokenDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class StaffDataTable : TypedTableBase<StaffRow>
        {
            private DataColumn columnuser_id;
            private DataColumn columnpriority;
            private DataColumn columnposition_id;
            private DataColumn columnsalary;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffDataTable() : base()
            {
                TableName = "Staff";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal StaffDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected StaffDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn priorityColumn
            {
                get
                {
                    return columnpriority;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn position_idColumn
            {
                get
                {
                    return columnposition_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn salaryColumn
            {
                get
                {
                    return columnsalary;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow this[int index]
            {
                get
                {
                    return (StaffRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event StaffRowChangeEventHandler StaffRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event StaffRowChangeEventHandler StaffRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event StaffRowChangeEventHandler StaffRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event StaffRowChangeEventHandler StaffRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddStaffRow(StaffRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow AddStaffRow(UsersRow parentUsersRowByFK__Staff__user_id__2B3F6F97, int priority, PositionRow parentPositionRowByFK__Staff__position___2C3393D0, double salary)
            {
                StaffRow rowStaffRow = (StaffRow)NewRow();
                var columnValuesArray = new object[] { null, priority, null, salary };
                if (parentUsersRowByFK__Staff__user_id__2B3F6F97 is object)
                {
                    columnValuesArray[0] = parentUsersRowByFK__Staff__user_id__2B3F6F97[0];
                }

                if (parentPositionRowByFK__Staff__position___2C3393D0 is object)
                {
                    columnValuesArray[2] = parentPositionRowByFK__Staff__position___2C3393D0[0];
                }

                rowStaffRow.ItemArray = columnValuesArray;
                Rows.Add(rowStaffRow);
                return rowStaffRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow FindByuser_id(int user_id)
            {
                return (StaffRow)Rows.Find(new object[] { user_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                StaffDataTable cln = (StaffDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new StaffDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnuser_id = Columns["user_id"];
                columnpriority = Columns["priority"];
                columnposition_id = Columns["position_id"];
                columnsalary = Columns["salary"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                columnpriority = new DataColumn("priority", typeof(int), null, MappingType.Element);
                Columns.Add(columnpriority);
                columnposition_id = new DataColumn("position_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnposition_id);
                columnsalary = new DataColumn("salary", typeof(double), null, MappingType.Element);
                Columns.Add(columnsalary);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnuser_id }, true));
                columnuser_id.AllowDBNull = false;
                columnuser_id.Unique = true;
                columnpriority.AllowDBNull = false;
                columnposition_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow NewStaffRow()
            {
                return (StaffRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new StaffRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(StaffRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (StaffRowChanged is object)
                {
                    StaffRowChanged?.Invoke(this, new StaffRowChangeEvent((StaffRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (StaffRowChanging is object)
                {
                    StaffRowChanging?.Invoke(this, new StaffRowChangeEvent((StaffRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (StaffRowDeleted is object)
                {
                    StaffRowDeleted?.Invoke(this, new StaffRowChangeEvent((StaffRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (StaffRowDeleting is object)
                {
                    StaffRowDeleting?.Invoke(this, new StaffRowChangeEvent((StaffRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveStaffRow(StaffRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StaffDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class UserAddressDataTable : TypedTableBase<UserAddressRow>
        {
            private DataColumn columnuser_id;
            private DataColumn columnaddress_id;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressDataTable() : base()
            {
                TableName = "UserAddress";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserAddressDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected UserAddressDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn user_idColumn
            {
                get
                {
                    return columnuser_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataColumn address_idColumn
            {
                get
                {
                    return columnaddress_id;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow this[int index]
            {
                get
                {
                    return (UserAddressRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserAddressRowChangeEventHandler UserAddressRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserAddressRowChangeEventHandler UserAddressRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserAddressRowChangeEventHandler UserAddressRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public event UserAddressRowChangeEventHandler UserAddressRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void AddUserAddressRow(UserAddressRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow AddUserAddressRow(UsersRow parentUsersRowByFK__UserAddre__user___6383C8BA, AddressRow parentAddressRowByFK__UserAddre__addre__6477ECF3)
            {
                UserAddressRow rowUserAddressRow = (UserAddressRow)NewRow();
                var columnValuesArray = new object[] { null, null };
                if (parentUsersRowByFK__UserAddre__user___6383C8BA is object)
                {
                    columnValuesArray[0] = parentUsersRowByFK__UserAddre__user___6383C8BA[0];
                }

                if (parentAddressRowByFK__UserAddre__addre__6477ECF3 is object)
                {
                    columnValuesArray[1] = parentAddressRowByFK__UserAddre__addre__6477ECF3[0];
                }

                rowUserAddressRow.ItemArray = columnValuesArray;
                Rows.Add(rowUserAddressRow);
                return rowUserAddressRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow FindByuser_idaddress_id(int user_id, Guid address_id)
            {
                return (UserAddressRow)Rows.Find(new object[] { user_id, address_id });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public override DataTable Clone()
            {
                UserAddressDataTable cln = (UserAddressDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new UserAddressDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal void InitVars()
            {
                columnuser_id = Columns["user_id"];
                columnaddress_id = Columns["address_id"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitClass()
            {
                columnuser_id = new DataColumn("user_id", typeof(int), null, MappingType.Element);
                Columns.Add(columnuser_id);
                columnaddress_id = new DataColumn("address_id", typeof(Guid), null, MappingType.Element);
                Columns.Add(columnaddress_id);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnuser_id, columnaddress_id }, true));
                columnuser_id.AllowDBNull = false;
                columnaddress_id.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow NewUserAddressRow()
            {
                return (UserAddressRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new UserAddressRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(UserAddressRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (UserAddressRowChanged is object)
                {
                    UserAddressRowChanged?.Invoke(this, new UserAddressRowChangeEvent((UserAddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (UserAddressRowChanging is object)
                {
                    UserAddressRowChanging?.Invoke(this, new UserAddressRowChangeEvent((UserAddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (UserAddressRowDeleted is object)
                {
                    UserAddressRowDeleted?.Invoke(this, new UserAddressRowChangeEvent((UserAddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (UserAddressRowDeleting is object)
                {
                    UserAddressRowDeleting?.Invoke(this, new UserAddressRowChangeEvent((UserAddressRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void RemoveUserAddressRow(UserAddressRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new FoodShopDataSet();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserAddressDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class AddressRow : DataRow
        {
            private AddressDataTable tableAddress;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal AddressRow(DataRowBuilder rb) : base(rb)
            {
                tableAddress = (AddressDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tableAddress.idColumn];
                }

                set
                {
                    this[tableAddress.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double latitude
            {
                get
                {
                    return Conversions.ToDouble(this[tableAddress.latitudeColumn]);
                }

                set
                {
                    this[tableAddress.latitudeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double longitude
            {
                get
                {
                    return Conversions.ToDouble(this[tableAddress.longitudeColumn]);
                }

                set
                {
                    this[tableAddress.longitudeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string details
            {
                get
                {
                    return Conversions.ToString(this[tableAddress.detailsColumn]);
                }

                set
                {
                    this[tableAddress.detailsColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string street
            {
                get
                {
                    return Conversions.ToString(this[tableAddress.streetColumn]);
                }

                set
                {
                    this[tableAddress.streetColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string city
            {
                get
                {
                    return Conversions.ToString(this[tableAddress.cityColumn]);
                }

                set
                {
                    this[tableAddress.cityColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string state
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableAddress.stateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'state' in table 'Address' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableAddress.stateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string poscode
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableAddress.poscodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'poscode' in table 'Address' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableAddress.poscodeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string country
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableAddress.countryColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'country' in table 'Address' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableAddress.countryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsstateNull()
            {
                return IsNull(tableAddress.stateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetstateNull()
            {
                this[tableAddress.stateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsposcodeNull()
            {
                return IsNull(tableAddress.poscodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetposcodeNull()
            {
                this[tableAddress.poscodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IscountryNull()
            {
                return IsNull(tableAddress.countryColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetcountryNull()
            {
                this[tableAddress.countryColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow[] GetDeliveryRowsByFK__Delivery__destin__693CA210()
            {
                if (Table.ChildRelations["FK__Delivery__destin__693CA210"] is null)
                {
                    return new DeliveryRow[0];
                }
                else
                {
                    return (DeliveryRow[])GetChildRows(Table.ChildRelations["FK__Delivery__destin__693CA210"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow[] GetDeliveryRowsByFK__Delivery__source__68487DD7()
            {
                if (Table.ChildRelations["FK__Delivery__source__68487DD7"] is null)
                {
                    return new DeliveryRow[0];
                }
                else
                {
                    return (DeliveryRow[])GetChildRows(Table.ChildRelations["FK__Delivery__source__68487DD7"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow[] GetDeliveryChainRows()
            {
                if (Table.ChildRelations["FK__DeliveryC__addre__6EF57B66"] is null)
                {
                    return new DeliveryChainRow[0];
                }
                else
                {
                    return (DeliveryChainRow[])GetChildRows(Table.ChildRelations["FK__DeliveryC__addre__6EF57B66"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow[] GetUserAddressRows()
            {
                if (Table.ChildRelations["FK__UserAddre__addre__6477ECF3"] is null)
                {
                    return new UserAddressRow[0];
                }
                else
                {
                    return (UserAddressRow[])GetChildRows(Table.ChildRelations["FK__UserAddre__addre__6477ECF3"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class UsersRow : DataRow
        {
            private UsersDataTable tableUsers;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UsersRow(DataRowBuilder rb) : base(rb)
            {
                tableUsers = (UsersDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableUsers.user_idColumn]);
                }

                set
                {
                    this[tableUsers.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_email
            {
                get
                {
                    return Conversions.ToString(this[tableUsers.user_emailColumn]);
                }

                set
                {
                    this[tableUsers.user_emailColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string username
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.usernameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'username' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.usernameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string last_name
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.last_nameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'last_name' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.last_nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string first_name
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.first_nameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'first_name' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.first_nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string user_role
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.user_roleColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'user_role' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.user_roleColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string phone_num
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.phone_numColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'phone_num' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.phone_numColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string gender
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableUsers.genderColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'gender' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.genderColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public byte[] picture
            {
                get
                {
                    try
                    {
                        return (byte[])this[tableUsers.pictureColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'picture' in table 'Users' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableUsers.pictureColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string password
            {
                get
                {
                    return Conversions.ToString(this[tableUsers.passwordColumn]);
                }

                set
                {
                    this[tableUsers.passwordColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsusernameNull()
            {
                return IsNull(tableUsers.usernameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetusernameNull()
            {
                this[tableUsers.usernameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Islast_nameNull()
            {
                return IsNull(tableUsers.last_nameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setlast_nameNull()
            {
                this[tableUsers.last_nameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isfirst_nameNull()
            {
                return IsNull(tableUsers.first_nameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setfirst_nameNull()
            {
                this[tableUsers.first_nameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isuser_roleNull()
            {
                return IsNull(tableUsers.user_roleColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setuser_roleNull()
            {
                this[tableUsers.user_roleColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isphone_numNull()
            {
                return IsNull(tableUsers.phone_numColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setphone_numNull()
            {
                this[tableUsers.phone_numColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsgenderNull()
            {
                return IsNull(tableUsers.genderColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetgenderNull()
            {
                this[tableUsers.genderColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspictureNull()
            {
                return IsNull(tableUsers.pictureColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpictureNull()
            {
                this[tableUsers.pictureColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow[] GetCartRows()
            {
                if (Table.ChildRelations["FK__Cart__customer_i__3E52440B"] is null)
                {
                    return new CartRow[0];
                }
                else
                {
                    return (CartRow[])GetChildRows(Table.ChildRelations["FK__Cart__customer_i__3E52440B"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow[] GetCustomerRows()
            {
                if (Table.ChildRelations["FK__Customer__user_i__2F10007B"] is null)
                {
                    return new CustomerRow[0];
                }
                else
                {
                    return (CustomerRow[])GetChildRows(Table.ChildRelations["FK__Customer__user_i__2F10007B"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow[] GetFoodRows()
            {
                if (Table.ChildRelations["FK__Food__duty_staff__38996AB5"] is null)
                {
                    return new FoodRow[0];
                }
                else
                {
                    return (FoodRow[])GetChildRows(Table.ChildRelations["FK__Food__duty_staff__38996AB5"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow[] GetOrderRows()
            {
                if (Table.ChildRelations["FK__Order__customer___44FF419A"] is null)
                {
                    return new OrderRow[0];
                }
                else
                {
                    return (OrderRow[])GetChildRows(Table.ChildRelations["FK__Order__customer___44FF419A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow[] GetPaymentRows()
            {
                if (Table.ChildRelations["FK__Payment__user_id__5441852A"] is null)
                {
                    return new PaymentRow[0];
                }
                else
                {
                    return (PaymentRow[])GetChildRows(Table.ChildRelations["FK__Payment__user_id__5441852A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow[] GetResetPasswordTokenRows()
            {
                if (Table.ChildRelations["FK__ResetPass__user___35BCFE0A"] is null)
                {
                    return new ResetPasswordTokenRow[0];
                }
                else
                {
                    return (ResetPasswordTokenRow[])GetChildRows(Table.ChildRelations["FK__ResetPass__user___35BCFE0A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow[] GetStaffRows()
            {
                if (Table.ChildRelations["FK__Staff__user_id__2B3F6F97"] is null)
                {
                    return new StaffRow[0];
                }
                else
                {
                    return (StaffRow[])GetChildRows(Table.ChildRelations["FK__Staff__user_id__2B3F6F97"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow[] GetUserAddressRows()
            {
                if (Table.ChildRelations["FK__UserAddre__user___6383C8BA"] is null)
                {
                    return new UserAddressRow[0];
                }
                else
                {
                    return (UserAddressRow[])GetChildRows(Table.ChildRelations["FK__UserAddre__user___6383C8BA"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class CartRow : DataRow
        {
            private CartDataTable tableCart;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CartRow(DataRowBuilder rb) : base(rb)
            {
                tableCart = (CartDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCart.idColumn]);
                }

                set
                {
                    this[tableCart.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int customer_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCart.customer_idColumn]);
                }

                set
                {
                    this[tableCart.customer_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string remark
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableCart.remarkColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'remark' in table 'Cart' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableCart.remarkColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Cart__customer_i__3E52440B"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Cart__customer_i__3E52440B"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsremarkNull()
            {
                return IsNull(tableCart.remarkColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetremarkNull()
            {
                this[tableCart.remarkColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow[] GetCartDetailsRows()
            {
                if (Table.ChildRelations["FK__CartDetai__cart___412EB0B6"] is null)
                {
                    return new CartDetailsRow[0];
                }
                else
                {
                    return (CartDetailsRow[])GetChildRows(Table.ChildRelations["FK__CartDetai__cart___412EB0B6"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class CartDetailsRow : DataRow
        {
            private CartDetailsDataTable tableCartDetails;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CartDetailsRow(DataRowBuilder rb) : base(rb)
            {
                tableCartDetails = (CartDetailsDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int cart_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCartDetails.cart_idColumn]);
                }

                set
                {
                    this[tableCartDetails.cart_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int food_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCartDetails.food_idColumn]);
                }

                set
                {
                    this[tableCartDetails.food_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int quantity
            {
                get
                {
                    return Conversions.ToInteger(this[tableCartDetails.quantityColumn]);
                }

                set
                {
                    this[tableCartDetails.quantityColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime add_datetime
            {
                get
                {
                    return Conversions.ToDate(this[tableCartDetails.add_datetimeColumn]);
                }

                set
                {
                    this[tableCartDetails.add_datetimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow CartRow
            {
                get
                {
                    return (CartRow)GetParentRow(Table.ParentRelations["FK__CartDetai__cart___412EB0B6"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__CartDetai__cart___412EB0B6"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow FoodRow
            {
                get
                {
                    return (FoodRow)GetParentRow(Table.ParentRelations["FK__CartDetai__food___4222D4EF"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__CartDetai__food___4222D4EF"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class CatergoryRow : DataRow
        {
            private CatergoryDataTable tableCatergory;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CatergoryRow(DataRowBuilder rb) : base(rb)
            {
                tableCatergory = (CatergoryDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCatergory.idColumn]);
                }

                set
                {
                    this[tableCatergory.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tableCatergory.nameColumn]);
                }

                set
                {
                    this[tableCatergory.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tableCatergory.descriptionColumn]);
                }

                set
                {
                    this[tableCatergory.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow[] GetFoodRows()
            {
                if (Table.ChildRelations["FK__Food__catergory___398D8EEE"] is null)
                {
                    return new FoodRow[0];
                }
                else
                {
                    return (FoodRow[])GetChildRows(Table.ChildRelations["FK__Food__catergory___398D8EEE"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class CustomerRow : DataRow
        {
            private CustomerDataTable tableCustomer;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal CustomerRow(DataRowBuilder rb) : base(rb)
            {
                tableCustomer = (CustomerDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer.user_idColumn]);
                }

                set
                {
                    this[tableCustomer.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime birthday_date
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tableCustomer.birthday_dateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'birthday_date' in table 'Customer' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableCustomer.birthday_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int membership_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableCustomer.membership_idColumn]);
                }

                set
                {
                    this[tableCustomer.membership_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double wallate_amount
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tableCustomer.wallate_amountColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'wallate_amount' in table 'Customer' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableCustomer.wallate_amountColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow MembershipRow
            {
                get
                {
                    return (MembershipRow)GetParentRow(Table.ParentRelations["FK__Customer__member__300424B4"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Customer__member__300424B4"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Customer__user_i__2F10007B"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Customer__user_i__2F10007B"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isbirthday_dateNull()
            {
                return IsNull(tableCustomer.birthday_dateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setbirthday_dateNull()
            {
                this[tableCustomer.birthday_dateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iswallate_amountNull()
            {
                return IsNull(tableCustomer.wallate_amountColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setwallate_amountNull()
            {
                this[tableCustomer.wallate_amountColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class DeliveryRow : DataRow
        {
            private DeliveryDataTable tableDelivery;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryRow(DataRowBuilder rb) : base(rb)
            {
                tableDelivery = (DeliveryDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tableDelivery.idColumn];
                }

                set
                {
                    this[tableDelivery.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid source
            {
                get
                {
                    return (Guid)this[tableDelivery.sourceColumn];
                }

                set
                {
                    this[tableDelivery.sourceColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid destination
            {
                get
                {
                    return (Guid)this[tableDelivery.destinationColumn];
                }

                set
                {
                    this[tableDelivery.destinationColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string delivery_note
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableDelivery.delivery_noteColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'delivery_note' in table 'Delivery' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDelivery.delivery_noteColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid final_delivery_status
            {
                get
                {
                    return (Guid)this[tableDelivery.final_delivery_statusColumn];
                }

                set
                {
                    this[tableDelivery.final_delivery_statusColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid delivery_company
            {
                get
                {
                    return (Guid)this[tableDelivery.delivery_companyColumn];
                }

                set
                {
                    this[tableDelivery.delivery_companyColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime recive_dates
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tableDelivery.recive_datesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'recive_dates' in table 'Delivery' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDelivery.recive_datesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public byte[] recive_prove
            {
                get
                {
                    try
                    {
                        return (byte[])this[tableDelivery.recive_proveColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'recive_prove' in table 'Delivery' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDelivery.recive_proveColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow DeliveryCompanyRow
            {
                get
                {
                    return (DeliveryCompanyRow)GetParentRow(Table.ParentRelations["FK__Delivery__delive__6A30C649"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Delivery__delive__6A30C649"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow AddressRowByFK__Delivery__destin__693CA210
            {
                get
                {
                    return (AddressRow)GetParentRow(Table.ParentRelations["FK__Delivery__destin__693CA210"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Delivery__destin__693CA210"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow DeliveryStatusRow
            {
                get
                {
                    return (DeliveryStatusRow)GetParentRow(Table.ParentRelations["FK__Delivery__final___6B24EA82"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Delivery__final___6B24EA82"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow AddressRowByFK__Delivery__source__68487DD7
            {
                get
                {
                    return (AddressRow)GetParentRow(Table.ParentRelations["FK__Delivery__source__68487DD7"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Delivery__source__68487DD7"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdelivery_noteNull()
            {
                return IsNull(tableDelivery.delivery_noteColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdelivery_noteNull()
            {
                this[tableDelivery.delivery_noteColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isrecive_datesNull()
            {
                return IsNull(tableDelivery.recive_datesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setrecive_datesNull()
            {
                this[tableDelivery.recive_datesColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isrecive_proveNull()
            {
                return IsNull(tableDelivery.recive_proveColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setrecive_proveNull()
            {
                this[tableDelivery.recive_proveColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow[] GetDeliveryChainDetailsRows()
            {
                if (Table.ChildRelations["FK__DeliveryC__deliv__72C60C4A"] is null)
                {
                    return new DeliveryChainDetailsRow[0];
                }
                else
                {
                    return (DeliveryChainDetailsRow[])GetChildRows(Table.ChildRelations["FK__DeliveryC__deliv__72C60C4A"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class DeliveryChainRow : DataRow
        {
            private DeliveryChainDataTable tableDeliveryChain;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryChainRow(DataRowBuilder rb) : base(rb)
            {
                tableDeliveryChain = (DeliveryChainDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tableDeliveryChain.idColumn];
                }

                set
                {
                    this[tableDeliveryChain.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime arrival_dates
            {
                get
                {
                    return Conversions.ToDate(this[tableDeliveryChain.arrival_datesColumn]);
                }

                set
                {
                    this[tableDeliveryChain.arrival_datesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid address_id
            {
                get
                {
                    return (Guid)this[tableDeliveryChain.address_idColumn];
                }

                set
                {
                    this[tableDeliveryChain.address_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid delivery_status
            {
                get
                {
                    try
                    {
                        return (Guid)this[tableDeliveryChain.delivery_statusColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'delivery_status' in table 'DeliveryChain' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDeliveryChain.delivery_statusColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string notes
            {
                get
                {
                    return Conversions.ToString(this[tableDeliveryChain.notesColumn]);
                }

                set
                {
                    this[tableDeliveryChain.notesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow AddressRow
            {
                get
                {
                    return (AddressRow)GetParentRow(Table.ParentRelations["FK__DeliveryC__addre__6EF57B66"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__DeliveryC__addre__6EF57B66"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow DeliveryStatusRow
            {
                get
                {
                    return (DeliveryStatusRow)GetParentRow(Table.ParentRelations["FK__DeliveryC__deliv__6FE99F9F"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__DeliveryC__deliv__6FE99F9F"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isdelivery_statusNull()
            {
                return IsNull(tableDeliveryChain.delivery_statusColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setdelivery_statusNull()
            {
                this[tableDeliveryChain.delivery_statusColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow[] GetDeliveryChainDetailsRows()
            {
                if (Table.ChildRelations["FK__DeliveryC__tranf__73BA3083"] is null)
                {
                    return new DeliveryChainDetailsRow[0];
                }
                else
                {
                    return (DeliveryChainDetailsRow[])GetChildRows(Table.ChildRelations["FK__DeliveryC__tranf__73BA3083"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class DeliveryChainDetailsRow : DataRow
        {
            private DeliveryChainDetailsDataTable tableDeliveryChainDetails;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryChainDetailsRow(DataRowBuilder rb) : base(rb)
            {
                tableDeliveryChainDetails = (DeliveryChainDetailsDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid delivery_id
            {
                get
                {
                    return (Guid)this[tableDeliveryChainDetails.delivery_idColumn];
                }

                set
                {
                    this[tableDeliveryChainDetails.delivery_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid tranfer_chain_id
            {
                get
                {
                    return (Guid)this[tableDeliveryChainDetails.tranfer_chain_idColumn];
                }

                set
                {
                    this[tableDeliveryChainDetails.tranfer_chain_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow DeliveryRow
            {
                get
                {
                    return (DeliveryRow)GetParentRow(Table.ParentRelations["FK__DeliveryC__deliv__72C60C4A"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__DeliveryC__deliv__72C60C4A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow DeliveryChainRow
            {
                get
                {
                    return (DeliveryChainRow)GetParentRow(Table.ParentRelations["FK__DeliveryC__tranf__73BA3083"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__DeliveryC__tranf__73BA3083"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class DeliveryCompanyRow : DataRow
        {
            private DeliveryCompanyDataTable tableDeliveryCompany;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryCompanyRow(DataRowBuilder rb) : base(rb)
            {
                tableDeliveryCompany = (DeliveryCompanyDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tableDeliveryCompany.idColumn];
                }

                set
                {
                    this[tableDeliveryCompany.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string company_name
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableDeliveryCompany.company_nameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'company_name' in table 'DeliveryCompany' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDeliveryCompany.company_nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string company_phones
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableDeliveryCompany.company_phonesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'company_phones' in table 'DeliveryCompany' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDeliveryCompany.company_phonesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableDeliveryCompany.descriptionColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'description' in table 'DeliveryCompany' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableDeliveryCompany.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double rm_per_g
            {
                get
                {
                    return Conversions.ToDouble(this[tableDeliveryCompany.rm_per_gColumn]);
                }

                set
                {
                    this[tableDeliveryCompany.rm_per_gColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double rm_per_cm3
            {
                get
                {
                    return Conversions.ToDouble(this[tableDeliveryCompany.rm_per_cm3Column]);
                }

                set
                {
                    this[tableDeliveryCompany.rm_per_cm3Column] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double gradient
            {
                get
                {
                    return Conversions.ToDouble(this[tableDeliveryCompany.gradientColumn]);
                }

                set
                {
                    this[tableDeliveryCompany.gradientColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string prefence_country
            {
                get
                {
                    return Conversions.ToString(this[tableDeliveryCompany.prefence_countryColumn]);
                }

                set
                {
                    this[tableDeliveryCompany.prefence_countryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool oversea_support
            {
                get
                {
                    return Conversions.ToBoolean(this[tableDeliveryCompany.oversea_supportColumn]);
                }

                set
                {
                    this[tableDeliveryCompany.oversea_supportColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iscompany_nameNull()
            {
                return IsNull(tableDeliveryCompany.company_nameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setcompany_nameNull()
            {
                this[tableDeliveryCompany.company_nameColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iscompany_phonesNull()
            {
                return IsNull(tableDeliveryCompany.company_phonesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setcompany_phonesNull()
            {
                this[tableDeliveryCompany.company_phonesColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdescriptionNull()
            {
                return IsNull(tableDeliveryCompany.descriptionColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdescriptionNull()
            {
                this[tableDeliveryCompany.descriptionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow[] GetDeliveryRows()
            {
                if (Table.ChildRelations["FK__Delivery__delive__6A30C649"] is null)
                {
                    return new DeliveryRow[0];
                }
                else
                {
                    return (DeliveryRow[])GetChildRows(Table.ChildRelations["FK__Delivery__delive__6A30C649"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class DeliveryStatusRow : DataRow
        {
            private DeliveryStatusDataTable tableDeliveryStatus;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal DeliveryStatusRow(DataRowBuilder rb) : base(rb)
            {
                tableDeliveryStatus = (DeliveryStatusDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tableDeliveryStatus.idColumn];
                }

                set
                {
                    this[tableDeliveryStatus.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tableDeliveryStatus.nameColumn]);
                }

                set
                {
                    this[tableDeliveryStatus.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tableDeliveryStatus.descriptionColumn]);
                }

                set
                {
                    this[tableDeliveryStatus.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow[] GetDeliveryRows()
            {
                if (Table.ChildRelations["FK__Delivery__final___6B24EA82"] is null)
                {
                    return new DeliveryRow[0];
                }
                else
                {
                    return (DeliveryRow[])GetChildRows(Table.ChildRelations["FK__Delivery__final___6B24EA82"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow[] GetDeliveryChainRows()
            {
                if (Table.ChildRelations["FK__DeliveryC__deliv__6FE99F9F"] is null)
                {
                    return new DeliveryChainRow[0];
                }
                else
                {
                    return (DeliveryChainRow[])GetChildRows(Table.ChildRelations["FK__DeliveryC__deliv__6FE99F9F"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class FoodRow : DataRow
        {
            private FoodDataTable tableFood;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal FoodRow(DataRowBuilder rb) : base(rb)
            {
                tableFood = (FoodDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableFood.idColumn]);
                }

                set
                {
                    this[tableFood.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int duty_staff_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableFood.duty_staff_idColumn]);
                }

                set
                {
                    this[tableFood.duty_staff_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public byte[] image
            {
                get
                {
                    try
                    {
                        return (byte[])this[tableFood.imageColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'image' in table 'Food' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableFood.imageColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double price
            {
                get
                {
                    return Conversions.ToDouble(this[tableFood.priceColumn]);
                }

                set
                {
                    this[tableFood.priceColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int stock
            {
                get
                {
                    return Conversions.ToInteger(this[tableFood.stockColumn]);
                }

                set
                {
                    this[tableFood.stockColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime add_date
            {
                get
                {
                    return Conversions.ToDate(this[tableFood.add_dateColumn]);
                }

                set
                {
                    this[tableFood.add_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string title
            {
                get
                {
                    return Conversions.ToString(this[tableFood.titleColumn]);
                }

                set
                {
                    this[tableFood.titleColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string descriptions
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableFood.descriptionsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'descriptions' in table 'Food' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableFood.descriptionsColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string poscode
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableFood.poscodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'poscode' in table 'Food' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableFood.poscodeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int catergory_id
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tableFood.catergory_idColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'catergory_id' in table 'Food' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableFood.catergory_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow CatergoryRow
            {
                get
                {
                    return (CatergoryRow)GetParentRow(Table.ParentRelations["FK__Food__catergory___398D8EEE"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Food__catergory___398D8EEE"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Food__duty_staff__38996AB5"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Food__duty_staff__38996AB5"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsimageNull()
            {
                return IsNull(tableFood.imageColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetimageNull()
            {
                this[tableFood.imageColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdescriptionsNull()
            {
                return IsNull(tableFood.descriptionsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdescriptionsNull()
            {
                this[tableFood.descriptionsColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsposcodeNull()
            {
                return IsNull(tableFood.poscodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetposcodeNull()
            {
                this[tableFood.poscodeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iscatergory_idNull()
            {
                return IsNull(tableFood.catergory_idColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setcatergory_idNull()
            {
                this[tableFood.catergory_idColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow[] GetCartDetailsRows()
            {
                if (Table.ChildRelations["FK__CartDetai__food___4222D4EF"] is null)
                {
                    return new CartDetailsRow[0];
                }
                else
                {
                    return (CartDetailsRow[])GetChildRows(Table.ChildRelations["FK__CartDetai__food___4222D4EF"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow[] GetMenuItemsRows()
            {
                if (Table.ChildRelations["FK__MenuItems__food___76969D2E"] is null)
                {
                    return new MenuItemsRow[0];
                }
                else
                {
                    return (MenuItemsRow[])GetChildRows(Table.ChildRelations["FK__MenuItems__food___76969D2E"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow[] GetOrderDetailsRows()
            {
                if (Table.ChildRelations["FK__OrderDeta__food___48CFD27E"] is null)
                {
                    return new OrderDetailsRow[0];
                }
                else
                {
                    return (OrderDetailsRow[])GetChildRows(Table.ChildRelations["FK__OrderDeta__food___48CFD27E"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow[] GetPaymentDetailsRows()
            {
                if (Table.ChildRelations["FK__PaymentDe__food___5812160E"] is null)
                {
                    return new PaymentDetailsRow[0];
                }
                else
                {
                    return (PaymentDetailsRow[])GetChildRows(Table.ChildRelations["FK__PaymentDe__food___5812160E"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class MembershipRow : DataRow
        {
            private MembershipDataTable tableMembership;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MembershipRow(DataRowBuilder rb) : base(rb)
            {
                tableMembership = (MembershipDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableMembership.idColumn]);
                }

                set
                {
                    this[tableMembership.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tableMembership.nameColumn]);
                }

                set
                {
                    this[tableMembership.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tableMembership.descriptionColumn]);
                }

                set
                {
                    this[tableMembership.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow[] GetCustomerRows()
            {
                if (Table.ChildRelations["FK__Customer__member__300424B4"] is null)
                {
                    return new CustomerRow[0];
                }
                else
                {
                    return (CustomerRow[])GetChildRows(Table.ChildRelations["FK__Customer__member__300424B4"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class MenuRow : DataRow
        {
            private MenuDataTable tableMenu;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MenuRow(DataRowBuilder rb) : base(rb)
            {
                tableMenu = (MenuDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableMenu.idColumn]);
                }

                set
                {
                    this[tableMenu.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime start_date
            {
                get
                {
                    return Conversions.ToDate(this[tableMenu.start_dateColumn]);
                }

                set
                {
                    this[tableMenu.start_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime end_date
            {
                get
                {
                    return Conversions.ToDate(this[tableMenu.end_dateColumn]);
                }

                set
                {
                    this[tableMenu.end_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string title
            {
                get
                {
                    return Conversions.ToString(this[tableMenu.titleColumn]);
                }

                set
                {
                    this[tableMenu.titleColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string descriptions
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableMenu.descriptionsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'descriptions' in table 'Menu' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableMenu.descriptionsColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool enabled
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tableMenu.enabledColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'enabled' in table 'Menu' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableMenu.enabledColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public byte[] menu_image
            {
                get
                {
                    try
                    {
                        return (byte[])this[tableMenu.menu_imageColumn];
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'menu_image' in table 'Menu' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableMenu.menu_imageColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdescriptionsNull()
            {
                return IsNull(tableMenu.descriptionsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdescriptionsNull()
            {
                this[tableMenu.descriptionsColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsenabledNull()
            {
                return IsNull(tableMenu.enabledColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetenabledNull()
            {
                this[tableMenu.enabledColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ismenu_imageNull()
            {
                return IsNull(tableMenu.menu_imageColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setmenu_imageNull()
            {
                this[tableMenu.menu_imageColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow[] GetMenuItemsRows()
            {
                if (Table.ChildRelations["FK__MenuItems__menu___778AC167"] is null)
                {
                    return new MenuItemsRow[0];
                }
                else
                {
                    return (MenuItemsRow[])GetChildRows(Table.ChildRelations["FK__MenuItems__menu___778AC167"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class MenuItemsRow : DataRow
        {
            private MenuItemsDataTable tableMenuItems;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal MenuItemsRow(DataRowBuilder rb) : base(rb)
            {
                tableMenuItems = (MenuItemsDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int menu_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableMenuItems.menu_idColumn]);
                }

                set
                {
                    this[tableMenuItems.menu_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int food_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableMenuItems.food_idColumn]);
                }

                set
                {
                    this[tableMenuItems.food_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow FoodRow
            {
                get
                {
                    return (FoodRow)GetParentRow(Table.ParentRelations["FK__MenuItems__food___76969D2E"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__MenuItems__food___76969D2E"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow MenuRow
            {
                get
                {
                    return (MenuRow)GetParentRow(Table.ParentRelations["FK__MenuItems__menu___778AC167"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__MenuItems__menu___778AC167"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class OrderRow : DataRow
        {
            private OrderDataTable tableOrder;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal OrderRow(DataRowBuilder rb) : base(rb)
            {
                tableOrder = (OrderDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrder.idColumn]);
                }

                set
                {
                    this[tableOrder.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int customer_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrder.customer_idColumn]);
                }

                set
                {
                    this[tableOrder.customer_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string order_status
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableOrder.order_statusColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'order_status' in table 'Order' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableOrder.order_statusColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime datetime
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tableOrder.datetimeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'datetime' in table 'Order' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableOrder.datetimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string customer_note
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableOrder.customer_noteColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'customer_note' in table 'Order' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableOrder.customer_noteColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string payload
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableOrder.payloadColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'payload' in table 'Order' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableOrder.payloadColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Order__customer___44FF419A"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Order__customer___44FF419A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isorder_statusNull()
            {
                return IsNull(tableOrder.order_statusColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setorder_statusNull()
            {
                this[tableOrder.order_statusColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdatetimeNull()
            {
                return IsNull(tableOrder.datetimeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdatetimeNull()
            {
                this[tableOrder.datetimeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iscustomer_noteNull()
            {
                return IsNull(tableOrder.customer_noteColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setcustomer_noteNull()
            {
                this[tableOrder.customer_noteColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IspayloadNull()
            {
                return IsNull(tableOrder.payloadColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetpayloadNull()
            {
                this[tableOrder.payloadColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow[] GetOrderDetailsRows()
            {
                if (Table.ChildRelations["FK__OrderDeta__order__47DBAE45"] is null)
                {
                    return new OrderDetailsRow[0];
                }
                else
                {
                    return (OrderDetailsRow[])GetChildRows(Table.ChildRelations["FK__OrderDeta__order__47DBAE45"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class OrderDetailsRow : DataRow
        {
            private OrderDetailsDataTable tableOrderDetails;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal OrderDetailsRow(DataRowBuilder rb) : base(rb)
            {
                tableOrderDetails = (OrderDetailsDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int order_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrderDetails.order_idColumn]);
                }

                set
                {
                    this[tableOrderDetails.order_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int food_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrderDetails.food_idColumn]);
                }

                set
                {
                    this[tableOrderDetails.food_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int quantity
            {
                get
                {
                    return Conversions.ToInteger(this[tableOrderDetails.quantityColumn]);
                }

                set
                {
                    this[tableOrderDetails.quantityColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime add_datetime
            {
                get
                {
                    return Conversions.ToDate(this[tableOrderDetails.add_datetimeColumn]);
                }

                set
                {
                    this[tableOrderDetails.add_datetimeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow FoodRow
            {
                get
                {
                    return (FoodRow)GetParentRow(Table.ParentRelations["FK__OrderDeta__food___48CFD27E"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__OrderDeta__food___48CFD27E"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow OrderRow
            {
                get
                {
                    return (OrderRow)GetParentRow(Table.ParentRelations["FK__OrderDeta__order__47DBAE45"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__OrderDeta__order__47DBAE45"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class PaymentRow : DataRow
        {
            private PaymentDataTable tablePayment;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentRow(DataRowBuilder rb) : base(rb)
            {
                tablePayment = (PaymentDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tablePayment.idColumn];
                }

                set
                {
                    this[tablePayment.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid payment_method
            {
                get
                {
                    return (Guid)this[tablePayment.payment_methodColumn];
                }

                set
                {
                    this[tablePayment.payment_methodColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid payment_status
            {
                get
                {
                    return (Guid)this[tablePayment.payment_statusColumn];
                }

                set
                {
                    this[tablePayment.payment_statusColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tablePayment.user_idColumn]);
                }

                set
                {
                    this[tablePayment.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double tax_change
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tablePayment.tax_changeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'tax_change' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.tax_changeColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double net_pay
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tablePayment.net_payColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'net_pay' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.net_payColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double discount
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tablePayment.discountColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'discount' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.discountColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double total_pay
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tablePayment.total_payColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'total_pay' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.total_payColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double customer_paid
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tablePayment.customer_paidColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'customer_paid' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.customer_paidColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime payment_date
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablePayment.payment_dateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'payment_date' in table 'Payment' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePayment.payment_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string payment_meta
            {
                get
                {
                    return Conversions.ToString(this[tablePayment.payment_metaColumn]);
                }

                set
                {
                    this[tablePayment.payment_metaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string notes
            {
                get
                {
                    return Conversions.ToString(this[tablePayment.notesColumn]);
                }

                set
                {
                    this[tablePayment.notesColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow PaymentMethodRow
            {
                get
                {
                    return (PaymentMethodRow)GetParentRow(Table.ParentRelations["FK__Payment__payment__52593CB8"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Payment__payment__52593CB8"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow PaymentStatusRow
            {
                get
                {
                    return (PaymentStatusRow)GetParentRow(Table.ParentRelations["FK__Payment__payment__534D60F1"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Payment__payment__534D60F1"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Payment__user_id__5441852A"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Payment__user_id__5441852A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Istax_changeNull()
            {
                return IsNull(tablePayment.tax_changeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Settax_changeNull()
            {
                this[tablePayment.tax_changeColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isnet_payNull()
            {
                return IsNull(tablePayment.net_payColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setnet_payNull()
            {
                this[tablePayment.net_payColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsdiscountNull()
            {
                return IsNull(tablePayment.discountColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetdiscountNull()
            {
                this[tablePayment.discountColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Istotal_payNull()
            {
                return IsNull(tablePayment.total_payColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Settotal_payNull()
            {
                this[tablePayment.total_payColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Iscustomer_paidNull()
            {
                return IsNull(tablePayment.customer_paidColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setcustomer_paidNull()
            {
                this[tablePayment.customer_paidColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Ispayment_dateNull()
            {
                return IsNull(tablePayment.payment_dateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setpayment_dateNull()
            {
                this[tablePayment.payment_dateColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow[] GetPaymentDetailsRows()
            {
                if (Table.ChildRelations["FK__PaymentDe__payme__571DF1D5"] is null)
                {
                    return new PaymentDetailsRow[0];
                }
                else
                {
                    return (PaymentDetailsRow[])GetChildRows(Table.ChildRelations["FK__PaymentDe__payme__571DF1D5"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class PaymentDetailsRow : DataRow
        {
            private PaymentDetailsDataTable tablePaymentDetails;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentDetailsRow(DataRowBuilder rb) : base(rb)
            {
                tablePaymentDetails = (PaymentDetailsDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid payment_id
            {
                get
                {
                    return (Guid)this[tablePaymentDetails.payment_idColumn];
                }

                set
                {
                    this[tablePaymentDetails.payment_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int food_id
            {
                get
                {
                    return Conversions.ToInteger(this[tablePaymentDetails.food_idColumn]);
                }

                set
                {
                    this[tablePaymentDetails.food_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int quantity
            {
                get
                {
                    try
                    {
                        return Conversions.ToInteger(this[tablePaymentDetails.quantityColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'quantity' in table 'PaymentDetails' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePaymentDetails.quantityColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime add_date
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablePaymentDetails.add_dateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'add_date' in table 'PaymentDetails' is DBNull.", e);
                    }
                }

                set
                {
                    this[tablePaymentDetails.add_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow FoodRow
            {
                get
                {
                    return (FoodRow)GetParentRow(Table.ParentRelations["FK__PaymentDe__food___5812160E"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__PaymentDe__food___5812160E"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow PaymentRow
            {
                get
                {
                    return (PaymentRow)GetParentRow(Table.ParentRelations["FK__PaymentDe__payme__571DF1D5"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__PaymentDe__payme__571DF1D5"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IsquantityNull()
            {
                return IsNull(tablePaymentDetails.quantityColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetquantityNull()
            {
                this[tablePaymentDetails.quantityColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isadd_dateNull()
            {
                return IsNull(tablePaymentDetails.add_dateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setadd_dateNull()
            {
                this[tablePaymentDetails.add_dateColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class PaymentMethodRow : DataRow
        {
            private PaymentMethodDataTable tablePaymentMethod;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentMethodRow(DataRowBuilder rb) : base(rb)
            {
                tablePaymentMethod = (PaymentMethodDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tablePaymentMethod.idColumn];
                }

                set
                {
                    this[tablePaymentMethod.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tablePaymentMethod.nameColumn]);
                }

                set
                {
                    this[tablePaymentMethod.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tablePaymentMethod.descriptionColumn]);
                }

                set
                {
                    this[tablePaymentMethod.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string meta_field
            {
                get
                {
                    return Conversions.ToString(this[tablePaymentMethod.meta_fieldColumn]);
                }

                set
                {
                    this[tablePaymentMethod.meta_fieldColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow[] GetPaymentRows()
            {
                if (Table.ChildRelations["FK__Payment__payment__52593CB8"] is null)
                {
                    return new PaymentRow[0];
                }
                else
                {
                    return (PaymentRow[])GetChildRows(Table.ChildRelations["FK__Payment__payment__52593CB8"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class PaymentStatusRow : DataRow
        {
            private PaymentStatusDataTable tablePaymentStatus;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PaymentStatusRow(DataRowBuilder rb) : base(rb)
            {
                tablePaymentStatus = (PaymentStatusDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid id
            {
                get
                {
                    return (Guid)this[tablePaymentStatus.idColumn];
                }

                set
                {
                    this[tablePaymentStatus.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tablePaymentStatus.nameColumn]);
                }

                set
                {
                    this[tablePaymentStatus.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tablePaymentStatus.descriptionColumn]);
                }

                set
                {
                    this[tablePaymentStatus.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow[] GetPaymentRows()
            {
                if (Table.ChildRelations["FK__Payment__payment__534D60F1"] is null)
                {
                    return new PaymentRow[0];
                }
                else
                {
                    return (PaymentRow[])GetChildRows(Table.ChildRelations["FK__Payment__payment__534D60F1"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class PositionRow : DataRow
        {
            private PositionDataTable tablePosition;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal PositionRow(DataRowBuilder rb) : base(rb)
            {
                tablePosition = (PositionDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tablePosition.idColumn]);
                }

                set
                {
                    this[tablePosition.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string name
            {
                get
                {
                    return Conversions.ToString(this[tablePosition.nameColumn]);
                }

                set
                {
                    this[tablePosition.nameColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string description
            {
                get
                {
                    return Conversions.ToString(this[tablePosition.descriptionColumn]);
                }

                set
                {
                    this[tablePosition.descriptionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow[] GetStaffRows()
            {
                if (Table.ChildRelations["FK__Staff__position___2C3393D0"] is null)
                {
                    return new StaffRow[0];
                }
                else
                {
                    return (StaffRow[])GetChildRows(Table.ChildRelations["FK__Staff__position___2C3393D0"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class ResetPasswordTokenRow : DataRow
        {
            private ResetPasswordTokenDataTable tableResetPasswordToken;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal ResetPasswordTokenRow(DataRowBuilder rb) : base(rb)
            {
                tableResetPasswordToken = (ResetPasswordTokenDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int id
            {
                get
                {
                    return Conversions.ToInteger(this[tableResetPasswordToken.idColumn]);
                }

                set
                {
                    this[tableResetPasswordToken.idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public string key
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableResetPasswordToken.keyColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'key' in table 'ResetPasswordToken' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableResetPasswordToken.keyColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DateTime exp_date
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tableResetPasswordToken.exp_dateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'exp_date' in table 'ResetPasswordToken' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableResetPasswordToken.exp_dateColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableResetPasswordToken.user_idColumn]);
                }

                set
                {
                    this[tableResetPasswordToken.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__ResetPass__user___35BCFE0A"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__ResetPass__user___35BCFE0A"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IskeyNull()
            {
                return IsNull(tableResetPasswordToken.keyColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetkeyNull()
            {
                this[tableResetPasswordToken.keyColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool Isexp_dateNull()
            {
                return IsNull(tableResetPasswordToken.exp_dateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void Setexp_dateNull()
            {
                this[tableResetPasswordToken.exp_dateColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class StaffRow : DataRow
        {
            private StaffDataTable tableStaff;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal StaffRow(DataRowBuilder rb) : base(rb)
            {
                tableStaff = (StaffDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableStaff.user_idColumn]);
                }

                set
                {
                    this[tableStaff.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int priority
            {
                get
                {
                    return Conversions.ToInteger(this[tableStaff.priorityColumn]);
                }

                set
                {
                    this[tableStaff.priorityColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int position_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableStaff.position_idColumn]);
                }

                set
                {
                    this[tableStaff.position_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public double salary
            {
                get
                {
                    try
                    {
                        return Conversions.ToDouble(this[tableStaff.salaryColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'salary' in table 'Staff' is DBNull.", e);
                    }
                }

                set
                {
                    this[tableStaff.salaryColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow PositionRow
            {
                get
                {
                    return (PositionRow)GetParentRow(Table.ParentRelations["FK__Staff__position___2C3393D0"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Staff__position___2C3393D0"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__Staff__user_id__2B3F6F97"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__Staff__user_id__2B3F6F97"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool IssalaryNull()
            {
                return IsNull(tableStaff.salaryColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public void SetsalaryNull()
            {
                this[tableStaff.salaryColumn] = Convert.DBNull;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class UserAddressRow : DataRow
        {
            private UserAddressDataTable tableUserAddress;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal UserAddressRow(DataRowBuilder rb) : base(rb)
            {
                tableUserAddress = (UserAddressDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public int user_id
            {
                get
                {
                    return Conversions.ToInteger(this[tableUserAddress.user_idColumn]);
                }

                set
                {
                    this[tableUserAddress.user_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public Guid address_id
            {
                get
                {
                    return (Guid)this[tableUserAddress.address_idColumn];
                }

                set
                {
                    this[tableUserAddress.address_idColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow AddressRow
            {
                get
                {
                    return (AddressRow)GetParentRow(Table.ParentRelations["FK__UserAddre__addre__6477ECF3"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__UserAddre__addre__6477ECF3"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow UsersRow
            {
                get
                {
                    return (UsersRow)GetParentRow(Table.ParentRelations["FK__UserAddre__user___6383C8BA"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK__UserAddre__user___6383C8BA"]);
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class AddressRowChangeEvent : EventArgs
        {
            private AddressRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRowChangeEvent(AddressRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class UsersRowChangeEvent : EventArgs
        {
            private UsersRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRowChangeEvent(UsersRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class CartRowChangeEvent : EventArgs
        {
            private CartRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRowChangeEvent(CartRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class CartDetailsRowChangeEvent : EventArgs
        {
            private CartDetailsRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRowChangeEvent(CartDetailsRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class CatergoryRowChangeEvent : EventArgs
        {
            private CatergoryRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRowChangeEvent(CatergoryRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class CustomerRowChangeEvent : EventArgs
        {
            private CustomerRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRowChangeEvent(CustomerRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeliveryRowChangeEvent : EventArgs
        {
            private DeliveryRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRowChangeEvent(DeliveryRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeliveryChainRowChangeEvent : EventArgs
        {
            private DeliveryChainRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRowChangeEvent(DeliveryChainRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeliveryChainDetailsRowChangeEvent : EventArgs
        {
            private DeliveryChainDetailsRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRowChangeEvent(DeliveryChainDetailsRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeliveryCompanyRowChangeEvent : EventArgs
        {
            private DeliveryCompanyRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRowChangeEvent(DeliveryCompanyRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class DeliveryStatusRowChangeEvent : EventArgs
        {
            private DeliveryStatusRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRowChangeEvent(DeliveryStatusRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class FoodRowChangeEvent : EventArgs
        {
            private FoodRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRowChangeEvent(FoodRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class MembershipRowChangeEvent : EventArgs
        {
            private MembershipRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRowChangeEvent(MembershipRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class MenuRowChangeEvent : EventArgs
        {
            private MenuRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRowChangeEvent(MenuRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class MenuItemsRowChangeEvent : EventArgs
        {
            private MenuItemsRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRowChangeEvent(MenuItemsRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class OrderRowChangeEvent : EventArgs
        {
            private OrderRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRowChangeEvent(OrderRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class OrderDetailsRowChangeEvent : EventArgs
        {
            private OrderDetailsRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRowChangeEvent(OrderDetailsRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PaymentRowChangeEvent : EventArgs
        {
            private PaymentRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRowChangeEvent(PaymentRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PaymentDetailsRowChangeEvent : EventArgs
        {
            private PaymentDetailsRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRowChangeEvent(PaymentDetailsRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PaymentMethodRowChangeEvent : EventArgs
        {
            private PaymentMethodRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRowChangeEvent(PaymentMethodRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PaymentStatusRowChangeEvent : EventArgs
        {
            private PaymentStatusRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRowChangeEvent(PaymentStatusRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class PositionRowChangeEvent : EventArgs
        {
            private PositionRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRowChangeEvent(PositionRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class ResetPasswordTokenRowChangeEvent : EventArgs
        {
            private ResetPasswordTokenRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRowChangeEvent(ResetPasswordTokenRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class StaffRowChangeEvent : EventArgs
        {
            private StaffRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRowChangeEvent(StaffRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
        public class UserAddressRowChangeEvent : EventArgs
        {
            private UserAddressRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRowChangeEvent(UserAddressRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace FoodShopDataSetTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class AddressTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public AddressTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Address";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("latitude", "latitude");
                tableMapping.ColumnMappings.Add("longitude", "longitude");
                tableMapping.ColumnMappings.Add("details", "details");
                tableMapping.ColumnMappings.Add("street", "street");
                tableMapping.ColumnMappings.Add("city", "city");
                tableMapping.ColumnMappings.Add("state", "state");
                tableMapping.ColumnMappings.Add("poscode", "poscode");
                tableMapping.ColumnMappings.Add("country", "country");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Address] WHERE (([id] = @Original_id) AND ([latitude] = @Origi" + "nal_latitude) AND ([longitude] = @Original_longitude) AND ([details] = @Original" + "_details) AND ([street] = @Original_street) AND ([city] = @Original_city) AND ((" + "@IsNull_state = 1 AND [state] IS NULL) OR ([state] = @Original_state)) AND ((@Is" + "Null_poscode = 1 AND [poscode] IS NULL) OR ([poscode] = @Original_poscode)) AND " + "((@IsNull_country = 1 AND [country] IS NULL) OR ([country] = @Original_country))" + ")";





                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_latitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "latitude", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "longitude", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_details", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "details", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_street", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "street", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "city", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_state", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_state", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_poscode", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_country", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Address] ([id], [latitude], [longitude], [details], [street], " + "[city], [state], [poscode], [country]) VALUES (@id, @latitude, @longitude, @deta" + "ils, @street, @city, @state, @poscode, @country);" + '\r' + '\n' + "SELECT id, latitude, longitud" + "e, details, street, city, state, poscode, country FROM Address WHERE (id = @id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@latitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "latitude", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "longitude", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@details", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "details", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@street", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "street", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "city", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Address] SET [id] = @id, [latitude] = @latitude, [longitude] = @lon" + "gitude, [details] = @details, [street] = @street, [city] = @city, [state] = @sta" + "te, [poscode] = @poscode, [country] = @country WHERE (([id] = @Original_id) AND " + "([latitude] = @Original_latitude) AND ([longitude] = @Original_longitude) AND ([" + "details] = @Original_details) AND ([street] = @Original_street) AND ([city] = @O" + "riginal_city) AND ((@IsNull_state = 1 AND [state] IS NULL) OR ([state] = @Origin" + "al_state)) AND ((@IsNull_poscode = 1 AND [poscode] IS NULL) OR ([poscode] = @Ori" + "ginal_poscode)) AND ((@IsNull_country = 1 AND [country] IS NULL) OR ([country] =" + " @Original_country)));" + '\r' + '\n' + "SELECT id, latitude, longitude, details, street, city, s" + "tate, poscode, country FROM Address WHERE (id = @id)";








                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@latitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "latitude", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@longitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "longitude", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@details", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "details", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@street", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "street", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@city", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "city", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@state", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_latitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "latitude", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_longitude", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "longitude", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_details", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "details", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_street", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "street", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_city", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "city", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_state", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_state", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "state", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_poscode", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_country", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "country", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, latitude, longitude, details, street, city, state, poscode, country FR" + "OM dbo.Address";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.AddressDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.AddressDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.AddressDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.AddressDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Address");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, double Original_latitude, double Original_longitude, string Original_details, string Original_street, string Original_city, string Original_state, string Original_poscode, string Original_country)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_latitude;
                Adapter.DeleteCommand.Parameters[2].Value = Original_longitude;
                if (Original_details is null)
                {
                    throw new ArgumentNullException("Original_details");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = Original_details;
                }

                if (Original_street is null)
                {
                    throw new ArgumentNullException("Original_street");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = Original_street;
                }

                if (Original_city is null)
                {
                    throw new ArgumentNullException("Original_city");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = Original_city;
                }

                if (Original_state is null)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_state;
                }

                if (Original_poscode is null)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_poscode;
                }

                if (Original_country is null)
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 1;
                    Adapter.DeleteCommand.Parameters[11].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 0;
                    Adapter.DeleteCommand.Parameters[11].Value = Original_country;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, double latitude, double longitude, string details, string street, string city, string state, string poscode, string country)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                Adapter.InsertCommand.Parameters[1].Value = latitude;
                Adapter.InsertCommand.Parameters[2].Value = longitude;
                if (details is null)
                {
                    throw new ArgumentNullException("details");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = details;
                }

                if (street is null)
                {
                    throw new ArgumentNullException("street");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = street;
                }

                if (city is null)
                {
                    throw new ArgumentNullException("city");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = city;
                }

                if (state is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = state;
                }

                if (poscode is null)
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = poscode;
                }

                if (country is null)
                {
                    Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[8].Value = country;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, double latitude, double longitude, string details, string street, string city, string state, string poscode, string country, Guid Original_id, double Original_latitude, double Original_longitude, string Original_details, string Original_street, string Original_city, string Original_state, string Original_poscode, string Original_country)

















            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                Adapter.UpdateCommand.Parameters[1].Value = latitude;
                Adapter.UpdateCommand.Parameters[2].Value = longitude;
                if (details is null)
                {
                    throw new ArgumentNullException("details");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = details;
                }

                if (street is null)
                {
                    throw new ArgumentNullException("street");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = street;
                }

                if (city is null)
                {
                    throw new ArgumentNullException("city");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = city;
                }

                if (state is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = state;
                }

                if (poscode is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = poscode;
                }

                if (country is null)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = country;
                }

                Adapter.UpdateCommand.Parameters[9].Value = Original_id;
                Adapter.UpdateCommand.Parameters[10].Value = Original_latitude;
                Adapter.UpdateCommand.Parameters[11].Value = Original_longitude;
                if (Original_details is null)
                {
                    throw new ArgumentNullException("Original_details");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = Original_details;
                }

                if (Original_street is null)
                {
                    throw new ArgumentNullException("Original_street");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[13].Value = Original_street;
                }

                if (Original_city is null)
                {
                    throw new ArgumentNullException("Original_city");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = Original_city;
                }

                if (Original_state is null)
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 1;
                    Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 0;
                    Adapter.UpdateCommand.Parameters[16].Value = Original_state;
                }

                if (Original_poscode is null)
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 1;
                    Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 0;
                    Adapter.UpdateCommand.Parameters[18].Value = Original_poscode;
                }

                if (Original_country is null)
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 1;
                    Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 0;
                    Adapter.UpdateCommand.Parameters[20].Value = Original_country;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(double latitude, double longitude, string details, string street, string city, string state, string poscode, string country, Guid Original_id, double Original_latitude, double Original_longitude, string Original_details, string Original_street, string Original_city, string Original_state, string Original_poscode, string Original_country)
















            {
                return Update(Original_id, latitude, longitude, details, street, city, state, poscode, country, Original_id, Original_latitude, Original_longitude, Original_details, Original_street, Original_city, Original_state, Original_poscode, Original_country);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class UsersTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UsersTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Users";
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                tableMapping.ColumnMappings.Add("user_email", "user_email");
                tableMapping.ColumnMappings.Add("username", "username");
                tableMapping.ColumnMappings.Add("last_name", "last_name");
                tableMapping.ColumnMappings.Add("first_name", "first_name");
                tableMapping.ColumnMappings.Add("user_role", "user_role");
                tableMapping.ColumnMappings.Add("phone_num", "phone_num");
                tableMapping.ColumnMappings.Add("gender", "gender");
                tableMapping.ColumnMappings.Add("picture", "picture");
                tableMapping.ColumnMappings.Add("password", "password");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([user_id] = @Original_user_id) AND ([user_email" + "] = @Original_user_email) AND ((@IsNull_username = 1 AND [username] IS NULL) OR " + "([username] = @Original_username)) AND ((@IsNull_last_name = 1 AND [last_name] I" + "S NULL) OR ([last_name] = @Original_last_name)) AND ((@IsNull_first_name = 1 AND" + " [first_name] IS NULL) OR ([first_name] = @Original_first_name)) AND ((@IsNull_u" + "ser_role = 1 AND [user_role] IS NULL) OR ([user_role] = @Original_user_role)) AN" + "D ((@IsNull_phone_num = 1 AND [phone_num] IS NULL) OR ([phone_num] = @Original_p" + "hone_num)) AND ((@IsNull_gender = 1 AND [gender] IS NULL) OR ([gender] = @Origin" + "al_gender)) AND ([password] = @Original_password))";







                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_email", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_email", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_username", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_username", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_last_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_last_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_first_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_first_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_user_role", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_role", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_phone_num", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_phone_num", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gender", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gender", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_password", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "password", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([user_email], [username], [last_name], [first_name], [" + "user_role], [phone_num], [gender], [picture], [password]) VALUES (@user_email, @" + "username, @last_name, @first_name, @user_role, @phone_num, @gender, @picture, @p" + "assword);" + '\r' + '\n' + "SELECT user_id, user_email, username, last_name, first_name, user_rol" + "e, phone_num, gender, picture, password FROM Users WHERE (user_id = SCOPE_IDENTI" + "TY())";




                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_email", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_email", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@username", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@last_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@first_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_role", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@phone_num", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gender", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@picture", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "picture", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "password", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users] SET [user_email] = @user_email, [username] = @username, [las" + "t_name] = @last_name, [first_name] = @first_name, [user_role] = @user_role, [pho" + "ne_num] = @phone_num, [gender] = @gender, [picture] = @picture, [password] = @pa" + "ssword WHERE (([user_id] = @Original_user_id) AND ([user_email] = @Original_user" + "_email) AND ((@IsNull_username = 1 AND [username] IS NULL) OR ([username] = @Ori" + "ginal_username)) AND ((@IsNull_last_name = 1 AND [last_name] IS NULL) OR ([last_" + "name] = @Original_last_name)) AND ((@IsNull_first_name = 1 AND [first_name] IS N" + "ULL) OR ([first_name] = @Original_first_name)) AND ((@IsNull_user_role = 1 AND [" + "user_role] IS NULL) OR ([user_role] = @Original_user_role)) AND ((@IsNull_phone_" + "num = 1 AND [phone_num] IS NULL) OR ([phone_num] = @Original_phone_num)) AND ((@" + "IsNull_gender = 1 AND [gender] IS NULL) OR ([gender] = @Original_gender)) AND ([" + "password] = @Original_password));" + '\r' + '\n' + "SELECT user_id, user_email, username, last_na" + "me, first_name, user_role, phone_num, gender, picture, password FROM Users WHERE" + " (user_id = @user_id)";












                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_email", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_email", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@username", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@last_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@first_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_role", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@phone_num", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gender", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@picture", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "picture", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@password", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "password", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_email", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_email", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_username", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_username", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "username", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_last_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_last_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "last_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_first_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_first_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "first_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_user_role", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_role", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "user_role", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_phone_num", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_phone_num", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "phone_num", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_gender", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gender", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "gender", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_password", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "password", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT user_id, user_email, username, last_name, first_name, user_role, phone_num" + ", gender, picture, password FROM dbo.Users";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.UsersDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.UsersDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.UsersDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.UsersDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Users");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_user_id, string Original_user_email, string Original_username, string Original_last_name, string Original_first_name, string Original_user_role, string Original_phone_num, string Original_gender, string Original_password)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_user_id;
                if (Original_user_email is null)
                {
                    throw new ArgumentNullException("Original_user_email");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_user_email;
                }

                if (Original_username is null)
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 1;
                    Adapter.DeleteCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 0;
                    Adapter.DeleteCommand.Parameters[3].Value = Original_username;
                }

                if (Original_last_name is null)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_last_name;
                }

                if (Original_first_name is null)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_first_name;
                }

                if (Original_user_role is null)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_user_role;
                }

                if (Original_phone_num is null)
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 1;
                    Adapter.DeleteCommand.Parameters[11].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 0;
                    Adapter.DeleteCommand.Parameters[11].Value = Original_phone_num;
                }

                if (Original_gender is null)
                {
                    Adapter.DeleteCommand.Parameters[12].Value = 1;
                    Adapter.DeleteCommand.Parameters[13].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[12].Value = 0;
                    Adapter.DeleteCommand.Parameters[13].Value = Original_gender;
                }

                if (Original_password is null)
                {
                    throw new ArgumentNullException("Original_password");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[14].Value = Original_password;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string user_email, string username, string last_name, string first_name, string user_role, string phone_num, string gender, byte[] picture, string password)
            {
                if (user_email is null)
                {
                    throw new ArgumentNullException("user_email");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = user_email;
                }

                if (username is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = username;
                }

                if (last_name is null)
                {
                    Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = last_name;
                }

                if (first_name is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = first_name;
                }

                if (user_role is null)
                {
                    Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = user_role;
                }

                if (phone_num is null)
                {
                    Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = phone_num;
                }

                if (gender is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = gender;
                }

                if (picture is null)
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = picture;
                }

                if (password is null)
                {
                    throw new ArgumentNullException("password");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[8].Value = password;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string user_email, string username, string last_name, string first_name, string user_role, string phone_num, string gender, byte[] picture, string password, int Original_user_id, string Original_user_email, string Original_username, string Original_last_name, string Original_first_name, string Original_user_role, string Original_phone_num, string Original_gender, string Original_password, int user_id)


















            {
                if (user_email is null)
                {
                    throw new ArgumentNullException("user_email");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = user_email;
                }

                if (username is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = username;
                }

                if (last_name is null)
                {
                    Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = last_name;
                }

                if (first_name is null)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = first_name;
                }

                if (user_role is null)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = user_role;
                }

                if (phone_num is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = phone_num;
                }

                if (gender is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = gender;
                }

                if (picture is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = picture;
                }

                if (password is null)
                {
                    throw new ArgumentNullException("password");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = password;
                }

                Adapter.UpdateCommand.Parameters[9].Value = Original_user_id;
                if (Original_user_email is null)
                {
                    throw new ArgumentNullException("Original_user_email");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = Original_user_email;
                }

                if (Original_username is null)
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 1;
                    Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 0;
                    Adapter.UpdateCommand.Parameters[12].Value = Original_username;
                }

                if (Original_last_name is null)
                {
                    Adapter.UpdateCommand.Parameters[13].Value = 1;
                    Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[13].Value = 0;
                    Adapter.UpdateCommand.Parameters[14].Value = Original_last_name;
                }

                if (Original_first_name is null)
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 1;
                    Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 0;
                    Adapter.UpdateCommand.Parameters[16].Value = Original_first_name;
                }

                if (Original_user_role is null)
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 1;
                    Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 0;
                    Adapter.UpdateCommand.Parameters[18].Value = Original_user_role;
                }

                if (Original_phone_num is null)
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 1;
                    Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 0;
                    Adapter.UpdateCommand.Parameters[20].Value = Original_phone_num;
                }

                if (Original_gender is null)
                {
                    Adapter.UpdateCommand.Parameters[21].Value = 1;
                    Adapter.UpdateCommand.Parameters[22].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[21].Value = 0;
                    Adapter.UpdateCommand.Parameters[22].Value = Original_gender;
                }

                if (Original_password is null)
                {
                    throw new ArgumentNullException("Original_password");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[23].Value = Original_password;
                }

                Adapter.UpdateCommand.Parameters[24].Value = user_id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string user_email, string username, string last_name, string first_name, string user_role, string phone_num, string gender, byte[] picture, string password, int Original_user_id, string Original_user_email, string Original_username, string Original_last_name, string Original_first_name, string Original_user_role, string Original_phone_num, string Original_gender, string Original_password)

















            {
                return Update(user_email, username, last_name, first_name, user_role, phone_num, gender, picture, password, Original_user_id, Original_user_email, Original_username, Original_last_name, Original_first_name, Original_user_role, Original_phone_num, Original_gender, Original_password, Original_user_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class CartTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Cart";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("customer_id", "customer_id");
                tableMapping.ColumnMappings.Add("remark", "remark");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Cart] WHERE (([id] = @Original_id) AND ([customer_id] = @Origi" + "nal_customer_id) AND ((@IsNull_remark = 1 AND [remark] IS NULL) OR ([remark] = @" + "Original_remark)))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_remark", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_remark", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Cart] ([customer_id], [remark]) VALUES (@customer_id, @remark)" + ";" + '\r' + '\n' + "SELECT id, customer_id, remark FROM Cart WHERE (id = SCOPE_IDENTITY())";
                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@remark", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Cart] SET [customer_id] = @customer_id, [remark] = @remark WHERE ((" + "[id] = @Original_id) AND ([customer_id] = @Original_customer_id) AND ((@IsNull_r" + "emark = 1 AND [remark] IS NULL) OR ([remark] = @Original_remark)));" + '\r' + '\n' + "SELECT id, " + "customer_id, remark FROM Cart WHERE (id = @id)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@remark", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_remark", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_remark", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "remark", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, customer_id, remark FROM dbo.Cart";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.CartDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.CartDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.CartDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.CartDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Cart");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, int Original_customer_id, string Original_remark)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_customer_id;
                if (Original_remark is null)
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 1;
                    Adapter.DeleteCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 0;
                    Adapter.DeleteCommand.Parameters[3].Value = Original_remark;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int customer_id, string remark)
            {
                Adapter.InsertCommand.Parameters[0].Value = customer_id;
                if (remark is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = remark;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int customer_id, string remark, int Original_id, int Original_customer_id, string Original_remark, int id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = customer_id;
                if (remark is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = remark;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_id;
                Adapter.UpdateCommand.Parameters[3].Value = Original_customer_id;
                if (Original_remark is null)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = 1;
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = 0;
                    Adapter.UpdateCommand.Parameters[5].Value = Original_remark;
                }

                Adapter.UpdateCommand.Parameters[6].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int customer_id, string remark, int Original_id, int Original_customer_id, string Original_remark)
            {
                return Update(customer_id, remark, Original_id, Original_customer_id, Original_remark, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class CartDetailsTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CartDetailsTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "CartDetails";
                tableMapping.ColumnMappings.Add("cart_id", "cart_id");
                tableMapping.ColumnMappings.Add("food_id", "food_id");
                tableMapping.ColumnMappings.Add("quantity", "quantity");
                tableMapping.ColumnMappings.Add("add_datetime", "add_datetime");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CartDetails] WHERE (([cart_id] = @Original_cart_id) AND ([food" + "_id] = @Original_food_id) AND ([quantity] = @Original_quantity) AND ([add_dateti" + "me] = @Original_add_datetime))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cart_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "cart_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CartDetails] ([cart_id], [food_id], [quantity], [add_datetime]" + ") VALUES (@cart_id, @food_id, @quantity, @add_datetime);" + '\r' + '\n' + "SELECT cart_id, food_i" + "d, quantity, add_datetime FROM CartDetails WHERE (cart_id = @cart_id) AND (food_" + "id = @food_id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cart_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "cart_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CartDetails] SET [cart_id] = @cart_id, [food_id] = @food_id, [quant" + "ity] = @quantity, [add_datetime] = @add_datetime WHERE (([cart_id] = @Original_c" + "art_id) AND ([food_id] = @Original_food_id) AND ([quantity] = @Original_quantity" + ") AND ([add_datetime] = @Original_add_datetime));" + '\r' + '\n' + "SELECT cart_id, food_id, quan" + "tity, add_datetime FROM CartDetails WHERE (cart_id = @cart_id) AND (food_id = @f" + "ood_id)";




                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cart_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "cart_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cart_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "cart_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT cart_id, food_id, quantity, add_datetime FROM dbo.CartDetails";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.CartDetailsDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.CartDetailsDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.CartDetailsDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.CartDetailsDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "CartDetails");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_cart_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_cart_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_food_id;
                Adapter.DeleteCommand.Parameters[2].Value = Original_quantity;
                Adapter.DeleteCommand.Parameters[3].Value = Original_add_datetime;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int cart_id, int food_id, int quantity, DateTime add_datetime)
            {
                Adapter.InsertCommand.Parameters[0].Value = cart_id;
                Adapter.InsertCommand.Parameters[1].Value = food_id;
                Adapter.InsertCommand.Parameters[2].Value = quantity;
                Adapter.InsertCommand.Parameters[3].Value = add_datetime;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int cart_id, int food_id, int quantity, DateTime add_datetime, int Original_cart_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                Adapter.UpdateCommand.Parameters[0].Value = cart_id;
                Adapter.UpdateCommand.Parameters[1].Value = food_id;
                Adapter.UpdateCommand.Parameters[2].Value = quantity;
                Adapter.UpdateCommand.Parameters[3].Value = add_datetime;
                Adapter.UpdateCommand.Parameters[4].Value = Original_cart_id;
                Adapter.UpdateCommand.Parameters[5].Value = Original_food_id;
                Adapter.UpdateCommand.Parameters[6].Value = Original_quantity;
                Adapter.UpdateCommand.Parameters[7].Value = Original_add_datetime;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int quantity, DateTime add_datetime, int Original_cart_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                return Update(Original_cart_id, Original_food_id, quantity, add_datetime, Original_cart_id, Original_food_id, Original_quantity, Original_add_datetime);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class CatergoryTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CatergoryTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Catergory";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Catergory] WHERE (([id] = @Original_id) AND ([name] = @Origina" + "l_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Catergory] ([name], [description]) VALUES (@name, @description" + ");" + '\r' + '\n' + "SELECT id, name, description FROM Catergory WHERE (id = SCOPE_IDENTITY())";
                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Catergory] SET [name] = @name, [description] = @description WHERE (" + "([id] = @Original_id) AND ([name] = @Original_name) AND ([description] = @Origin" + "al_description));" + '\r' + '\n' + "SELECT id, name, description FROM Catergory WHERE (id = @id)";

                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description FROM dbo.Catergory";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.CatergoryDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.CatergoryDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.CatergoryDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.CatergoryDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Catergory");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string name, string description)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = description;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description, int id)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = description;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_description;
                }

                Adapter.UpdateCommand.Parameters[5].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description)
            {
                return Update(name, description, Original_id, Original_name, Original_description, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class CustomerTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public CustomerTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Customer";
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                tableMapping.ColumnMappings.Add("birthday_date", "birthday_date");
                tableMapping.ColumnMappings.Add("membership_id", "membership_id");
                tableMapping.ColumnMappings.Add("wallate_amount", "wallate_amount");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customer] WHERE (([user_id] = @Original_user_id) AND ((@IsNull" + "_birthday_date = 1 AND [birthday_date] IS NULL) OR ([birthday_date] = @Original_" + "birthday_date)) AND ([membership_id] = @Original_membership_id) AND ((@IsNull_wa" + "llate_amount = 1 AND [wallate_amount] IS NULL) OR ([wallate_amount] = @Original_" + "wallate_amount)))";



                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_birthday_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_birthday_date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_membership_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "membership_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_wallate_amount", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_wallate_amount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customer] ([user_id], [birthday_date], [membership_id], [walla" + "te_amount]) VALUES (@user_id, @birthday_date, @membership_id, @wallate_amount);" + '\r' + '\n' + "SELECT user_id, birthday_date, membership_id, wallate_amount FROM Customer WHER" + "E (user_id = @user_id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@birthday_date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@membership_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "membership_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@wallate_amount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customer] SET [user_id] = @user_id, [birthday_date] = @birthday_dat" + "e, [membership_id] = @membership_id, [wallate_amount] = @wallate_amount WHERE ((" + "[user_id] = @Original_user_id) AND ((@IsNull_birthday_date = 1 AND [birthday_dat" + "e] IS NULL) OR ([birthday_date] = @Original_birthday_date)) AND ([membership_id]" + " = @Original_membership_id) AND ((@IsNull_wallate_amount = 1 AND [wallate_amount" + "] IS NULL) OR ([wallate_amount] = @Original_wallate_amount)));" + '\r' + '\n' + "SELECT user_id, " + "birthday_date, membership_id, wallate_amount FROM Customer WHERE (user_id = @use" + "r_id)";






                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@birthday_date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@membership_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "membership_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@wallate_amount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_birthday_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_birthday_date", SqlDbType.Date, 0, ParameterDirection.Input, 0, 0, "birthday_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_membership_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "membership_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_wallate_amount", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_wallate_amount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "wallate_amount", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT user_id, birthday_date, membership_id, wallate_amount FROM dbo.Customer";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.CustomerDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.CustomerDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.CustomerDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.CustomerDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Customer");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_user_id, DateTime? Original_birthday_date, int Original_membership_id, double? Original_wallate_amount)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_user_id;
                if (Original_birthday_date.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 0;
                    Adapter.DeleteCommand.Parameters[2].Value = Original_birthday_date.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 1;
                    Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
                }

                Adapter.DeleteCommand.Parameters[3].Value = Original_membership_id;
                if (Original_wallate_amount.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_wallate_amount.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int user_id, DateTime? birthday_date, int membership_id, double? wallate_amount)
            {
                Adapter.InsertCommand.Parameters[0].Value = user_id;
                if (birthday_date.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[1].Value = birthday_date.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }

                Adapter.InsertCommand.Parameters[2].Value = membership_id;
                if (wallate_amount.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[3].Value = wallate_amount.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int user_id, DateTime? birthday_date, int membership_id, double? wallate_amount, int Original_user_id, DateTime? Original_birthday_date, int Original_membership_id, double? Original_wallate_amount)
            {
                Adapter.UpdateCommand.Parameters[0].Value = user_id;
                if (birthday_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = birthday_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[2].Value = membership_id;
                if (wallate_amount.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = wallate_amount.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[4].Value = Original_user_id;
                if (Original_birthday_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = 0;
                    Adapter.UpdateCommand.Parameters[6].Value = Original_birthday_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = 1;
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[7].Value = Original_membership_id;
                if (Original_wallate_amount.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 0;
                    Adapter.UpdateCommand.Parameters[9].Value = Original_wallate_amount.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 1;
                    Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(DateTime? birthday_date, int membership_id, double? wallate_amount, int Original_user_id, DateTime? Original_birthday_date, int Original_membership_id, double? Original_wallate_amount)
            {
                return Update(Original_user_id, birthday_date, membership_id, wallate_amount, Original_user_id, Original_birthday_date, Original_membership_id, Original_wallate_amount);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class DeliveryTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Delivery";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("source", "source");
                tableMapping.ColumnMappings.Add("destination", "destination");
                tableMapping.ColumnMappings.Add("delivery_note", "delivery_note");
                tableMapping.ColumnMappings.Add("final_delivery_status", "final_delivery_status");
                tableMapping.ColumnMappings.Add("delivery_company", "delivery_company");
                tableMapping.ColumnMappings.Add("recive_dates", "recive_dates");
                tableMapping.ColumnMappings.Add("recive_prove", "recive_prove");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Delivery] WHERE (([id] = @Original_id) AND ([source] = @Origin" + "al_source) AND ([destination] = @Original_destination) AND ((@IsNull_delivery_no" + "te = 1 AND [delivery_note] IS NULL) OR ([delivery_note] = @Original_delivery_not" + "e)) AND ([final_delivery_status] = @Original_final_delivery_status) AND ([delive" + "ry_company] = @Original_delivery_company) AND ((@IsNull_recive_dates = 1 AND [re" + "cive_dates] IS NULL) OR ([recive_dates] = @Original_recive_dates)))";




                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "source", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_destination", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "destination", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_delivery_note", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_final_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "final_delivery_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_company", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_company", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_recive_dates", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_recive_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Delivery] ([id], [source], [destination], [delivery_note], [fi" + "nal_delivery_status], [delivery_company], [recive_dates], [recive_prove]) VALUES" + " (@id, @source, @destination, @delivery_note, @final_delivery_status, @delivery_" + "company, @recive_dates, @recive_prove);" + '\r' + '\n' + "SELECT id, source, destination, deliver" + "y_note, final_delivery_status, delivery_company, recive_dates, recive_prove FROM" + " Delivery WHERE (id = @id)";




                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "source", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@destination", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "destination", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@final_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "final_delivery_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_company", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_company", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@recive_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@recive_prove", SqlDbType.VarBinary, 0, ParameterDirection.Input, 0, 0, "recive_prove", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Delivery] SET [id] = @id, [source] = @source, [destination] = @dest" + "ination, [delivery_note] = @delivery_note, [final_delivery_status] = @final_deli" + "very_status, [delivery_company] = @delivery_company, [recive_dates] = @recive_da" + "tes, [recive_prove] = @recive_prove WHERE (([id] = @Original_id) AND ([source] =" + " @Original_source) AND ([destination] = @Original_destination) AND ((@IsNull_del" + "ivery_note = 1 AND [delivery_note] IS NULL) OR ([delivery_note] = @Original_deli" + "very_note)) AND ([final_delivery_status] = @Original_final_delivery_status) AND " + "([delivery_company] = @Original_delivery_company) AND ((@IsNull_recive_dates = 1" + " AND [recive_dates] IS NULL) OR ([recive_dates] = @Original_recive_dates)));" + '\r' + '\n' + "SE" + "LECT id, source, destination, delivery_note, final_delivery_status, delivery_com" + "pany, recive_dates, recive_prove FROM Delivery WHERE (id = @id)";









                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@source", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "source", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@destination", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "destination", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@final_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "final_delivery_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_company", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_company", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@recive_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@recive_prove", SqlDbType.VarBinary, 0, ParameterDirection.Input, 0, 0, "recive_prove", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_source", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "source", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_destination", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "destination", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_delivery_note", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "delivery_note", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_final_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "final_delivery_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_company", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_company", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_recive_dates", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_recive_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "recive_dates", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, source, destination, delivery_note, final_delivery_status, delivery_co" + "mpany, recive_dates, recive_prove FROM dbo.Delivery";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.DeliveryDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.DeliveryDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.DeliveryDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.DeliveryDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Delivery");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, Guid Original_source, Guid Original_destination, string Original_delivery_note, Guid Original_final_delivery_status, Guid Original_delivery_company, DateTime? Original_recive_dates)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_source;
                Adapter.DeleteCommand.Parameters[2].Value = Original_destination;
                if (Original_delivery_note is null)
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 1;
                    Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 0;
                    Adapter.DeleteCommand.Parameters[4].Value = Original_delivery_note;
                }

                Adapter.DeleteCommand.Parameters[5].Value = Original_final_delivery_status;
                Adapter.DeleteCommand.Parameters[6].Value = Original_delivery_company;
                if (Original_recive_dates.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 0;
                    Adapter.DeleteCommand.Parameters[8].Value = Original_recive_dates.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 1;
                    Adapter.DeleteCommand.Parameters[8].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, Guid source, Guid destination, string delivery_note, Guid final_delivery_status, Guid delivery_company, DateTime? recive_dates, byte[] recive_prove)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                Adapter.InsertCommand.Parameters[1].Value = source;
                Adapter.InsertCommand.Parameters[2].Value = destination;
                if (delivery_note is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = delivery_note;
                }

                Adapter.InsertCommand.Parameters[4].Value = final_delivery_status;
                Adapter.InsertCommand.Parameters[5].Value = delivery_company;
                if (recive_dates.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[6].Value = recive_dates.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }

                if (recive_prove is null)
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = recive_prove;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, Guid source, Guid destination, string delivery_note, Guid final_delivery_status, Guid delivery_company, DateTime? recive_dates, byte[] recive_prove, Guid Original_id, Guid Original_source, Guid Original_destination, string Original_delivery_note, Guid Original_final_delivery_status, Guid Original_delivery_company, DateTime? Original_recive_dates)
            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                Adapter.UpdateCommand.Parameters[1].Value = source;
                Adapter.UpdateCommand.Parameters[2].Value = destination;
                if (delivery_note is null)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = delivery_note;
                }

                Adapter.UpdateCommand.Parameters[4].Value = final_delivery_status;
                Adapter.UpdateCommand.Parameters[5].Value = delivery_company;
                if (recive_dates.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = recive_dates.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }

                if (recive_prove is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = recive_prove;
                }

                Adapter.UpdateCommand.Parameters[8].Value = Original_id;
                Adapter.UpdateCommand.Parameters[9].Value = Original_source;
                Adapter.UpdateCommand.Parameters[10].Value = Original_destination;
                if (Original_delivery_note is null)
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 1;
                    Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 0;
                    Adapter.UpdateCommand.Parameters[12].Value = Original_delivery_note;
                }

                Adapter.UpdateCommand.Parameters[13].Value = Original_final_delivery_status;
                Adapter.UpdateCommand.Parameters[14].Value = Original_delivery_company;
                if (Original_recive_dates.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 0;
                    Adapter.UpdateCommand.Parameters[16].Value = Original_recive_dates.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 1;
                    Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid source, Guid destination, string delivery_note, Guid final_delivery_status, Guid delivery_company, DateTime? recive_dates, byte[] recive_prove, Guid Original_id, Guid Original_source, Guid Original_destination, string Original_delivery_note, Guid Original_final_delivery_status, Guid Original_delivery_company, DateTime? Original_recive_dates)
            {
                return Update(Original_id, source, destination, delivery_note, final_delivery_status, delivery_company, recive_dates, recive_prove, Original_id, Original_source, Original_destination, Original_delivery_note, Original_final_delivery_status, Original_delivery_company, Original_recive_dates);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class DeliveryChainTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "DeliveryChain";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("arrival_dates", "arrival_dates");
                tableMapping.ColumnMappings.Add("address_id", "address_id");
                tableMapping.ColumnMappings.Add("delivery_status", "delivery_status");
                tableMapping.ColumnMappings.Add("notes", "notes");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DeliveryChain] WHERE (([id] = @Original_id) AND ([arrival_date" + "s] = @Original_arrival_dates) AND ([address_id] = @Original_address_id) AND ((@I" + "sNull_delivery_status = 1 AND [delivery_status] IS NULL) OR ([delivery_status] =" + " @Original_delivery_status)) AND ([notes] = @Original_notes))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arrival_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "arrival_dates", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_delivery_status", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DeliveryChain] ([id], [arrival_dates], [address_id], [delivery" + "_status], [notes]) VALUES (@id, @arrival_dates, @address_id, @delivery_status, @" + "notes);" + '\r' + '\n' + "SELECT id, arrival_dates, address_id, delivery_status, notes FROM Deliv" + "eryChain WHERE (id = @id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arrival_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "arrival_dates", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DeliveryChain] SET [id] = @id, [arrival_dates] = @arrival_dates, [a" + "ddress_id] = @address_id, [delivery_status] = @delivery_status, [notes] = @notes" + " WHERE (([id] = @Original_id) AND ([arrival_dates] = @Original_arrival_dates) AN" + "D ([address_id] = @Original_address_id) AND ((@IsNull_delivery_status = 1 AND [d" + "elivery_status] IS NULL) OR ([delivery_status] = @Original_delivery_status)) AND" + " ([notes] = @Original_notes));" + '\r' + '\n' + "SELECT id, arrival_dates, address_id, delivery_s" + "tatus, notes FROM DeliveryChain WHERE (id = @id)";





                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@arrival_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "arrival_dates", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_arrival_dates", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "arrival_dates", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_delivery_status", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, arrival_dates, address_id, delivery_status, notes FROM dbo.DeliveryCha" + "in";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.DeliveryChainDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.DeliveryChainDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.DeliveryChainDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.DeliveryChainDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "DeliveryChain");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, DateTime Original_arrival_dates, Guid Original_address_id, Guid? Original_delivery_status, string Original_notes)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_arrival_dates;
                Adapter.DeleteCommand.Parameters[2].Value = Original_address_id;
                if (Original_delivery_status.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 0;
                    Adapter.DeleteCommand.Parameters[4].Value = Original_delivery_status.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 1;
                    Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
                }

                if (Original_notes is null)
                {
                    throw new ArgumentNullException("Original_notes");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = Original_notes;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, DateTime arrival_dates, Guid address_id, Guid? delivery_status, string notes)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                Adapter.InsertCommand.Parameters[1].Value = arrival_dates;
                Adapter.InsertCommand.Parameters[2].Value = address_id;
                if (delivery_status.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[3].Value = delivery_status.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }

                if (notes is null)
                {
                    throw new ArgumentNullException("notes");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = notes;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, DateTime arrival_dates, Guid address_id, Guid? delivery_status, string notes, Guid Original_id, DateTime Original_arrival_dates, Guid Original_address_id, Guid? Original_delivery_status, string Original_notes)
            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                Adapter.UpdateCommand.Parameters[1].Value = arrival_dates;
                Adapter.UpdateCommand.Parameters[2].Value = address_id;
                if (delivery_status.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = delivery_status.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }

                if (notes is null)
                {
                    throw new ArgumentNullException("notes");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = notes;
                }

                Adapter.UpdateCommand.Parameters[5].Value = Original_id;
                Adapter.UpdateCommand.Parameters[6].Value = Original_arrival_dates;
                Adapter.UpdateCommand.Parameters[7].Value = Original_address_id;
                if (Original_delivery_status.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 0;
                    Adapter.UpdateCommand.Parameters[9].Value = Original_delivery_status.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 1;
                    Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
                }

                if (Original_notes is null)
                {
                    throw new ArgumentNullException("Original_notes");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = Original_notes;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(DateTime arrival_dates, Guid address_id, Guid? delivery_status, string notes, Guid Original_id, DateTime Original_arrival_dates, Guid Original_address_id, Guid? Original_delivery_status, string Original_notes)
            {
                return Update(Original_id, arrival_dates, address_id, delivery_status, notes, Original_id, Original_arrival_dates, Original_address_id, Original_delivery_status, Original_notes);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class DeliveryChainDetailsTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryChainDetailsTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "DeliveryChainDetails";
                tableMapping.ColumnMappings.Add("delivery_id", "delivery_id");
                tableMapping.ColumnMappings.Add("tranfer_chain_id", "tranfer_chain_id");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DeliveryChainDetails] WHERE (([delivery_id] = @Original_delive" + "ry_id) AND ([tranfer_chain_id] = @Original_tranfer_chain_id))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_tranfer_chain_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "tranfer_chain_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DeliveryChainDetails] ([delivery_id], [tranfer_chain_id]) VALU" + "ES (@delivery_id, @tranfer_chain_id);" + '\r' + '\n' + "SELECT delivery_id, tranfer_chain_id FROM" + " DeliveryChainDetails WHERE (delivery_id = @delivery_id) AND (tranfer_chain_id =" + " @tranfer_chain_id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@tranfer_chain_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "tranfer_chain_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DeliveryChainDetails] SET [delivery_id] = @delivery_id, [tranfer_ch" + "ain_id] = @tranfer_chain_id WHERE (([delivery_id] = @Original_delivery_id) AND (" + "[tranfer_chain_id] = @Original_tranfer_chain_id));" + '\r' + '\n' + "SELECT delivery_id, tranfer_" + "chain_id FROM DeliveryChainDetails WHERE (delivery_id = @delivery_id) AND (tranf" + "er_chain_id = @tranfer_chain_id)";



                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@delivery_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@tranfer_chain_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "tranfer_chain_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_delivery_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "delivery_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_tranfer_chain_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "tranfer_chain_id", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT delivery_id, tranfer_chain_id FROM dbo.DeliveryChainDetails";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.DeliveryChainDetailsDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.DeliveryChainDetailsDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.DeliveryChainDetailsDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.DeliveryChainDetailsDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "DeliveryChainDetails");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_delivery_id, Guid Original_tranfer_chain_id)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_delivery_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_tranfer_chain_id;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid delivery_id, Guid tranfer_chain_id)
            {
                Adapter.InsertCommand.Parameters[0].Value = delivery_id;
                Adapter.InsertCommand.Parameters[1].Value = tranfer_chain_id;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid delivery_id, Guid tranfer_chain_id, Guid Original_delivery_id, Guid Original_tranfer_chain_id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = delivery_id;
                Adapter.UpdateCommand.Parameters[1].Value = tranfer_chain_id;
                Adapter.UpdateCommand.Parameters[2].Value = Original_delivery_id;
                Adapter.UpdateCommand.Parameters[3].Value = Original_tranfer_chain_id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid Original_delivery_id, Guid Original_tranfer_chain_id)
            {
                return Update(Original_delivery_id, Original_tranfer_chain_id, Original_delivery_id, Original_tranfer_chain_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class DeliveryCompanyTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryCompanyTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "DeliveryCompany";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("company_name", "company_name");
                tableMapping.ColumnMappings.Add("company_phones", "company_phones");
                tableMapping.ColumnMappings.Add("description", "description");
                tableMapping.ColumnMappings.Add("rm_per_g", "rm_per_g");
                tableMapping.ColumnMappings.Add("rm_per_cm3", "rm_per_cm3");
                tableMapping.ColumnMappings.Add("gradient", "gradient");
                tableMapping.ColumnMappings.Add("prefence_country", "prefence_country");
                tableMapping.ColumnMappings.Add("oversea_support", "oversea_support");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DeliveryCompany] WHERE (([id] = @Original_id) AND ((@IsNull_co" + "mpany_name = 1 AND [company_name] IS NULL) OR ([company_name] = @Original_compan" + "y_name)) AND ((@IsNull_company_phones = 1 AND [company_phones] IS NULL) OR ([com" + "pany_phones] = @Original_company_phones)) AND ((@IsNull_description = 1 AND [des" + "cription] IS NULL) OR ([description] = @Original_description)) AND ([rm_per_g] =" + " @Original_rm_per_g) AND ([rm_per_cm3] = @Original_rm_per_cm3) AND ([gradient] =" + " @Original_gradient) AND ([prefence_country] = @Original_prefence_country) AND (" + "[oversea_support] = @Original_oversea_support))";






                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_company_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_company_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_company_phones", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_company_phones", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rm_per_g", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_g", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rm_per_cm3", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_cm3", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gradient", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "gradient", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prefence_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "prefence_country", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_oversea_support", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "oversea_support", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DeliveryCompany] ([id], [company_name], [company_phones], [des" + "cription], [rm_per_g], [rm_per_cm3], [gradient], [prefence_country], [oversea_su" + "pport]) VALUES (@id, @company_name, @company_phones, @description, @rm_per_g, @r" + "m_per_cm3, @gradient, @prefence_country, @oversea_support);" + '\r' + '\n' + "SELECT id, company_" + "name, company_phones, description, rm_per_g, rm_per_cm3, gradient, prefence_coun" + "try, oversea_support FROM DeliveryCompany WHERE (id = @id)";




                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@company_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@company_phones", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rm_per_g", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_g", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rm_per_cm3", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_cm3", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gradient", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "gradient", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prefence_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "prefence_country", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@oversea_support", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "oversea_support", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DeliveryCompany] SET [id] = @id, [company_name] = @company_name, [c" + "ompany_phones] = @company_phones, [description] = @description, [rm_per_g] = @rm" + "_per_g, [rm_per_cm3] = @rm_per_cm3, [gradient] = @gradient, [prefence_country] =" + " @prefence_country, [oversea_support] = @oversea_support WHERE (([id] = @Origina" + "l_id) AND ((@IsNull_company_name = 1 AND [company_name] IS NULL) OR ([company_na" + "me] = @Original_company_name)) AND ((@IsNull_company_phones = 1 AND [company_pho" + "nes] IS NULL) OR ([company_phones] = @Original_company_phones)) AND ((@IsNull_de" + "scription = 1 AND [description] IS NULL) OR ([description] = @Original_descripti" + "on)) AND ([rm_per_g] = @Original_rm_per_g) AND ([rm_per_cm3] = @Original_rm_per_" + "cm3) AND ([gradient] = @Original_gradient) AND ([prefence_country] = @Original_p" + "refence_country) AND ([oversea_support] = @Original_oversea_support));" + '\r' + '\n' + "SELECT i" + "d, company_name, company_phones, description, rm_per_g, rm_per_cm3, gradient, pr" + "efence_country, oversea_support FROM DeliveryCompany WHERE (id = @id)";











                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@company_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@company_phones", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rm_per_g", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_g", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@rm_per_cm3", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_cm3", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@gradient", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "gradient", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@prefence_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "prefence_country", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@oversea_support", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "oversea_support", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_company_name", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_company_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_company_phones", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_company_phones", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "company_phones", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_description", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rm_per_g", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_g", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_rm_per_cm3", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "rm_per_cm3", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_gradient", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "gradient", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_prefence_country", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "prefence_country", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_oversea_support", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "oversea_support", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, company_name, company_phones, description, rm_per_g, rm_per_cm3, gradi" + "ent, prefence_country, oversea_support FROM dbo.DeliveryCompany";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.DeliveryCompanyDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.DeliveryCompanyDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.DeliveryCompanyDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.DeliveryCompanyDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "DeliveryCompany");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, string Original_company_name, string Original_company_phones, string Original_description, double Original_rm_per_g, double Original_rm_per_cm3, double Original_gradient, string Original_prefence_country, bool Original_oversea_support)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_company_name is null)
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 1;
                    Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 0;
                    Adapter.DeleteCommand.Parameters[2].Value = Original_company_name;
                }

                if (Original_company_phones is null)
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 1;
                    Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 0;
                    Adapter.DeleteCommand.Parameters[4].Value = Original_company_phones;
                }

                if (Original_description is null)
                {
                    Adapter.DeleteCommand.Parameters[5].Value = 1;
                    Adapter.DeleteCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = 0;
                    Adapter.DeleteCommand.Parameters[6].Value = Original_description;
                }

                Adapter.DeleteCommand.Parameters[7].Value = Original_rm_per_g;
                Adapter.DeleteCommand.Parameters[8].Value = Original_rm_per_cm3;
                Adapter.DeleteCommand.Parameters[9].Value = Original_gradient;
                if (Original_prefence_country is null)
                {
                    throw new ArgumentNullException("Original_prefence_country");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[10].Value = Original_prefence_country;
                }

                Adapter.DeleteCommand.Parameters[11].Value = Original_oversea_support;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, string company_name, string company_phones, string description, double rm_per_g, double rm_per_cm3, double gradient, string prefence_country, bool oversea_support)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                if (company_name is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = company_name;
                }

                if (company_phones is null)
                {
                    Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = company_phones;
                }

                if (description is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = description;
                }

                Adapter.InsertCommand.Parameters[4].Value = rm_per_g;
                Adapter.InsertCommand.Parameters[5].Value = rm_per_cm3;
                Adapter.InsertCommand.Parameters[6].Value = gradient;
                if (prefence_country is null)
                {
                    throw new ArgumentNullException("prefence_country");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = prefence_country;
                }

                Adapter.InsertCommand.Parameters[8].Value = oversea_support;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, string company_name, string company_phones, string description, double rm_per_g, double rm_per_cm3, double gradient, string prefence_country, bool oversea_support, Guid Original_id, string Original_company_name, string Original_company_phones, string Original_description, double Original_rm_per_g, double Original_rm_per_cm3, double Original_gradient, string Original_prefence_country, bool Original_oversea_support)

















            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                if (company_name is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = company_name;
                }

                if (company_phones is null)
                {
                    Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = company_phones;
                }

                if (description is null)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = description;
                }

                Adapter.UpdateCommand.Parameters[4].Value = rm_per_g;
                Adapter.UpdateCommand.Parameters[5].Value = rm_per_cm3;
                Adapter.UpdateCommand.Parameters[6].Value = gradient;
                if (prefence_country is null)
                {
                    throw new ArgumentNullException("prefence_country");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = prefence_country;
                }

                Adapter.UpdateCommand.Parameters[8].Value = oversea_support;
                Adapter.UpdateCommand.Parameters[9].Value = Original_id;
                if (Original_company_name is null)
                {
                    Adapter.UpdateCommand.Parameters[10].Value = 1;
                    Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = 0;
                    Adapter.UpdateCommand.Parameters[11].Value = Original_company_name;
                }

                if (Original_company_phones is null)
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 1;
                    Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 0;
                    Adapter.UpdateCommand.Parameters[13].Value = Original_company_phones;
                }

                if (Original_description is null)
                {
                    Adapter.UpdateCommand.Parameters[14].Value = 1;
                    Adapter.UpdateCommand.Parameters[15].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = 0;
                    Adapter.UpdateCommand.Parameters[15].Value = Original_description;
                }

                Adapter.UpdateCommand.Parameters[16].Value = Original_rm_per_g;
                Adapter.UpdateCommand.Parameters[17].Value = Original_rm_per_cm3;
                Adapter.UpdateCommand.Parameters[18].Value = Original_gradient;
                if (Original_prefence_country is null)
                {
                    throw new ArgumentNullException("Original_prefence_country");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[19].Value = Original_prefence_country;
                }

                Adapter.UpdateCommand.Parameters[20].Value = Original_oversea_support;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string company_name, string company_phones, string description, double rm_per_g, double rm_per_cm3, double gradient, string prefence_country, bool oversea_support, Guid Original_id, string Original_company_name, string Original_company_phones, string Original_description, double Original_rm_per_g, double Original_rm_per_cm3, double Original_gradient, string Original_prefence_country, bool Original_oversea_support)
















            {
                return Update(Original_id, company_name, company_phones, description, rm_per_g, rm_per_cm3, gradient, prefence_country, oversea_support, Original_id, Original_company_name, Original_company_phones, Original_description, Original_rm_per_g, Original_rm_per_cm3, Original_gradient, Original_prefence_country, Original_oversea_support);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class DeliveryStatusTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public DeliveryStatusTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "DeliveryStatus";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DeliveryStatus] WHERE (([id] = @Original_id) AND ([name] = @Or" + "iginal_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DeliveryStatus] ([id], [name], [description]) VALUES (@id, @na" + "me, @description);" + '\r' + '\n' + "SELECT id, name, description FROM DeliveryStatus WHERE (id =" + " @id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DeliveryStatus] SET [id] = @id, [name] = @name, [description] = @de" + "scription WHERE (([id] = @Original_id) AND ([name] = @Original_name) AND ([descr" + "iption] = @Original_description));" + '\r' + '\n' + "SELECT id, name, description FROM DeliverySt" + "atus WHERE (id = @id)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description FROM dbo.DeliveryStatus";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.DeliveryStatusDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.DeliveryStatusDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.DeliveryStatusDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.DeliveryStatusDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "DeliveryStatus");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, string name, string description)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = description;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, string name, string description, Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = description;
                }

                Adapter.UpdateCommand.Parameters[3].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Original_description;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, Guid Original_id, string Original_name, string Original_description)
            {
                return Update(Original_id, name, description, Original_id, Original_name, Original_description);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class FoodTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public FoodTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Food";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("duty_staff_id", "duty_staff_id");
                tableMapping.ColumnMappings.Add("image", "image");
                tableMapping.ColumnMappings.Add("price", "price");
                tableMapping.ColumnMappings.Add("stock", "stock");
                tableMapping.ColumnMappings.Add("add_date", "add_date");
                tableMapping.ColumnMappings.Add("title", "title");
                tableMapping.ColumnMappings.Add("descriptions", "descriptions");
                tableMapping.ColumnMappings.Add("poscode", "poscode");
                tableMapping.ColumnMappings.Add("catergory_id", "catergory_id");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Food] WHERE (([id] = @Original_id) AND ([duty_staff_id] = @Ori" + "ginal_duty_staff_id) AND ([price] = @Original_price) AND ([stock] = @Original_st" + "ock) AND ([add_date] = @Original_add_date) AND ([title] = @Original_title) AND (" + "(@IsNull_descriptions = 1 AND [descriptions] IS NULL) OR ([descriptions] = @Orig" + "inal_descriptions)) AND ((@IsNull_poscode = 1 AND [poscode] IS NULL) OR ([poscod" + "e] = @Original_poscode)) AND ((@IsNull_catergory_id = 1 AND [catergory_id] IS NU" + "LL) OR ([catergory_id] = @Original_catergory_id)))";





                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_duty_staff_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "duty_staff_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_price", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "price", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stock", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "stock", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_descriptions", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_poscode", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Food] ([duty_staff_id], [image], [price], [stock], [add_date]," + " [title], [descriptions], [poscode], [catergory_id]) VALUES (@duty_staff_id, @im" + "age, @price, @stock, @add_date, @title, @descriptions, @poscode, @catergory_id);" + "" + '\r' + '\n' + "SELECT id, duty_staff_id, image, price, stock, add_date, title, descriptions, " + "poscode, catergory_id FROM Food WHERE (id = SCOPE_IDENTITY())";



                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@duty_staff_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "duty_staff_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@image", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "image", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@price", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "price", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stock", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "stock", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Food] SET [duty_staff_id] = @duty_staff_id, [image] = @image, [pric" + "e] = @price, [stock] = @stock, [add_date] = @add_date, [title] = @title, [descri" + "ptions] = @descriptions, [poscode] = @poscode, [catergory_id] = @catergory_id WH" + "ERE (([id] = @Original_id) AND ([duty_staff_id] = @Original_duty_staff_id) AND (" + "[price] = @Original_price) AND ([stock] = @Original_stock) AND ([add_date] = @Or" + "iginal_add_date) AND ([title] = @Original_title) AND ((@IsNull_descriptions = 1 " + "AND [descriptions] IS NULL) OR ([descriptions] = @Original_descriptions)) AND ((" + "@IsNull_poscode = 1 AND [poscode] IS NULL) OR ([poscode] = @Original_poscode)) A" + "ND ((@IsNull_catergory_id = 1 AND [catergory_id] IS NULL) OR ([catergory_id] = @" + "Original_catergory_id)));" + '\r' + '\n' + "SELECT id, duty_staff_id, image, price, stock, add_da" + "te, title, descriptions, poscode, catergory_id FROM Food WHERE (id = @id)";









                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@duty_staff_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "duty_staff_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@image", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "image", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@price", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "price", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@stock", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "stock", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_duty_staff_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "duty_staff_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_price", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "price", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_stock", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "stock", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_descriptions", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_poscode", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_poscode", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "poscode", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_catergory_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "catergory_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, duty_staff_id, image, price, stock, add_date, title, descriptions, pos" + "code, catergory_id FROM dbo.Food";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.FoodDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.FoodDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.FoodDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.FoodDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Food");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, int Original_duty_staff_id, double Original_price, int Original_stock, DateTime Original_add_date, string Original_title, string Original_descriptions, string Original_poscode, int? Original_catergory_id)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_duty_staff_id;
                Adapter.DeleteCommand.Parameters[2].Value = Original_price;
                Adapter.DeleteCommand.Parameters[3].Value = Original_stock;
                Adapter.DeleteCommand.Parameters[4].Value = Original_add_date;
                if (Original_title is null)
                {
                    throw new ArgumentNullException("Original_title");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = Original_title;
                }

                if (Original_descriptions is null)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_descriptions;
                }

                if (Original_poscode is null)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_poscode;
                }

                if (Original_catergory_id.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 0;
                    Adapter.DeleteCommand.Parameters[11].Value = Original_catergory_id.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 1;
                    Adapter.DeleteCommand.Parameters[11].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int duty_staff_id, byte[] image, double price, int stock, DateTime add_date, string title, string descriptions, string poscode, int? catergory_id)
            {
                Adapter.InsertCommand.Parameters[0].Value = duty_staff_id;
                if (image is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = image;
                }

                Adapter.InsertCommand.Parameters[2].Value = price;
                Adapter.InsertCommand.Parameters[3].Value = stock;
                Adapter.InsertCommand.Parameters[4].Value = add_date;
                if (title is null)
                {
                    throw new ArgumentNullException("title");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = title;
                }

                if (descriptions is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = descriptions;
                }

                if (poscode is null)
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = poscode;
                }

                if (catergory_id.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[8].Value = catergory_id.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int duty_staff_id, byte[] image, double price, int stock, DateTime add_date, string title, string descriptions, string poscode, int? catergory_id, int Original_id, int Original_duty_staff_id, double Original_price, int Original_stock, DateTime Original_add_date, string Original_title, string Original_descriptions, string Original_poscode, int? Original_catergory_id, int id)


















            {
                Adapter.UpdateCommand.Parameters[0].Value = duty_staff_id;
                if (image is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = image;
                }

                Adapter.UpdateCommand.Parameters[2].Value = price;
                Adapter.UpdateCommand.Parameters[3].Value = stock;
                Adapter.UpdateCommand.Parameters[4].Value = add_date;
                if (title is null)
                {
                    throw new ArgumentNullException("title");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = title;
                }

                if (descriptions is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = descriptions;
                }

                if (poscode is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = poscode;
                }

                if (catergory_id.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = catergory_id.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[9].Value = Original_id;
                Adapter.UpdateCommand.Parameters[10].Value = Original_duty_staff_id;
                Adapter.UpdateCommand.Parameters[11].Value = Original_price;
                Adapter.UpdateCommand.Parameters[12].Value = Original_stock;
                Adapter.UpdateCommand.Parameters[13].Value = Original_add_date;
                if (Original_title is null)
                {
                    throw new ArgumentNullException("Original_title");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = Original_title;
                }

                if (Original_descriptions is null)
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 1;
                    Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 0;
                    Adapter.UpdateCommand.Parameters[16].Value = Original_descriptions;
                }

                if (Original_poscode is null)
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 1;
                    Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 0;
                    Adapter.UpdateCommand.Parameters[18].Value = Original_poscode;
                }

                if (Original_catergory_id.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 0;
                    Adapter.UpdateCommand.Parameters[20].Value = Original_catergory_id.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[19].Value = 1;
                    Adapter.UpdateCommand.Parameters[20].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[21].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int duty_staff_id, byte[] image, double price, int stock, DateTime add_date, string title, string descriptions, string poscode, int? catergory_id, int Original_id, int Original_duty_staff_id, double Original_price, int Original_stock, DateTime Original_add_date, string Original_title, string Original_descriptions, string Original_poscode, int? Original_catergory_id)

















            {
                return Update(duty_staff_id, image, price, stock, add_date, title, descriptions, poscode, catergory_id, Original_id, Original_duty_staff_id, Original_price, Original_stock, Original_add_date, Original_title, Original_descriptions, Original_poscode, Original_catergory_id, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class MembershipTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MembershipTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Membership";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Membership] WHERE (([id] = @Original_id) AND ([name] = @Origin" + "al_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Membership] ([name], [description]) VALUES (@name, @descriptio" + "n);" + '\r' + '\n' + "SELECT id, name, description FROM Membership WHERE (id = SCOPE_IDENTITY())";
                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Membership] SET [name] = @name, [description] = @description WHERE " + "(([id] = @Original_id) AND ([name] = @Original_name) AND ([description] = @Origi" + "nal_description));" + '\r' + '\n' + "SELECT id, name, description FROM Membership WHERE (id = @id" + ")";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description FROM dbo.Membership";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.MembershipDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.MembershipDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.MembershipDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.MembershipDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Membership");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string name, string description)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = description;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description, int id)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = description;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_description;
                }

                Adapter.UpdateCommand.Parameters[5].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description)
            {
                return Update(name, description, Original_id, Original_name, Original_description, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class MenuTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Menu";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("start_date", "start_date");
                tableMapping.ColumnMappings.Add("end_date", "end_date");
                tableMapping.ColumnMappings.Add("title", "title");
                tableMapping.ColumnMappings.Add("descriptions", "descriptions");
                tableMapping.ColumnMappings.Add("enabled", "enabled");
                tableMapping.ColumnMappings.Add("menu_image", "menu_image");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Menu] WHERE (([id] = @Original_id) AND ([start_date] = @Origin" + "al_start_date) AND ([end_date] = @Original_end_date) AND ([title] = @Original_ti" + "tle) AND ((@IsNull_descriptions = 1 AND [descriptions] IS NULL) OR ([description" + "s] = @Original_descriptions)) AND ((@IsNull_enabled = 1 AND [enabled] IS NULL) O" + "R ([enabled] = @Original_enabled)))";



                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_start_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "start_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_end_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "end_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_descriptions", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enabled", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enabled", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Menu] ([start_date], [end_date], [title], [descriptions], [ena" + "bled], [menu_image]) VALUES (@start_date, @end_date, @title, @descriptions, @ena" + "bled, @menu_image);" + '\r' + '\n' + "SELECT id, start_date, end_date, title, descriptions, enabl" + "ed, menu_image FROM Menu WHERE (id = SCOPE_IDENTITY())";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "start_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "end_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enabled", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@menu_image", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "menu_image", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Menu] SET [start_date] = @start_date, [end_date] = @end_date, [titl" + "e] = @title, [descriptions] = @descriptions, [enabled] = @enabled, [menu_image] " + "= @menu_image WHERE (([id] = @Original_id) AND ([start_date] = @Original_start_d" + "ate) AND ([end_date] = @Original_end_date) AND ([title] = @Original_title) AND (" + "(@IsNull_descriptions = 1 AND [descriptions] IS NULL) OR ([descriptions] = @Orig" + "inal_descriptions)) AND ((@IsNull_enabled = 1 AND [enabled] IS NULL) OR ([enable" + "d] = @Original_enabled)));" + '\r' + '\n' + "SELECT id, start_date, end_date, title, descriptions" + ", enabled, menu_image FROM Menu WHERE (id = @id)";






                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@start_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "start_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@end_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "end_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@enabled", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@menu_image", SqlDbType.Image, 0, ParameterDirection.Input, 0, 0, "menu_image", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_start_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "start_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_end_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "end_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_title", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "title", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_descriptions", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_descriptions", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "descriptions", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_enabled", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_enabled", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "enabled", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, start_date, end_date, title, descriptions, enabled, menu_image FROM db" + "o.Menu";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.MenuDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.MenuDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.MenuDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.MenuDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Menu");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, DateTime Original_start_date, DateTime Original_end_date, string Original_title, string Original_descriptions, bool? Original_enabled)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_start_date;
                Adapter.DeleteCommand.Parameters[2].Value = Original_end_date;
                if (Original_title is null)
                {
                    throw new ArgumentNullException("Original_title");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = Original_title;
                }

                if (Original_descriptions is null)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_descriptions;
                }

                if (Original_enabled.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_enabled.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(DateTime start_date, DateTime end_date, string title, string descriptions, bool? enabled, byte[] menu_image)
            {
                Adapter.InsertCommand.Parameters[0].Value = start_date;
                Adapter.InsertCommand.Parameters[1].Value = end_date;
                if (title is null)
                {
                    throw new ArgumentNullException("title");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = title;
                }

                if (descriptions is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = descriptions;
                }

                if (enabled.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[4].Value = enabled.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
                }

                if (menu_image is null)
                {
                    Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = menu_image;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(DateTime start_date, DateTime end_date, string title, string descriptions, bool? enabled, byte[] menu_image, int Original_id, DateTime Original_start_date, DateTime Original_end_date, string Original_title, string Original_descriptions, bool? Original_enabled, int id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = start_date;
                Adapter.UpdateCommand.Parameters[1].Value = end_date;
                if (title is null)
                {
                    throw new ArgumentNullException("title");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = title;
                }

                if (descriptions is null)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = descriptions;
                }

                if (enabled.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = enabled.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
                }

                if (menu_image is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = menu_image;
                }

                Adapter.UpdateCommand.Parameters[6].Value = Original_id;
                Adapter.UpdateCommand.Parameters[7].Value = Original_start_date;
                Adapter.UpdateCommand.Parameters[8].Value = Original_end_date;
                if (Original_title is null)
                {
                    throw new ArgumentNullException("Original_title");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[9].Value = Original_title;
                }

                if (Original_descriptions is null)
                {
                    Adapter.UpdateCommand.Parameters[10].Value = 1;
                    Adapter.UpdateCommand.Parameters[11].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = 0;
                    Adapter.UpdateCommand.Parameters[11].Value = Original_descriptions;
                }

                if (Original_enabled.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 0;
                    Adapter.UpdateCommand.Parameters[13].Value = Original_enabled.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = 1;
                    Adapter.UpdateCommand.Parameters[13].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[14].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(DateTime start_date, DateTime end_date, string title, string descriptions, bool? enabled, byte[] menu_image, int Original_id, DateTime Original_start_date, DateTime Original_end_date, string Original_title, string Original_descriptions, bool? Original_enabled)
            {
                return Update(start_date, end_date, title, descriptions, enabled, menu_image, Original_id, Original_start_date, Original_end_date, Original_title, Original_descriptions, Original_enabled, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class MenuItemsTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public MenuItemsTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "MenuItems";
                tableMapping.ColumnMappings.Add("menu_id", "menu_id");
                tableMapping.ColumnMappings.Add("food_id", "food_id");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MenuItems] WHERE (([menu_id] = @Original_menu_id) AND ([food_i" + "d] = @Original_food_id))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_menu_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "menu_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MenuItems] ([menu_id], [food_id]) VALUES (@menu_id, @food_id);" + "" + '\r' + '\n' + "SELECT menu_id, food_id FROM MenuItems WHERE (food_id = @food_id) AND (menu_id" + " = @menu_id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@menu_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "menu_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MenuItems] SET [menu_id] = @menu_id, [food_id] = @food_id WHERE (([" + "menu_id] = @Original_menu_id) AND ([food_id] = @Original_food_id));" + '\r' + '\n' + "SELECT menu" + "_id, food_id FROM MenuItems WHERE (food_id = @food_id) AND (menu_id = @menu_id)";

                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@menu_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "menu_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_menu_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "menu_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT menu_id, food_id FROM dbo.MenuItems";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.MenuItemsDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.MenuItemsDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.MenuItemsDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.MenuItemsDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "MenuItems");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_menu_id, int Original_food_id)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_menu_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_food_id;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int menu_id, int food_id)
            {
                Adapter.InsertCommand.Parameters[0].Value = menu_id;
                Adapter.InsertCommand.Parameters[1].Value = food_id;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int menu_id, int food_id, int Original_menu_id, int Original_food_id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = menu_id;
                Adapter.UpdateCommand.Parameters[1].Value = food_id;
                Adapter.UpdateCommand.Parameters[2].Value = Original_menu_id;
                Adapter.UpdateCommand.Parameters[3].Value = Original_food_id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Original_menu_id, int Original_food_id)
            {
                return Update(Original_menu_id, Original_food_id, Original_menu_id, Original_food_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class OrderTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Order";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("customer_id", "customer_id");
                tableMapping.ColumnMappings.Add("order_status", "order_status");
                tableMapping.ColumnMappings.Add("datetime", "datetime");
                tableMapping.ColumnMappings.Add("customer_note", "customer_note");
                tableMapping.ColumnMappings.Add("payload", "payload");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Order] WHERE (([id] = @Original_id) AND ([customer_id] = @Orig" + "inal_customer_id) AND ((@IsNull_order_status = 1 AND [order_status] IS NULL) OR " + "([order_status] = @Original_order_status)) AND ((@IsNull_datetime = 1 AND [datet" + "ime] IS NULL) OR ([datetime] = @Original_datetime)) AND ((@IsNull_customer_note " + "= 1 AND [customer_note] IS NULL) OR ([customer_note] = @Original_customer_note))" + " AND ((@IsNull_payload = 1 AND [payload] IS NULL) OR ([payload] = @Original_payl" + "oad)))";





                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_order_status", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_order_status", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_datetime", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_customer_note", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_payload", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payload", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Order] ([customer_id], [order_status], [datetime], [customer_n" + "ote], [payload]) VALUES (@customer_id, @order_status, @datetime, @customer_note," + " @payload);" + '\r' + '\n' + "SELECT id, customer_id, order_status, datetime, customer_note, payl" + "oad FROM [Order] WHERE (id = SCOPE_IDENTITY())";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payload", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Order] SET [customer_id] = @customer_id, [order_status] = @order_st" + "atus, [datetime] = @datetime, [customer_note] = @customer_note, [payload] = @pay" + "load WHERE (([id] = @Original_id) AND ([customer_id] = @Original_customer_id) AN" + "D ((@IsNull_order_status = 1 AND [order_status] IS NULL) OR ([order_status] = @O" + "riginal_order_status)) AND ((@IsNull_datetime = 1 AND [datetime] IS NULL) OR ([d" + "atetime] = @Original_datetime)) AND ((@IsNull_customer_note = 1 AND [customer_no" + "te] IS NULL) OR ([customer_note] = @Original_customer_note)) AND ((@IsNull_paylo" + "ad = 1 AND [payload] IS NULL) OR ([payload] = @Original_payload)));" + '\r' + '\n' + "SELECT id, " + "customer_id, order_status, datetime, customer_note, payload FROM [Order] WHERE (" + "id = @id)";








                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@order_status", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payload", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_order_status", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_order_status", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "order_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_datetime", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "datetime", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_customer_note", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_note", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "customer_note", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_payload", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payload", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payload", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, customer_id, order_status, datetime, customer_note, payload FROM dbo.[" + "Order]";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.OrderDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.OrderDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.OrderDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.OrderDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Order");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, int Original_customer_id, string Original_order_status, DateTime? Original_datetime, string Original_customer_note, string Original_payload)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_customer_id;
                if (Original_order_status is null)
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 1;
                    Adapter.DeleteCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 0;
                    Adapter.DeleteCommand.Parameters[3].Value = Original_order_status;
                }

                if (Original_datetime.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_datetime.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }

                if (Original_customer_note is null)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_customer_note;
                }

                if (Original_payload is null)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_payload;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int customer_id, string order_status, DateTime? datetime, string customer_note, string payload)
            {
                Adapter.InsertCommand.Parameters[0].Value = customer_id;
                if (order_status is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = order_status;
                }

                if (datetime.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[2].Value = datetime.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
                }

                if (customer_note is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = customer_note;
                }

                if (payload is null)
                {
                    Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = payload;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int customer_id, string order_status, DateTime? datetime, string customer_note, string payload, int Original_id, int Original_customer_id, string Original_order_status, DateTime? Original_datetime, string Original_customer_note, string Original_payload, int id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = customer_id;
                if (order_status is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = order_status;
                }

                if (datetime.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[2].Value = datetime.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
                }

                if (customer_note is null)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = customer_note;
                }

                if (payload is null)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = payload;
                }

                Adapter.UpdateCommand.Parameters[5].Value = Original_id;
                Adapter.UpdateCommand.Parameters[6].Value = Original_customer_id;
                if (Original_order_status is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 1;
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 0;
                    Adapter.UpdateCommand.Parameters[8].Value = Original_order_status;
                }

                if (Original_datetime.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[9].Value = 0;
                    Adapter.UpdateCommand.Parameters[10].Value = Original_datetime.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[9].Value = 1;
                    Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
                }

                if (Original_customer_note is null)
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 1;
                    Adapter.UpdateCommand.Parameters[12].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = 0;
                    Adapter.UpdateCommand.Parameters[12].Value = Original_customer_note;
                }

                if (Original_payload is null)
                {
                    Adapter.UpdateCommand.Parameters[13].Value = 1;
                    Adapter.UpdateCommand.Parameters[14].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[13].Value = 0;
                    Adapter.UpdateCommand.Parameters[14].Value = Original_payload;
                }

                Adapter.UpdateCommand.Parameters[15].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int customer_id, string order_status, DateTime? datetime, string customer_note, string payload, int Original_id, int Original_customer_id, string Original_order_status, DateTime? Original_datetime, string Original_customer_note, string Original_payload)
            {
                return Update(customer_id, order_status, datetime, customer_note, payload, Original_id, Original_customer_id, Original_order_status, Original_datetime, Original_customer_note, Original_payload, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class OrderDetailsTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public OrderDetailsTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "OrderDetails";
                tableMapping.ColumnMappings.Add("order_id", "order_id");
                tableMapping.ColumnMappings.Add("food_id", "food_id");
                tableMapping.ColumnMappings.Add("quantity", "quantity");
                tableMapping.ColumnMappings.Add("add_datetime", "add_datetime");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[OrderDetails] WHERE (([order_id] = @Original_order_id) AND ([f" + "ood_id] = @Original_food_id) AND ([quantity] = @Original_quantity) AND ([add_dat" + "etime] = @Original_add_datetime))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_order_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[OrderDetails] ([order_id], [food_id], [quantity], [add_datetim" + "e]) VALUES (@order_id, @food_id, @quantity, @add_datetime);" + '\r' + '\n' + "SELECT order_id, fo" + "od_id, quantity, add_datetime FROM OrderDetails WHERE (food_id = @food_id) AND (" + "order_id = @order_id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@order_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[OrderDetails] SET [order_id] = @order_id, [food_id] = @food_id, [qu" + "antity] = @quantity, [add_datetime] = @add_datetime WHERE (([order_id] = @Origin" + "al_order_id) AND ([food_id] = @Original_food_id) AND ([quantity] = @Original_qua" + "ntity) AND ([add_datetime] = @Original_add_datetime));" + '\r' + '\n' + "SELECT order_id, food_id" + ", quantity, add_datetime FROM OrderDetails WHERE (food_id = @food_id) AND (order" + "_id = @order_id)";




                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@order_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_order_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "order_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_datetime", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT order_id, food_id, quantity, add_datetime FROM dbo.OrderDetails";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.OrderDetailsDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.OrderDetailsDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.OrderDetailsDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.OrderDetailsDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "OrderDetails");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_order_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_order_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_food_id;
                Adapter.DeleteCommand.Parameters[2].Value = Original_quantity;
                Adapter.DeleteCommand.Parameters[3].Value = Original_add_datetime;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int order_id, int food_id, int quantity, DateTime add_datetime)
            {
                Adapter.InsertCommand.Parameters[0].Value = order_id;
                Adapter.InsertCommand.Parameters[1].Value = food_id;
                Adapter.InsertCommand.Parameters[2].Value = quantity;
                Adapter.InsertCommand.Parameters[3].Value = add_datetime;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int order_id, int food_id, int quantity, DateTime add_datetime, int Original_order_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                Adapter.UpdateCommand.Parameters[0].Value = order_id;
                Adapter.UpdateCommand.Parameters[1].Value = food_id;
                Adapter.UpdateCommand.Parameters[2].Value = quantity;
                Adapter.UpdateCommand.Parameters[3].Value = add_datetime;
                Adapter.UpdateCommand.Parameters[4].Value = Original_order_id;
                Adapter.UpdateCommand.Parameters[5].Value = Original_food_id;
                Adapter.UpdateCommand.Parameters[6].Value = Original_quantity;
                Adapter.UpdateCommand.Parameters[7].Value = Original_add_datetime;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int quantity, DateTime add_datetime, int Original_order_id, int Original_food_id, int Original_quantity, DateTime Original_add_datetime)
            {
                return Update(Original_order_id, Original_food_id, quantity, add_datetime, Original_order_id, Original_food_id, Original_quantity, Original_add_datetime);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class PaymentTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Payment";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("payment_method", "payment_method");
                tableMapping.ColumnMappings.Add("payment_status", "payment_status");
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                tableMapping.ColumnMappings.Add("tax_change", "tax_change");
                tableMapping.ColumnMappings.Add("net_pay", "net_pay");
                tableMapping.ColumnMappings.Add("discount", "discount");
                tableMapping.ColumnMappings.Add("total_pay", "total_pay");
                tableMapping.ColumnMappings.Add("customer_paid", "customer_paid");
                tableMapping.ColumnMappings.Add("payment_date", "payment_date");
                tableMapping.ColumnMappings.Add("payment_meta", "payment_meta");
                tableMapping.ColumnMappings.Add("notes", "notes");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Payment] WHERE (([id] = @Original_id) AND ([payment_method] = " + "@Original_payment_method) AND ([payment_status] = @Original_payment_status) AND " + "([user_id] = @Original_user_id) AND ((@IsNull_tax_change = 1 AND [tax_change] IS" + " NULL) OR ([tax_change] = @Original_tax_change)) AND ((@IsNull_net_pay = 1 AND [" + "net_pay] IS NULL) OR ([net_pay] = @Original_net_pay)) AND ((@IsNull_discount = 1" + " AND [discount] IS NULL) OR ([discount] = @Original_discount)) AND ((@IsNull_tot" + "al_pay = 1 AND [total_pay] IS NULL) OR ([total_pay] = @Original_total_pay)) AND " + "((@IsNull_customer_paid = 1 AND [customer_paid] IS NULL) OR ([customer_paid] = @" + "Original_customer_paid)) AND ((@IsNull_payment_date = 1 AND [payment_date] IS NU" + "LL) OR ([payment_date] = @Original_payment_date)) AND ([notes] = @Original_notes" + "))";









                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_method", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_method", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_tax_change", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_tax_change", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_net_pay", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_net_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_discount", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_discount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_total_pay", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_total_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_customer_paid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_paid", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_payment_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Payment] ([id], [payment_method], [payment_status], [user_id]," + " [tax_change], [net_pay], [discount], [total_pay], [customer_paid], [payment_dat" + "e], [payment_meta], [notes]) VALUES (@id, @payment_method, @payment_status, @use" + "r_id, @tax_change, @net_pay, @discount, @total_pay, @customer_paid, @payment_dat" + "e, @payment_meta, @notes);" + '\r' + '\n' + "SELECT id, payment_method, payment_status, user_id, " + "tax_change, net_pay, discount, total_pay, customer_paid, payment_date, payment_m" + "eta, notes FROM Payment WHERE (id = @id)";





                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_method", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_method", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@tax_change", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@net_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@discount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@total_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_paid", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_meta", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payment_meta", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Payment] SET [id] = @id, [payment_method] = @payment_method, [payme" + "nt_status] = @payment_status, [user_id] = @user_id, [tax_change] = @tax_change, " + "[net_pay] = @net_pay, [discount] = @discount, [total_pay] = @total_pay, [custome" + "r_paid] = @customer_paid, [payment_date] = @payment_date, [payment_meta] = @paym" + "ent_meta, [notes] = @notes WHERE (([id] = @Original_id) AND ([payment_method] = " + "@Original_payment_method) AND ([payment_status] = @Original_payment_status) AND " + "([user_id] = @Original_user_id) AND ((@IsNull_tax_change = 1 AND [tax_change] IS" + " NULL) OR ([tax_change] = @Original_tax_change)) AND ((@IsNull_net_pay = 1 AND [" + "net_pay] IS NULL) OR ([net_pay] = @Original_net_pay)) AND ((@IsNull_discount = 1" + " AND [discount] IS NULL) OR ([discount] = @Original_discount)) AND ((@IsNull_tot" + "al_pay = 1 AND [total_pay] IS NULL) OR ([total_pay] = @Original_total_pay)) AND " + "((@IsNull_customer_paid = 1 AND [customer_paid] IS NULL) OR ([customer_paid] = @" + "Original_customer_paid)) AND ((@IsNull_payment_date = 1 AND [payment_date] IS NU" + "LL) OR ([payment_date] = @Original_payment_date)) AND ([notes] = @Original_notes" + "));" + '\r' + '\n' + "SELECT id, payment_method, payment_status, user_id, tax_change, net_pay, di" + "scount, total_pay, customer_paid, payment_date, payment_meta, notes FROM Payment" + " WHERE (id = @id)";















                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_method", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_method", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_status", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@tax_change", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@net_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@discount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@total_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@customer_paid", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_meta", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "payment_meta", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_method", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_method", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_status", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_status", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_tax_change", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_tax_change", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "tax_change", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_net_pay", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_net_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "net_pay", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_discount", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_discount", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "discount", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_total_pay", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_total_pay", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "total_pay", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_customer_paid", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_customer_paid", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "customer_paid", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_payment_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "payment_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_notes", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "notes", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, payment_method, payment_status, user_id, tax_change, net_pay, discount" + ", total_pay, customer_paid, payment_date, payment_meta, notes FROM dbo.Payment";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.PaymentDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.PaymentDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.PaymentDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.PaymentDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Payment");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, Guid Original_payment_method, Guid Original_payment_status, int Original_user_id, double? Original_tax_change, double? Original_net_pay, double? Original_discount, double? Original_total_pay, double? Original_customer_paid, DateTime? Original_payment_date, string Original_notes)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_payment_method;
                Adapter.DeleteCommand.Parameters[2].Value = Original_payment_status;
                Adapter.DeleteCommand.Parameters[3].Value = Original_user_id;
                if (Original_tax_change.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_tax_change.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }

                if (Original_net_pay.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_net_pay.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }

                if (Original_discount.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_discount.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }

                if (Original_total_pay.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 0;
                    Adapter.DeleteCommand.Parameters[11].Value = Original_total_pay.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[10].Value = 1;
                    Adapter.DeleteCommand.Parameters[11].Value = DBNull.Value;
                }

                if (Original_customer_paid.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[12].Value = 0;
                    Adapter.DeleteCommand.Parameters[13].Value = Original_customer_paid.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[12].Value = 1;
                    Adapter.DeleteCommand.Parameters[13].Value = DBNull.Value;
                }

                if (Original_payment_date.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[14].Value = 0;
                    Adapter.DeleteCommand.Parameters[15].Value = Original_payment_date.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[14].Value = 1;
                    Adapter.DeleteCommand.Parameters[15].Value = DBNull.Value;
                }

                if (Original_notes is null)
                {
                    throw new ArgumentNullException("Original_notes");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[16].Value = Original_notes;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, Guid payment_method, Guid payment_status, int user_id, double? tax_change, double? net_pay, double? discount, double? total_pay, double? customer_paid, DateTime? payment_date, string payment_meta, string notes)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                Adapter.InsertCommand.Parameters[1].Value = payment_method;
                Adapter.InsertCommand.Parameters[2].Value = payment_status;
                Adapter.InsertCommand.Parameters[3].Value = user_id;
                if (tax_change.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[4].Value = tax_change.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = DBNull.Value;
                }

                if (net_pay.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[5].Value = net_pay.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
                }

                if (discount.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[6].Value = discount.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }

                if (total_pay.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[7].Value = total_pay.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }

                if (customer_paid.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[8].Value = customer_paid.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[8].Value = DBNull.Value;
                }

                if (payment_date.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[9].Value = payment_date.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[9].Value = DBNull.Value;
                }

                if (payment_meta is null)
                {
                    throw new ArgumentNullException("payment_meta");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[10].Value = payment_meta;
                }

                if (notes is null)
                {
                    throw new ArgumentNullException("notes");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[11].Value = notes;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, Guid payment_method, Guid payment_status, int user_id, double? tax_change, double? net_pay, double? discount, double? total_pay, double? customer_paid, DateTime? payment_date, string payment_meta, string notes, Guid Original_id, Guid Original_payment_method, Guid Original_payment_status, int Original_user_id, double? Original_tax_change, double? Original_net_pay, double? Original_discount, double? Original_total_pay, double? Original_customer_paid, DateTime? Original_payment_date, string Original_notes)






















            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                Adapter.UpdateCommand.Parameters[1].Value = payment_method;
                Adapter.UpdateCommand.Parameters[2].Value = payment_status;
                Adapter.UpdateCommand.Parameters[3].Value = user_id;
                if (tax_change.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = tax_change.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = DBNull.Value;
                }

                if (net_pay.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = net_pay.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }

                if (discount.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = discount.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }

                if (total_pay.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = total_pay.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }

                if (customer_paid.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = customer_paid.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }

                if (payment_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[9].Value = payment_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
                }

                if (payment_meta is null)
                {
                    throw new ArgumentNullException("payment_meta");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = payment_meta;
                }

                if (notes is null)
                {
                    throw new ArgumentNullException("notes");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = notes;
                }

                Adapter.UpdateCommand.Parameters[12].Value = Original_id;
                Adapter.UpdateCommand.Parameters[13].Value = Original_payment_method;
                Adapter.UpdateCommand.Parameters[14].Value = Original_payment_status;
                Adapter.UpdateCommand.Parameters[15].Value = Original_user_id;
                if (Original_tax_change.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[16].Value = 0;
                    Adapter.UpdateCommand.Parameters[17].Value = Original_tax_change.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[16].Value = 1;
                    Adapter.UpdateCommand.Parameters[17].Value = DBNull.Value;
                }

                if (Original_net_pay.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[18].Value = 0;
                    Adapter.UpdateCommand.Parameters[19].Value = Original_net_pay.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[18].Value = 1;
                    Adapter.UpdateCommand.Parameters[19].Value = DBNull.Value;
                }

                if (Original_discount.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[20].Value = 0;
                    Adapter.UpdateCommand.Parameters[21].Value = Original_discount.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[20].Value = 1;
                    Adapter.UpdateCommand.Parameters[21].Value = DBNull.Value;
                }

                if (Original_total_pay.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[22].Value = 0;
                    Adapter.UpdateCommand.Parameters[23].Value = Original_total_pay.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[22].Value = 1;
                    Adapter.UpdateCommand.Parameters[23].Value = DBNull.Value;
                }

                if (Original_customer_paid.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[24].Value = 0;
                    Adapter.UpdateCommand.Parameters[25].Value = Original_customer_paid.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[24].Value = 1;
                    Adapter.UpdateCommand.Parameters[25].Value = DBNull.Value;
                }

                if (Original_payment_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[26].Value = 0;
                    Adapter.UpdateCommand.Parameters[27].Value = Original_payment_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[26].Value = 1;
                    Adapter.UpdateCommand.Parameters[27].Value = DBNull.Value;
                }

                if (Original_notes is null)
                {
                    throw new ArgumentNullException("Original_notes");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[28].Value = Original_notes;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid payment_method, Guid payment_status, int user_id, double? tax_change, double? net_pay, double? discount, double? total_pay, double? customer_paid, DateTime? payment_date, string payment_meta, string notes, Guid Original_id, Guid Original_payment_method, Guid Original_payment_status, int Original_user_id, double? Original_tax_change, double? Original_net_pay, double? Original_discount, double? Original_total_pay, double? Original_customer_paid, DateTime? Original_payment_date, string Original_notes)





















            {
                return Update(Original_id, payment_method, payment_status, user_id, tax_change, net_pay, discount, total_pay, customer_paid, payment_date, payment_meta, notes, Original_id, Original_payment_method, Original_payment_status, Original_user_id, Original_tax_change, Original_net_pay, Original_discount, Original_total_pay, Original_customer_paid, Original_payment_date, Original_notes);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class PaymentDetailsTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentDetailsTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "PaymentDetails";
                tableMapping.ColumnMappings.Add("payment_id", "payment_id");
                tableMapping.ColumnMappings.Add("food_id", "food_id");
                tableMapping.ColumnMappings.Add("quantity", "quantity");
                tableMapping.ColumnMappings.Add("add_date", "add_date");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PaymentDetails] WHERE (([payment_id] = @Original_payment_id) A" + "ND ([food_id] = @Original_food_id) AND ((@IsNull_quantity = 1 AND [quantity] IS " + "NULL) OR ([quantity] = @Original_quantity)) AND ((@IsNull_add_date = 1 AND [add_" + "date] IS NULL) OR ([add_date] = @Original_add_date)))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_add_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PaymentDetails] ([payment_id], [food_id], [quantity], [add_dat" + "e]) VALUES (@payment_id, @food_id, @quantity, @add_date);" + '\r' + '\n' + "SELECT payment_id, fo" + "od_id, quantity, add_date FROM PaymentDetails WHERE (food_id = @food_id) AND (pa" + "yment_id = @payment_id)";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PaymentDetails] SET [payment_id] = @payment_id, [food_id] = @food_i" + "d, [quantity] = @quantity, [add_date] = @add_date WHERE (([payment_id] = @Origin" + "al_payment_id) AND ([food_id] = @Original_food_id) AND ((@IsNull_quantity = 1 AN" + "D [quantity] IS NULL) OR ([quantity] = @Original_quantity)) AND ((@IsNull_add_da" + "te = 1 AND [add_date] IS NULL) OR ([add_date] = @Original_add_date)));" + '\r' + '\n' + "SELECT p" + "ayment_id, food_id, quantity, add_date FROM PaymentDetails WHERE (food_id = @foo" + "d_id) AND (payment_id = @payment_id)";





                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@payment_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_payment_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "payment_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_food_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "food_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_quantity", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "quantity", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_add_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_add_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "add_date", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT payment_id, food_id, quantity, add_date FROM dbo.PaymentDetails";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.PaymentDetailsDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.PaymentDetailsDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.PaymentDetailsDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.PaymentDetailsDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "PaymentDetails");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_payment_id, int Original_food_id, int? Original_quantity, DateTime? Original_add_date)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_payment_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_food_id;
                if (Original_quantity.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 0;
                    Adapter.DeleteCommand.Parameters[3].Value = Original_quantity.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 1;
                    Adapter.DeleteCommand.Parameters[3].Value = DBNull.Value;
                }

                if (Original_add_date.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_add_date.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid payment_id, int food_id, int? quantity, DateTime? add_date)
            {
                Adapter.InsertCommand.Parameters[0].Value = payment_id;
                Adapter.InsertCommand.Parameters[1].Value = food_id;
                if (quantity.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[2].Value = quantity.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
                }

                if (add_date.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[3].Value = add_date.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid payment_id, int food_id, int? quantity, DateTime? add_date, Guid Original_payment_id, int Original_food_id, int? Original_quantity, DateTime? Original_add_date)
            {
                Adapter.UpdateCommand.Parameters[0].Value = payment_id;
                Adapter.UpdateCommand.Parameters[1].Value = food_id;
                if (quantity.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[2].Value = quantity.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
                }

                if (add_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = add_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[4].Value = Original_payment_id;
                Adapter.UpdateCommand.Parameters[5].Value = Original_food_id;
                if (Original_quantity.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = 0;
                    Adapter.UpdateCommand.Parameters[7].Value = Original_quantity.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = 1;
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }

                if (Original_add_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 0;
                    Adapter.UpdateCommand.Parameters[9].Value = Original_add_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = 1;
                    Adapter.UpdateCommand.Parameters[9].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int? quantity, DateTime? add_date, Guid Original_payment_id, int Original_food_id, int? Original_quantity, DateTime? Original_add_date)
            {
                return Update(Original_payment_id, Original_food_id, quantity, add_date, Original_payment_id, Original_food_id, Original_quantity, Original_add_date);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class PaymentMethodTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentMethodTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "PaymentMethod";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                tableMapping.ColumnMappings.Add("meta_field", "meta_field");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PaymentMethod] WHERE (([id] = @Original_id) AND ([name] = @Ori" + "ginal_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PaymentMethod] ([id], [name], [description], [meta_field]) VAL" + "UES (@id, @name, @description, @meta_field);" + '\r' + '\n' + "SELECT id, name, description, meta" + "_field FROM PaymentMethod WHERE (id = @id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@meta_field", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "meta_field", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PaymentMethod] SET [id] = @id, [name] = @name, [description] = @des" + "cription, [meta_field] = @meta_field WHERE (([id] = @Original_id) AND ([name] = " + "@Original_name) AND ([description] = @Original_description));" + '\r' + '\n' + "SELECT id, name, " + "description, meta_field FROM PaymentMethod WHERE (id = @id)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@meta_field", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "meta_field", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description, meta_field FROM dbo.PaymentMethod";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.PaymentMethodDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.PaymentMethodDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.PaymentMethodDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.PaymentMethodDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "PaymentMethod");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, string name, string description, string meta_field)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = description;
                }

                if (meta_field is null)
                {
                    throw new ArgumentNullException("meta_field");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = meta_field;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, string name, string description, string meta_field, Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = description;
                }

                if (meta_field is null)
                {
                    throw new ArgumentNullException("meta_field");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = meta_field;
                }

                Adapter.UpdateCommand.Parameters[4].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = Original_description;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, string meta_field, Guid Original_id, string Original_name, string Original_description)
            {
                return Update(Original_id, name, description, meta_field, Original_id, Original_name, Original_description);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class PaymentStatusTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PaymentStatusTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "PaymentStatus";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PaymentStatus] WHERE (([id] = @Original_id) AND ([name] = @Ori" + "ginal_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PaymentStatus] ([id], [name], [description]) VALUES (@id, @nam" + "e, @description);" + '\r' + '\n' + "SELECT id, name, description FROM PaymentStatus WHERE (id = @" + "id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PaymentStatus] SET [id] = @id, [name] = @name, [description] = @des" + "cription WHERE (([id] = @Original_id) AND ([name] = @Original_name) AND ([descri" + "ption] = @Original_description));" + '\r' + '\n' + "SELECT id, name, description FROM PaymentStat" + "us WHERE (id = @id)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description FROM dbo.PaymentStatus";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.PaymentStatusDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.PaymentStatusDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.PaymentStatusDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.PaymentStatusDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "PaymentStatus");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(Guid id, string name, string description)
            {
                Adapter.InsertCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = description;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(Guid id, string name, string description, Guid Original_id, string Original_name, string Original_description)
            {
                Adapter.UpdateCommand.Parameters[0].Value = id;
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = description;
                }

                Adapter.UpdateCommand.Parameters[3].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Original_description;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, Guid Original_id, string Original_name, string Original_description)
            {
                return Update(Original_id, name, description, Original_id, Original_name, Original_description);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class PositionTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public PositionTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Position";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("name", "name");
                tableMapping.ColumnMappings.Add("description", "description");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Position] WHERE (([id] = @Original_id) AND ([name] = @Original" + "_name) AND ([description] = @Original_description))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Position] ([name], [description]) VALUES (@name, @description)" + ";" + '\r' + '\n' + "SELECT id, name, description FROM Position WHERE (id = SCOPE_IDENTITY())";
                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Position] SET [name] = @name, [description] = @description WHERE ((" + "[id] = @Original_id) AND ([name] = @Original_name) AND ([description] = @Origina" + "l_description));" + '\r' + '\n' + "SELECT id, name, description FROM Position WHERE (id = @id)";

                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "name", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_description", SqlDbType.NVarChar, 0, ParameterDirection.Input, 0, 0, "description", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, name, description FROM dbo.Position";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.PositionDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.PositionDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.PositionDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.PositionDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Position");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, string Original_name, string Original_description)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_description;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string name, string description)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = description;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description, int id)
            {
                if (name is null)
                {
                    throw new ArgumentNullException("name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = name;
                }

                if (description is null)
                {
                    throw new ArgumentNullException("description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = description;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_id;
                if (Original_name is null)
                {
                    throw new ArgumentNullException("Original_name");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = Original_name;
                }

                if (Original_description is null)
                {
                    throw new ArgumentNullException("Original_description");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_description;
                }

                Adapter.UpdateCommand.Parameters[5].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string name, string description, int Original_id, string Original_name, string Original_description)
            {
                return Update(name, description, Original_id, Original_name, Original_description, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class ResetPasswordTokenTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public ResetPasswordTokenTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "ResetPasswordToken";
                tableMapping.ColumnMappings.Add("id", "id");
                tableMapping.ColumnMappings.Add("key", "key");
                tableMapping.ColumnMappings.Add("exp_date", "exp_date");
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ResetPasswordToken] WHERE (([id] = @Original_id) AND ((@IsNull" + "_key = 1 AND [key] IS NULL) OR ([key] = @Original_key)) AND ((@IsNull_exp_date =" + " 1 AND [exp_date] IS NULL) OR ([exp_date] = @Original_exp_date)) AND ([user_id] " + "= @Original_user_id))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_key", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_key", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exp_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exp_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ResetPasswordToken] ([key], [exp_date], [user_id]) VALUES (@ke" + "y, @exp_date, @user_id);" + '\r' + '\n' + "SELECT id, [key], exp_date, user_id FROM ResetPassword" + "Token WHERE (id = SCOPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@key", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exp_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ResetPasswordToken] SET [key] = @key, [exp_date] = @exp_date, [user" + "_id] = @user_id WHERE (([id] = @Original_id) AND ((@IsNull_key = 1 AND [key] IS " + "NULL) OR ([key] = @Original_key)) AND ((@IsNull_exp_date = 1 AND [exp_date] IS N" + "ULL) OR ([exp_date] = @Original_exp_date)) AND ([user_id] = @Original_user_id));" + "" + '\r' + '\n' + "SELECT id, [key], exp_date, user_id FROM ResetPasswordToken WHERE (id = @id)";



                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@key", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@exp_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_key", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_key", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "key", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_exp_date", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_exp_date", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "exp_date", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "id", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT id, [key], exp_date, user_id FROM dbo.ResetPasswordToken";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.ResetPasswordTokenDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.ResetPasswordTokenDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.ResetPasswordTokenDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.ResetPasswordTokenDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "ResetPasswordToken");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_id, string Original_key, DateTime? Original_exp_date, int Original_user_id)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_id;
                if (Original_key is null)
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 1;
                    Adapter.DeleteCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = 0;
                    Adapter.DeleteCommand.Parameters[2].Value = Original_key;
                }

                if (Original_exp_date.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 0;
                    Adapter.DeleteCommand.Parameters[4].Value = Original_exp_date.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 1;
                    Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
                }

                Adapter.DeleteCommand.Parameters[5].Value = Original_user_id;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string key, DateTime? exp_date, int user_id)
            {
                if (key is null)
                {
                    Adapter.InsertCommand.Parameters[0].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = key;
                }

                if (exp_date.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[1].Value = exp_date.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }

                Adapter.InsertCommand.Parameters[2].Value = user_id;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string key, DateTime? exp_date, int user_id, int Original_id, string Original_key, DateTime? Original_exp_date, int Original_user_id, int id)
            {
                if (key is null)
                {
                    Adapter.UpdateCommand.Parameters[0].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = key;
                }

                if (exp_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = exp_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[2].Value = user_id;
                Adapter.UpdateCommand.Parameters[3].Value = Original_id;
                if (Original_key is null)
                {
                    Adapter.UpdateCommand.Parameters[4].Value = 1;
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = 0;
                    Adapter.UpdateCommand.Parameters[5].Value = Original_key;
                }

                if (Original_exp_date.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = 0;
                    Adapter.UpdateCommand.Parameters[7].Value = Original_exp_date.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = 1;
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[8].Value = Original_user_id;
                Adapter.UpdateCommand.Parameters[9].Value = id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string key, DateTime? exp_date, int user_id, int Original_id, string Original_key, DateTime? Original_exp_date, int Original_user_id)
            {
                return Update(key, exp_date, user_id, Original_id, Original_key, Original_exp_date, Original_user_id, Original_id);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class StaffTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public StaffTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Staff";
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                tableMapping.ColumnMappings.Add("priority", "priority");
                tableMapping.ColumnMappings.Add("position_id", "position_id");
                tableMapping.ColumnMappings.Add("salary", "salary");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Staff] WHERE (([user_id] = @Original_user_id) AND ([priority] " + "= @Original_priority) AND ([position_id] = @Original_position_id) AND ((@IsNull_" + "salary = 1 AND [salary] IS NULL) OR ([salary] = @Original_salary)))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_priority", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "priority", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_position_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "position_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_salary", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_salary", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Staff] ([user_id], [priority], [position_id], [salary]) VALUES" + " (@user_id, @priority, @position_id, @salary);" + '\r' + '\n' + "SELECT user_id, priority, positi" + "on_id, salary FROM Staff WHERE (user_id = @user_id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "priority", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@position_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "position_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@salary", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Staff] SET [user_id] = @user_id, [priority] = @priority, [position_" + "id] = @position_id, [salary] = @salary WHERE (([user_id] = @Original_user_id) AN" + "D ([priority] = @Original_priority) AND ([position_id] = @Original_position_id) " + "AND ((@IsNull_salary = 1 AND [salary] IS NULL) OR ([salary] = @Original_salary))" + ");" + '\r' + '\n' + "SELECT user_id, priority, position_id, salary FROM Staff WHERE (user_id = @u" + "ser_id)";




                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@priority", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "priority", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@position_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "position_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@salary", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_priority", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "priority", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_position_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "position_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_salary", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_salary", SqlDbType.Float, 0, ParameterDirection.Input, 0, 0, "salary", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT user_id, priority, position_id, salary FROM dbo.Staff";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.StaffDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.StaffDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.StaffDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.StaffDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "Staff");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_user_id, int Original_priority, int Original_position_id, double? Original_salary)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_user_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_priority;
                Adapter.DeleteCommand.Parameters[2].Value = Original_position_id;
                if (Original_salary.HasValue == true)
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 0;
                    Adapter.DeleteCommand.Parameters[4].Value = Original_salary.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = 1;
                    Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int user_id, int priority, int position_id, double? salary)
            {
                Adapter.InsertCommand.Parameters[0].Value = user_id;
                Adapter.InsertCommand.Parameters[1].Value = priority;
                Adapter.InsertCommand.Parameters[2].Value = position_id;
                if (salary.HasValue == true)
                {
                    Adapter.InsertCommand.Parameters[3].Value = salary.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int user_id, int priority, int position_id, double? salary, int Original_user_id, int Original_priority, int Original_position_id, double? Original_salary)
            {
                Adapter.UpdateCommand.Parameters[0].Value = user_id;
                Adapter.UpdateCommand.Parameters[1].Value = priority;
                Adapter.UpdateCommand.Parameters[2].Value = position_id;
                if (salary.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[3].Value = salary.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = DBNull.Value;
                }

                Adapter.UpdateCommand.Parameters[4].Value = Original_user_id;
                Adapter.UpdateCommand.Parameters[5].Value = Original_priority;
                Adapter.UpdateCommand.Parameters[6].Value = Original_position_id;
                if (Original_salary.HasValue == true)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 0;
                    Adapter.UpdateCommand.Parameters[8].Value = Original_salary.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 1;
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }

                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int priority, int position_id, double? salary, int Original_user_id, int Original_priority, int Original_position_id, double? Original_salary)
            {
                return Update(Original_user_id, priority, position_id, salary, Original_user_id, Original_priority, Original_position_id, Original_salary);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class UserAddressTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UserAddressTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "UserAddress";
                tableMapping.ColumnMappings.Add("user_id", "user_id");
                tableMapping.ColumnMappings.Add("address_id", "address_id");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[UserAddress] WHERE (([user_id] = @Original_user_id) AND ([addr" + "ess_id] = @Original_address_id))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[UserAddress] ([user_id], [address_id]) VALUES (@user_id, @addr" + "ess_id);" + '\r' + '\n' + "SELECT user_id, address_id FROM UserAddress WHERE (address_id = @addre" + "ss_id) AND (user_id = @user_id)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[UserAddress] SET [user_id] = @user_id, [address_id] = @address_id W" + "HERE (([user_id] = @Original_user_id) AND ([address_id] = @Original_address_id))" + ";" + '\r' + '\n' + "SELECT user_id, address_id FROM UserAddress WHERE (address_id = @address_id) " + "AND (user_id = @user_id)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_user_id", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "user_id", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_address_id", SqlDbType.UniqueIdentifier, 0, ParameterDirection.Input, 0, 0, "address_id", DataRowVersion.Original, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.FoodShopConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT user_id, address_id FROM dbo.UserAddress";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(FoodShopDataSet.UserAddressDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual FoodShopDataSet.UserAddressDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new FoodShopDataSet.UserAddressDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet.UserAddressDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(FoodShopDataSet dataSet)
            {
                return Adapter.Update(dataSet, "UserAddress");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_user_id, Guid Original_address_id)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_user_id;
                Adapter.DeleteCommand.Parameters[1].Value = Original_address_id;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int user_id, Guid address_id)
            {
                Adapter.InsertCommand.Parameters[0].Value = user_id;
                Adapter.InsertCommand.Parameters[1].Value = address_id;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int user_id, Guid address_id, int Original_user_id, Guid Original_address_id)
            {
                Adapter.UpdateCommand.Parameters[0].Value = user_id;
                Adapter.UpdateCommand.Parameters[1].Value = address_id;
                Adapter.UpdateCommand.Parameters[2].Value = Original_user_id;
                Adapter.UpdateCommand.Parameters[3].Value = Original_address_id;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Original_user_id, Guid Original_address_id)
            {
                return Update(Original_user_id, Original_address_id, Original_user_id, Original_address_id);
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {
            private UpdateOrderOption _updateOrder;
            private AddressTableAdapter _addressTableAdapter;
            private UsersTableAdapter _usersTableAdapter;
            private CartTableAdapter _cartTableAdapter;
            private CartDetailsTableAdapter _cartDetailsTableAdapter;
            private CatergoryTableAdapter _catergoryTableAdapter;
            private CustomerTableAdapter _customerTableAdapter;
            private DeliveryTableAdapter _deliveryTableAdapter;
            private DeliveryChainTableAdapter _deliveryChainTableAdapter;
            private DeliveryChainDetailsTableAdapter _deliveryChainDetailsTableAdapter;
            private DeliveryCompanyTableAdapter _deliveryCompanyTableAdapter;
            private DeliveryStatusTableAdapter _deliveryStatusTableAdapter;
            private FoodTableAdapter _foodTableAdapter;
            private MembershipTableAdapter _membershipTableAdapter;
            private MenuTableAdapter _menuTableAdapter;
            private MenuItemsTableAdapter _menuItemsTableAdapter;
            private OrderTableAdapter _orderTableAdapter;
            private OrderDetailsTableAdapter _orderDetailsTableAdapter;
            private PaymentTableAdapter _paymentTableAdapter;
            private PaymentDetailsTableAdapter _paymentDetailsTableAdapter;
            private PaymentMethodTableAdapter _paymentMethodTableAdapter;
            private PaymentStatusTableAdapter _paymentStatusTableAdapter;
            private PositionTableAdapter _positionTableAdapter;
            private ResetPasswordTokenTableAdapter _resetPasswordTokenTableAdapter;
            private StaffTableAdapter _staffTableAdapter;
            private UserAddressTableAdapter _userAddressTableAdapter;
            private bool _backupDataSetBeforeUpdate;
            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }

                set
                {
                    _updateOrder = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public AddressTableAdapter AddressTableAdapter
            {
                get
                {
                    return _addressTableAdapter;
                }

                set
                {
                    _addressTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public UsersTableAdapter UsersTableAdapter
            {
                get
                {
                    return _usersTableAdapter;
                }

                set
                {
                    _usersTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public CartTableAdapter CartTableAdapter
            {
                get
                {
                    return _cartTableAdapter;
                }

                set
                {
                    _cartTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public CartDetailsTableAdapter CartDetailsTableAdapter
            {
                get
                {
                    return _cartDetailsTableAdapter;
                }

                set
                {
                    _cartDetailsTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public CatergoryTableAdapter CatergoryTableAdapter
            {
                get
                {
                    return _catergoryTableAdapter;
                }

                set
                {
                    _catergoryTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public CustomerTableAdapter CustomerTableAdapter
            {
                get
                {
                    return _customerTableAdapter;
                }

                set
                {
                    _customerTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public DeliveryTableAdapter DeliveryTableAdapter
            {
                get
                {
                    return _deliveryTableAdapter;
                }

                set
                {
                    _deliveryTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public DeliveryChainTableAdapter DeliveryChainTableAdapter
            {
                get
                {
                    return _deliveryChainTableAdapter;
                }

                set
                {
                    _deliveryChainTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public DeliveryChainDetailsTableAdapter DeliveryChainDetailsTableAdapter
            {
                get
                {
                    return _deliveryChainDetailsTableAdapter;
                }

                set
                {
                    _deliveryChainDetailsTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public DeliveryCompanyTableAdapter DeliveryCompanyTableAdapter
            {
                get
                {
                    return _deliveryCompanyTableAdapter;
                }

                set
                {
                    _deliveryCompanyTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public DeliveryStatusTableAdapter DeliveryStatusTableAdapter
            {
                get
                {
                    return _deliveryStatusTableAdapter;
                }

                set
                {
                    _deliveryStatusTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public FoodTableAdapter FoodTableAdapter
            {
                get
                {
                    return _foodTableAdapter;
                }

                set
                {
                    _foodTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public MembershipTableAdapter MembershipTableAdapter
            {
                get
                {
                    return _membershipTableAdapter;
                }

                set
                {
                    _membershipTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public MenuTableAdapter MenuTableAdapter
            {
                get
                {
                    return _menuTableAdapter;
                }

                set
                {
                    _menuTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public MenuItemsTableAdapter MenuItemsTableAdapter
            {
                get
                {
                    return _menuItemsTableAdapter;
                }

                set
                {
                    _menuItemsTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public OrderTableAdapter OrderTableAdapter
            {
                get
                {
                    return _orderTableAdapter;
                }

                set
                {
                    _orderTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public OrderDetailsTableAdapter OrderDetailsTableAdapter
            {
                get
                {
                    return _orderDetailsTableAdapter;
                }

                set
                {
                    _orderDetailsTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public PaymentTableAdapter PaymentTableAdapter
            {
                get
                {
                    return _paymentTableAdapter;
                }

                set
                {
                    _paymentTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public PaymentDetailsTableAdapter PaymentDetailsTableAdapter
            {
                get
                {
                    return _paymentDetailsTableAdapter;
                }

                set
                {
                    _paymentDetailsTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public PaymentMethodTableAdapter PaymentMethodTableAdapter
            {
                get
                {
                    return _paymentMethodTableAdapter;
                }

                set
                {
                    _paymentMethodTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public PaymentStatusTableAdapter PaymentStatusTableAdapter
            {
                get
                {
                    return _paymentStatusTableAdapter;
                }

                set
                {
                    _paymentStatusTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public PositionTableAdapter PositionTableAdapter
            {
                get
                {
                    return _positionTableAdapter;
                }

                set
                {
                    _positionTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public ResetPasswordTokenTableAdapter ResetPasswordTokenTableAdapter
            {
                get
                {
                    return _resetPasswordTokenTableAdapter;
                }

                set
                {
                    _resetPasswordTokenTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public StaffTableAdapter StaffTableAdapter
            {
                get
                {
                    return _staffTableAdapter;
                }

                set
                {
                    _staffTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public UserAddressTableAdapter UserAddressTableAdapter
            {
                get
                {
                    return _userAddressTableAdapter;
                }

                set
                {
                    _userAddressTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }

                set
                {
                    _backupDataSetBeforeUpdate = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is object)
                    {
                        return _connection;
                    }

                    if (_addressTableAdapter is object && _addressTableAdapter.Connection is object)
                    {
                        return _addressTableAdapter.Connection;
                    }

                    if (_usersTableAdapter is object && _usersTableAdapter.Connection is object)
                    {
                        return _usersTableAdapter.Connection;
                    }

                    if (_cartTableAdapter is object && _cartTableAdapter.Connection is object)
                    {
                        return _cartTableAdapter.Connection;
                    }

                    if (_cartDetailsTableAdapter is object && _cartDetailsTableAdapter.Connection is object)
                    {
                        return _cartDetailsTableAdapter.Connection;
                    }

                    if (_catergoryTableAdapter is object && _catergoryTableAdapter.Connection is object)
                    {
                        return _catergoryTableAdapter.Connection;
                    }

                    if (_customerTableAdapter is object && _customerTableAdapter.Connection is object)
                    {
                        return _customerTableAdapter.Connection;
                    }

                    if (_deliveryTableAdapter is object && _deliveryTableAdapter.Connection is object)
                    {
                        return _deliveryTableAdapter.Connection;
                    }

                    if (_deliveryChainTableAdapter is object && _deliveryChainTableAdapter.Connection is object)
                    {
                        return _deliveryChainTableAdapter.Connection;
                    }

                    if (_deliveryChainDetailsTableAdapter is object && _deliveryChainDetailsTableAdapter.Connection is object)
                    {
                        return _deliveryChainDetailsTableAdapter.Connection;
                    }

                    if (_deliveryCompanyTableAdapter is object && _deliveryCompanyTableAdapter.Connection is object)
                    {
                        return _deliveryCompanyTableAdapter.Connection;
                    }

                    if (_deliveryStatusTableAdapter is object && _deliveryStatusTableAdapter.Connection is object)
                    {
                        return _deliveryStatusTableAdapter.Connection;
                    }

                    if (_foodTableAdapter is object && _foodTableAdapter.Connection is object)
                    {
                        return _foodTableAdapter.Connection;
                    }

                    if (_membershipTableAdapter is object && _membershipTableAdapter.Connection is object)
                    {
                        return _membershipTableAdapter.Connection;
                    }

                    if (_menuTableAdapter is object && _menuTableAdapter.Connection is object)
                    {
                        return _menuTableAdapter.Connection;
                    }

                    if (_menuItemsTableAdapter is object && _menuItemsTableAdapter.Connection is object)
                    {
                        return _menuItemsTableAdapter.Connection;
                    }

                    if (_orderTableAdapter is object && _orderTableAdapter.Connection is object)
                    {
                        return _orderTableAdapter.Connection;
                    }

                    if (_orderDetailsTableAdapter is object && _orderDetailsTableAdapter.Connection is object)
                    {
                        return _orderDetailsTableAdapter.Connection;
                    }

                    if (_paymentTableAdapter is object && _paymentTableAdapter.Connection is object)
                    {
                        return _paymentTableAdapter.Connection;
                    }

                    if (_paymentDetailsTableAdapter is object && _paymentDetailsTableAdapter.Connection is object)
                    {
                        return _paymentDetailsTableAdapter.Connection;
                    }

                    if (_paymentMethodTableAdapter is object && _paymentMethodTableAdapter.Connection is object)
                    {
                        return _paymentMethodTableAdapter.Connection;
                    }

                    if (_paymentStatusTableAdapter is object && _paymentStatusTableAdapter.Connection is object)
                    {
                        return _paymentStatusTableAdapter.Connection;
                    }

                    if (_positionTableAdapter is object && _positionTableAdapter.Connection is object)
                    {
                        return _positionTableAdapter.Connection;
                    }

                    if (_resetPasswordTokenTableAdapter is object && _resetPasswordTokenTableAdapter.Connection is object)
                    {
                        return _resetPasswordTokenTableAdapter.Connection;
                    }

                    if (_staffTableAdapter is object && _staffTableAdapter.Connection is object)
                    {
                        return _staffTableAdapter.Connection;
                    }

                    if (_userAddressTableAdapter is object && _userAddressTableAdapter.Connection is object)
                    {
                        return _userAddressTableAdapter.Connection;
                    }

                    return null;
                }

                set
                {
                    _connection = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_addressTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_usersTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_cartTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_cartDetailsTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_catergoryTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_customerTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_deliveryTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_deliveryChainTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_deliveryChainDetailsTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_deliveryCompanyTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_deliveryStatusTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_foodTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_membershipTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_menuTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_menuItemsTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_orderTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_orderDetailsTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_paymentTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_paymentDetailsTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_paymentMethodTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_paymentStatusTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_positionTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_resetPasswordTokenTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_staffTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_userAddressTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateUpdatedRows(FoodShopDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_addressTableAdapter is object)
                {
                    var updatedRows = dataSet.Address.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _addressTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_usersTableAdapter is object)
                {
                    var updatedRows = dataSet.Users.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _usersTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_paymentStatusTableAdapter is object)
                {
                    var updatedRows = dataSet.PaymentStatus.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _paymentStatusTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_catergoryTableAdapter is object)
                {
                    var updatedRows = dataSet.Catergory.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _catergoryTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_paymentMethodTableAdapter is object)
                {
                    var updatedRows = dataSet.PaymentMethod.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _paymentMethodTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_deliveryCompanyTableAdapter is object)
                {
                    var updatedRows = dataSet.DeliveryCompany.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _deliveryCompanyTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_deliveryStatusTableAdapter is object)
                {
                    var updatedRows = dataSet.DeliveryStatus.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _deliveryStatusTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_positionTableAdapter is object)
                {
                    var updatedRows = dataSet.Position.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _positionTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_paymentTableAdapter is object)
                {
                    var updatedRows = dataSet.Payment.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _paymentTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_orderTableAdapter is object)
                {
                    var updatedRows = dataSet.Order.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _orderTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_menuTableAdapter is object)
                {
                    var updatedRows = dataSet.Menu.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _menuTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_membershipTableAdapter is object)
                {
                    var updatedRows = dataSet.Membership.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _membershipTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_deliveryChainTableAdapter is object)
                {
                    var updatedRows = dataSet.DeliveryChain.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _deliveryChainTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_deliveryTableAdapter is object)
                {
                    var updatedRows = dataSet.Delivery.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _deliveryTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_cartTableAdapter is object)
                {
                    var updatedRows = dataSet.Cart.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _cartTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_foodTableAdapter is object)
                {
                    var updatedRows = dataSet.Food.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _foodTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_staffTableAdapter is object)
                {
                    var updatedRows = dataSet.Staff.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _staffTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_deliveryChainDetailsTableAdapter is object)
                {
                    var updatedRows = dataSet.DeliveryChainDetails.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _deliveryChainDetailsTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_menuItemsTableAdapter is object)
                {
                    var updatedRows = dataSet.MenuItems.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _menuItemsTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_orderDetailsTableAdapter is object)
                {
                    var updatedRows = dataSet.OrderDetails.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _orderDetailsTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_paymentDetailsTableAdapter is object)
                {
                    var updatedRows = dataSet.PaymentDetails.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _paymentDetailsTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_customerTableAdapter is object)
                {
                    var updatedRows = dataSet.Customer.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _customerTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_cartDetailsTableAdapter is object)
                {
                    var updatedRows = dataSet.CartDetails.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _cartDetailsTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_resetPasswordTokenTableAdapter is object)
                {
                    var updatedRows = dataSet.ResetPasswordToken.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _resetPasswordTokenTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_userAddressTableAdapter is object)
                {
                    var updatedRows = dataSet.UserAddress.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _userAddressTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateInsertedRows(FoodShopDataSet dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_addressTableAdapter is object)
                {
                    var addedRows = dataSet.Address.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _addressTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_usersTableAdapter is object)
                {
                    var addedRows = dataSet.Users.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _usersTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_paymentStatusTableAdapter is object)
                {
                    var addedRows = dataSet.PaymentStatus.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _paymentStatusTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_catergoryTableAdapter is object)
                {
                    var addedRows = dataSet.Catergory.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _catergoryTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_paymentMethodTableAdapter is object)
                {
                    var addedRows = dataSet.PaymentMethod.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _paymentMethodTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_deliveryCompanyTableAdapter is object)
                {
                    var addedRows = dataSet.DeliveryCompany.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _deliveryCompanyTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_deliveryStatusTableAdapter is object)
                {
                    var addedRows = dataSet.DeliveryStatus.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _deliveryStatusTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_positionTableAdapter is object)
                {
                    var addedRows = dataSet.Position.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _positionTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_paymentTableAdapter is object)
                {
                    var addedRows = dataSet.Payment.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _paymentTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_orderTableAdapter is object)
                {
                    var addedRows = dataSet.Order.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _orderTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_menuTableAdapter is object)
                {
                    var addedRows = dataSet.Menu.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _menuTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_membershipTableAdapter is object)
                {
                    var addedRows = dataSet.Membership.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _membershipTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_deliveryChainTableAdapter is object)
                {
                    var addedRows = dataSet.DeliveryChain.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _deliveryChainTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_deliveryTableAdapter is object)
                {
                    var addedRows = dataSet.Delivery.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _deliveryTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_cartTableAdapter is object)
                {
                    var addedRows = dataSet.Cart.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _cartTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_foodTableAdapter is object)
                {
                    var addedRows = dataSet.Food.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _foodTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_staffTableAdapter is object)
                {
                    var addedRows = dataSet.Staff.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _staffTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_deliveryChainDetailsTableAdapter is object)
                {
                    var addedRows = dataSet.DeliveryChainDetails.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _deliveryChainDetailsTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_menuItemsTableAdapter is object)
                {
                    var addedRows = dataSet.MenuItems.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _menuItemsTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_orderDetailsTableAdapter is object)
                {
                    var addedRows = dataSet.OrderDetails.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _orderDetailsTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_paymentDetailsTableAdapter is object)
                {
                    var addedRows = dataSet.PaymentDetails.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _paymentDetailsTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_customerTableAdapter is object)
                {
                    var addedRows = dataSet.Customer.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _customerTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_cartDetailsTableAdapter is object)
                {
                    var addedRows = dataSet.CartDetails.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _cartDetailsTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_resetPasswordTokenTableAdapter is object)
                {
                    var addedRows = dataSet.ResetPasswordToken.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _resetPasswordTokenTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_userAddressTableAdapter is object)
                {
                    var addedRows = dataSet.UserAddress.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _userAddressTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private int UpdateDeletedRows(FoodShopDataSet dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_userAddressTableAdapter is object)
                {
                    var deletedRows = dataSet.UserAddress.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _userAddressTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_resetPasswordTokenTableAdapter is object)
                {
                    var deletedRows = dataSet.ResetPasswordToken.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _resetPasswordTokenTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_cartDetailsTableAdapter is object)
                {
                    var deletedRows = dataSet.CartDetails.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _cartDetailsTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_customerTableAdapter is object)
                {
                    var deletedRows = dataSet.Customer.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _customerTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_paymentDetailsTableAdapter is object)
                {
                    var deletedRows = dataSet.PaymentDetails.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _paymentDetailsTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_orderDetailsTableAdapter is object)
                {
                    var deletedRows = dataSet.OrderDetails.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _orderDetailsTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_menuItemsTableAdapter is object)
                {
                    var deletedRows = dataSet.MenuItems.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _menuItemsTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_deliveryChainDetailsTableAdapter is object)
                {
                    var deletedRows = dataSet.DeliveryChainDetails.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _deliveryChainDetailsTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_staffTableAdapter is object)
                {
                    var deletedRows = dataSet.Staff.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _staffTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_foodTableAdapter is object)
                {
                    var deletedRows = dataSet.Food.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _foodTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_cartTableAdapter is object)
                {
                    var deletedRows = dataSet.Cart.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _cartTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_deliveryTableAdapter is object)
                {
                    var deletedRows = dataSet.Delivery.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _deliveryTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_deliveryChainTableAdapter is object)
                {
                    var deletedRows = dataSet.DeliveryChain.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _deliveryChainTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_membershipTableAdapter is object)
                {
                    var deletedRows = dataSet.Membership.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _membershipTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_menuTableAdapter is object)
                {
                    var deletedRows = dataSet.Menu.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _menuTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_orderTableAdapter is object)
                {
                    var deletedRows = dataSet.Order.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _orderTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_paymentTableAdapter is object)
                {
                    var deletedRows = dataSet.Payment.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _paymentTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_positionTableAdapter is object)
                {
                    var deletedRows = dataSet.Position.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _positionTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_deliveryStatusTableAdapter is object)
                {
                    var deletedRows = dataSet.DeliveryStatus.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _deliveryStatusTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_deliveryCompanyTableAdapter is object)
                {
                    var deletedRows = dataSet.DeliveryCompany.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _deliveryCompanyTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_paymentMethodTableAdapter is object)
                {
                    var deletedRows = dataSet.PaymentMethod.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _paymentMethodTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_catergoryTableAdapter is object)
                {
                    var deletedRows = dataSet.Catergory.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _catergoryTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_paymentStatusTableAdapter is object)
                {
                    var deletedRows = dataSet.PaymentStatus.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _paymentStatusTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_usersTableAdapter is object)
                {
                    var deletedRows = dataSet.Users.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _usersTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_addressTableAdapter is object)
                {
                    var deletedRows = dataSet.Address.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _addressTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null || updatedRows.Length < 1)
                {
                    return updatedRows;
                }

                if (allAddedRows is null || allAddedRows.Count < 1)
                {
                    return updatedRows;
                }

                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i < updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row) == false)
                    {
                        realUpdatedRows.Add(row);
                    }

                    i = i + 1;
                }

                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public virtual int UpdateAll(FoodShopDataSet dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }

                if (dataSet.HasChanges() == false)
                {
                    return 0;
                }

                if (_addressTableAdapter is object && MatchTableAdapterConnection(_addressTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_usersTableAdapter is object && MatchTableAdapterConnection(_usersTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_cartTableAdapter is object && MatchTableAdapterConnection(_cartTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_cartDetailsTableAdapter is object && MatchTableAdapterConnection(_cartDetailsTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_catergoryTableAdapter is object && MatchTableAdapterConnection(_catergoryTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_customerTableAdapter is object && MatchTableAdapterConnection(_customerTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_deliveryTableAdapter is object && MatchTableAdapterConnection(_deliveryTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_deliveryChainTableAdapter is object && MatchTableAdapterConnection(_deliveryChainTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_deliveryChainDetailsTableAdapter is object && MatchTableAdapterConnection(_deliveryChainDetailsTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_deliveryCompanyTableAdapter is object && MatchTableAdapterConnection(_deliveryCompanyTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_deliveryStatusTableAdapter is object && MatchTableAdapterConnection(_deliveryStatusTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_foodTableAdapter is object && MatchTableAdapterConnection(_foodTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_membershipTableAdapter is object && MatchTableAdapterConnection(_membershipTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_menuTableAdapter is object && MatchTableAdapterConnection(_menuTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_menuItemsTableAdapter is object && MatchTableAdapterConnection(_menuItemsTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_orderTableAdapter is object && MatchTableAdapterConnection(_orderTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_orderDetailsTableAdapter is object && MatchTableAdapterConnection(_orderDetailsTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_paymentTableAdapter is object && MatchTableAdapterConnection(_paymentTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_paymentDetailsTableAdapter is object && MatchTableAdapterConnection(_paymentDetailsTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_paymentMethodTableAdapter is object && MatchTableAdapterConnection(_paymentMethodTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_paymentStatusTableAdapter is object && MatchTableAdapterConnection(_paymentStatusTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_positionTableAdapter is object && MatchTableAdapterConnection(_positionTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_resetPasswordTokenTableAdapter is object && MatchTableAdapterConnection(_resetPasswordTokenTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_staffTableAdapter is object && MatchTableAdapterConnection(_staffTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                if (_userAddressTableAdapter is object && MatchTableAdapterConnection(_userAddressTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
                }

                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" + "ger TableAdapter property to a valid TableAdapter instance.");
                }

                bool workConnOpened = false;
                if ((workConnection.State & ConnectionState.Broken) == ConnectionState.Broken)
                {
                    workConnection.Close();
                }

                if (workConnection.State == ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened = true;
                }

                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa" + "ctions or the current state is not allowing the transaction to begin.");
                }

                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet = new DataSet();
                    backupDataSet.Merge(dataSet);
                }

                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_addressTableAdapter is object)
                    {
                        revertConnections.Add(_addressTableAdapter, _addressTableAdapter.Connection);
                        _addressTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _addressTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_addressTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _addressTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_addressTableAdapter.Adapter);
                        }
                    }

                    if (_usersTableAdapter is object)
                    {
                        revertConnections.Add(_usersTableAdapter, _usersTableAdapter.Connection);
                        _usersTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _usersTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_usersTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _usersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_usersTableAdapter.Adapter);
                        }
                    }

                    if (_cartTableAdapter is object)
                    {
                        revertConnections.Add(_cartTableAdapter, _cartTableAdapter.Connection);
                        _cartTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _cartTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_cartTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _cartTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_cartTableAdapter.Adapter);
                        }
                    }

                    if (_cartDetailsTableAdapter is object)
                    {
                        revertConnections.Add(_cartDetailsTableAdapter, _cartDetailsTableAdapter.Connection);
                        _cartDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _cartDetailsTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_cartDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _cartDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_cartDetailsTableAdapter.Adapter);
                        }
                    }

                    if (_catergoryTableAdapter is object)
                    {
                        revertConnections.Add(_catergoryTableAdapter, _catergoryTableAdapter.Connection);
                        _catergoryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _catergoryTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_catergoryTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _catergoryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_catergoryTableAdapter.Adapter);
                        }
                    }

                    if (_customerTableAdapter is object)
                    {
                        revertConnections.Add(_customerTableAdapter, _customerTableAdapter.Connection);
                        _customerTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _customerTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_customerTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _customerTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_customerTableAdapter.Adapter);
                        }
                    }

                    if (_deliveryTableAdapter is object)
                    {
                        revertConnections.Add(_deliveryTableAdapter, _deliveryTableAdapter.Connection);
                        _deliveryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _deliveryTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_deliveryTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _deliveryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_deliveryTableAdapter.Adapter);
                        }
                    }

                    if (_deliveryChainTableAdapter is object)
                    {
                        revertConnections.Add(_deliveryChainTableAdapter, _deliveryChainTableAdapter.Connection);
                        _deliveryChainTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _deliveryChainTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_deliveryChainTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _deliveryChainTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_deliveryChainTableAdapter.Adapter);
                        }
                    }

                    if (_deliveryChainDetailsTableAdapter is object)
                    {
                        revertConnections.Add(_deliveryChainDetailsTableAdapter, _deliveryChainDetailsTableAdapter.Connection);
                        _deliveryChainDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _deliveryChainDetailsTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_deliveryChainDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _deliveryChainDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_deliveryChainDetailsTableAdapter.Adapter);
                        }
                    }

                    if (_deliveryCompanyTableAdapter is object)
                    {
                        revertConnections.Add(_deliveryCompanyTableAdapter, _deliveryCompanyTableAdapter.Connection);
                        _deliveryCompanyTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _deliveryCompanyTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_deliveryCompanyTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _deliveryCompanyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_deliveryCompanyTableAdapter.Adapter);
                        }
                    }

                    if (_deliveryStatusTableAdapter is object)
                    {
                        revertConnections.Add(_deliveryStatusTableAdapter, _deliveryStatusTableAdapter.Connection);
                        _deliveryStatusTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _deliveryStatusTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_deliveryStatusTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _deliveryStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_deliveryStatusTableAdapter.Adapter);
                        }
                    }

                    if (_foodTableAdapter is object)
                    {
                        revertConnections.Add(_foodTableAdapter, _foodTableAdapter.Connection);
                        _foodTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _foodTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_foodTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _foodTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_foodTableAdapter.Adapter);
                        }
                    }

                    if (_membershipTableAdapter is object)
                    {
                        revertConnections.Add(_membershipTableAdapter, _membershipTableAdapter.Connection);
                        _membershipTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _membershipTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_membershipTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _membershipTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_membershipTableAdapter.Adapter);
                        }
                    }

                    if (_menuTableAdapter is object)
                    {
                        revertConnections.Add(_menuTableAdapter, _menuTableAdapter.Connection);
                        _menuTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _menuTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_menuTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _menuTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_menuTableAdapter.Adapter);
                        }
                    }

                    if (_menuItemsTableAdapter is object)
                    {
                        revertConnections.Add(_menuItemsTableAdapter, _menuItemsTableAdapter.Connection);
                        _menuItemsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _menuItemsTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_menuItemsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _menuItemsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_menuItemsTableAdapter.Adapter);
                        }
                    }

                    if (_orderTableAdapter is object)
                    {
                        revertConnections.Add(_orderTableAdapter, _orderTableAdapter.Connection);
                        _orderTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _orderTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_orderTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _orderTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_orderTableAdapter.Adapter);
                        }
                    }

                    if (_orderDetailsTableAdapter is object)
                    {
                        revertConnections.Add(_orderDetailsTableAdapter, _orderDetailsTableAdapter.Connection);
                        _orderDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _orderDetailsTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_orderDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _orderDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_orderDetailsTableAdapter.Adapter);
                        }
                    }

                    if (_paymentTableAdapter is object)
                    {
                        revertConnections.Add(_paymentTableAdapter, _paymentTableAdapter.Connection);
                        _paymentTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _paymentTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_paymentTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _paymentTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_paymentTableAdapter.Adapter);
                        }
                    }

                    if (_paymentDetailsTableAdapter is object)
                    {
                        revertConnections.Add(_paymentDetailsTableAdapter, _paymentDetailsTableAdapter.Connection);
                        _paymentDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _paymentDetailsTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_paymentDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _paymentDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_paymentDetailsTableAdapter.Adapter);
                        }
                    }

                    if (_paymentMethodTableAdapter is object)
                    {
                        revertConnections.Add(_paymentMethodTableAdapter, _paymentMethodTableAdapter.Connection);
                        _paymentMethodTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _paymentMethodTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_paymentMethodTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _paymentMethodTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_paymentMethodTableAdapter.Adapter);
                        }
                    }

                    if (_paymentStatusTableAdapter is object)
                    {
                        revertConnections.Add(_paymentStatusTableAdapter, _paymentStatusTableAdapter.Connection);
                        _paymentStatusTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _paymentStatusTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_paymentStatusTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _paymentStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_paymentStatusTableAdapter.Adapter);
                        }
                    }

                    if (_positionTableAdapter is object)
                    {
                        revertConnections.Add(_positionTableAdapter, _positionTableAdapter.Connection);
                        _positionTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _positionTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_positionTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _positionTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_positionTableAdapter.Adapter);
                        }
                    }

                    if (_resetPasswordTokenTableAdapter is object)
                    {
                        revertConnections.Add(_resetPasswordTokenTableAdapter, _resetPasswordTokenTableAdapter.Connection);
                        _resetPasswordTokenTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _resetPasswordTokenTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_resetPasswordTokenTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _resetPasswordTokenTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_resetPasswordTokenTableAdapter.Adapter);
                        }
                    }

                    if (_staffTableAdapter is object)
                    {
                        revertConnections.Add(_staffTableAdapter, _staffTableAdapter.Connection);
                        _staffTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _staffTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_staffTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _staffTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_staffTableAdapter.Adapter);
                        }
                    }

                    if (_userAddressTableAdapter is object)
                    {
                        revertConnections.Add(_userAddressTableAdapter, _userAddressTableAdapter.Connection);
                        _userAddressTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _userAddressTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_userAddressTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _userAddressTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_userAddressTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
                    {
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }

                    result = result + UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }

                    if (0 < allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is object);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i = i + 1;
                        }
                    }

                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }

                    if (_addressTableAdapter is object)
                    {
                        _addressTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_addressTableAdapter];
                        _addressTableAdapter.Transaction = null;
                    }

                    if (_usersTableAdapter is object)
                    {
                        _usersTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_usersTableAdapter];
                        _usersTableAdapter.Transaction = null;
                    }

                    if (_cartTableAdapter is object)
                    {
                        _cartTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_cartTableAdapter];
                        _cartTableAdapter.Transaction = null;
                    }

                    if (_cartDetailsTableAdapter is object)
                    {
                        _cartDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_cartDetailsTableAdapter];
                        _cartDetailsTableAdapter.Transaction = null;
                    }

                    if (_catergoryTableAdapter is object)
                    {
                        _catergoryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_catergoryTableAdapter];
                        _catergoryTableAdapter.Transaction = null;
                    }

                    if (_customerTableAdapter is object)
                    {
                        _customerTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_customerTableAdapter];
                        _customerTableAdapter.Transaction = null;
                    }

                    if (_deliveryTableAdapter is object)
                    {
                        _deliveryTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_deliveryTableAdapter];
                        _deliveryTableAdapter.Transaction = null;
                    }

                    if (_deliveryChainTableAdapter is object)
                    {
                        _deliveryChainTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_deliveryChainTableAdapter];
                        _deliveryChainTableAdapter.Transaction = null;
                    }

                    if (_deliveryChainDetailsTableAdapter is object)
                    {
                        _deliveryChainDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_deliveryChainDetailsTableAdapter];
                        _deliveryChainDetailsTableAdapter.Transaction = null;
                    }

                    if (_deliveryCompanyTableAdapter is object)
                    {
                        _deliveryCompanyTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_deliveryCompanyTableAdapter];
                        _deliveryCompanyTableAdapter.Transaction = null;
                    }

                    if (_deliveryStatusTableAdapter is object)
                    {
                        _deliveryStatusTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_deliveryStatusTableAdapter];
                        _deliveryStatusTableAdapter.Transaction = null;
                    }

                    if (_foodTableAdapter is object)
                    {
                        _foodTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_foodTableAdapter];
                        _foodTableAdapter.Transaction = null;
                    }

                    if (_membershipTableAdapter is object)
                    {
                        _membershipTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_membershipTableAdapter];
                        _membershipTableAdapter.Transaction = null;
                    }

                    if (_menuTableAdapter is object)
                    {
                        _menuTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_menuTableAdapter];
                        _menuTableAdapter.Transaction = null;
                    }

                    if (_menuItemsTableAdapter is object)
                    {
                        _menuItemsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_menuItemsTableAdapter];
                        _menuItemsTableAdapter.Transaction = null;
                    }

                    if (_orderTableAdapter is object)
                    {
                        _orderTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_orderTableAdapter];
                        _orderTableAdapter.Transaction = null;
                    }

                    if (_orderDetailsTableAdapter is object)
                    {
                        _orderDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_orderDetailsTableAdapter];
                        _orderDetailsTableAdapter.Transaction = null;
                    }

                    if (_paymentTableAdapter is object)
                    {
                        _paymentTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_paymentTableAdapter];
                        _paymentTableAdapter.Transaction = null;
                    }

                    if (_paymentDetailsTableAdapter is object)
                    {
                        _paymentDetailsTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_paymentDetailsTableAdapter];
                        _paymentDetailsTableAdapter.Transaction = null;
                    }

                    if (_paymentMethodTableAdapter is object)
                    {
                        _paymentMethodTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_paymentMethodTableAdapter];
                        _paymentMethodTableAdapter.Transaction = null;
                    }

                    if (_paymentStatusTableAdapter is object)
                    {
                        _paymentStatusTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_paymentStatusTableAdapter];
                        _paymentStatusTableAdapter.Transaction = null;
                    }

                    if (_positionTableAdapter is object)
                    {
                        _positionTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_positionTableAdapter];
                        _positionTableAdapter.Transaction = null;
                    }

                    if (_resetPasswordTokenTableAdapter is object)
                    {
                        _resetPasswordTokenTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_resetPasswordTokenTableAdapter];
                        _resetPasswordTokenTableAdapter.Transaction = null;
                    }

                    if (_staffTableAdapter is object)
                    {
                        _staffTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_staffTableAdapter];
                        _staffTableAdapter.Transaction = null;
                    }

                    if (_userAddressTableAdapter is object)
                    {
                        _userAddressTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_userAddressTableAdapter];
                        _userAddressTableAdapter.Transaction = null;
                    }

                    if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i < adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate = true;
                            i = i + 1;
                        }
                    }
                }

                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is object)
                {
                    return true;
                }

                if (Connection is null || inputConnection is null)
                {
                    return true;
                }

                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }

                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            public enum UpdateOrderOption
            {
                InsertUpdateDelete = 0,
                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {
                private DataRelation _relation;
                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation = relation;
                    if (childFirst)
                    {
                        _childFirst = -1;
                    }
                    else
                    {
                        _childFirst = 1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is object);
                    var root = row;
                    distance = 0;
                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row] = row;
                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);
                    while (parent is object && traversedRows.ContainsKey(parent) == false)
                    {
                        distance = distance + 1;
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(_relation, DataRowVersion.Default);
                    }

                    if (distance == 0)
                    {
                        traversedRows.Clear();
                        traversedRows[row] = row;
                        parent = row.GetParentRow(_relation, DataRowVersion.Original);
                        while (parent is object && traversedRows.ContainsKey(parent) == false)
                        {
                            distance = distance + 1;
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(_relation, DataRowVersion.Original);
                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }

                    if (row1 is null)
                    {
                        return -1;
                    }

                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);
                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);
                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst * distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is object && root2.Table is object);
                        if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}